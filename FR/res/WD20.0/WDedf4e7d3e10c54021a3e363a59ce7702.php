<?php
//20.0.56.0 FMK/Dessin/Image/Gd.php GF 
//VersionVI: 30F200066p
//(c) 2005-2012 PC SOFT  - Release
 define('FMK_Dessin_Image_Gd',true); if (!defined('__INC__FMK/Dessin.php')) { define('__INC__FMK/Dessin.php',true); include_once(WB_INCLUDE_PATH.'WD5951fddf83c5123cd2f610985503d9e2.php'); } if (!defined('__INC__FMK/Dessin/Couleur.php')) { define('__INC__FMK/Dessin/Couleur.php',true); include_once(WB_INCLUDE_PATH.'WD2521e084cbaf10ef8d5f4ede4dc6baa2.php'); } if (!defined('__INC__FMK/Chaine.php')) { define('__INC__FMK/Chaine.php',true); include_once(WB_INCLUDE_PATH.'WD55acb2e708e26f23cb8956cd93e98123.php'); } if (!defined('__INC__FMK/Disque.php')) { define('__INC__FMK/Disque.php',true); include_once(WB_INCLUDE_PATH.'WD99bd5984d9c78e9239c729a52b83e562.php'); } if (!defined('__INC__FMK/Contexte.php')) { define('__INC__FMK/Contexte.php',true); include_once(WB_INCLUDE_PATH.'WDb8ed6cc9e4e026a5ab69ef35262a90ab.php'); } define('GD_FONT_DEFAUT',5); define('GD_FONT_AUTORISE_RECOPIE_DEPUIS_FONTS_SYSTEMES',false); define('GD_FONT_TOUT_EN_MAJUSCULE',false); define('GD_FONT_EXTENSION','.ttf'); define('GD_FONT_AUTORISE_ACCES_DEPUIS_FONTS_SYSTEMES',false); define('GD_FONT_AUTORISE_POLICES_DISTRIBUEES',true); $_GLOBAL_IMAGE_COURANTE = null; function F418548d8($image = null) { global $_GLOBAL_IMAGE_COURANTE; if ($image === false) { $_GLOBAL_IMAGE_COURANTE = null; return true; } $clContexte =& F4a1887ce(); if (isset($image)) { $_GLOBAL_IMAGE_COURANTE =& F9abbf335($image); $clContexte->F4c8f9bd4('GD_ENCOURS',$image); return true; } if ( (!isset($_GLOBAL_IMAGE_COURANTE)) || (!isset($_GLOBAL_IMAGE_COURANTE->m_fmkImageGD)) ) { $gdEnCours = $clContexte->F239ddeda('GD_ENCOURS'); if ( (!isset($gdEnCours)) ) return null; $_GLOBAL_IMAGE_COURANTE =& F9abbf335($gdEnCours); if (!is_object($_GLOBAL_IMAGE_COURANTE)) return null; if ((!$_GLOBAL_IMAGE_COURANTE->_HasGD()) ) { if (!$_GLOBAL_IMAGE_COURANTE->m_fmkImageGD->m_bFinDessin) { $_GLOBAL_IMAGE_COURANTE->_HasGD(true); } } } return $_GLOBAL_IMAGE_COURANTE; } class FMK_Dessin_Image_Gd { var $m_nLargeur = 0; var $m_nHauteur = 0; var $m_image = null; var $m_imageTexture = null; var $m_imageBrosse = null; var $m_bAvecOpacite = false; var $m_bAvecQuadrillage = false; var $m_nFondCouleur = null; var $m_nFondOpacite = gdAlphaDefaut; var $m_nFondRemplissage = RemplissageDéfaut; var $m_nFondHachure = HachuresDéfaut; var $m_bStyleDefini = false; var $m_nStyleTrait = gdStyleTraitDéfaut; var $m_nStyleLargeurTrait = gdLargeurTraitDéfaut; var $m_nStyleOpacite = gdAlphaDefaut; var $m_nStyleCouleur = gdCouleurDéfaut; var $m_nCouleurTransparente = IMG_COLOR_TRANSPARENT; var $m_sFontFichier = null; var $m_nFontTaille = gdFontTailleDéfaut; var $m_nFontAttributs = iNormal; var $m_nFontInclinaison = gdFontInclinaisonDéfaut; var $m_nModeCourant = dessinNormal; var $m_bFinDessin = false; var $m_sAliasImageParent = null; var $m_sStreamId; var $m_pclConteneurRepetee = null; var $m_sFormatImport = null; function FMK_Dessin_Image_Gd($cImageParent = null, $nL = null, $nH = null, $CouleurTransparente = null,$bSansCreation=false) { if (isset($cImageParent)) { $this->m_sAliasImageParent = $cImageParent->Alias; $this->F7a23a9d0($cImageParent->Alias); } if (isset($nL)) $this->m_nLargeur = $nL; if (isset($nH)) $this->m_nHauteur = $nH; if (isset($CouleurTransparente)) { unset($CouleurTransparente); } if (!$bSansCreation) $this->F9fa19304(); } function F7a23a9d0($sAlias=null) { if (!isset($sAlias)) $sAlias = $this->m_sAliasImageParent; global $MaPage; if (!isset($MaPage->TabChamp[$sAlias])) { $this->m_sStreamId = uniqid($sAlias.'_'); } else { $pclChamp =& $MaPage->TabChamp[$sAlias]; $pclChampConteneur =& $pclChamp->m_pclChampConteneur; if (isset($pclChampConteneur)) { switch ($pclChampConteneur->GetType()) { case TYPE_CHAMP_ZR: case TYPE_CHAMP_ZRLINEAIRE: case TYPE_CHAMP_TABLE: { $this->m_sStreamId = $sAlias; $this->m_pclConteneurRepetee =& $pclChampConteneur; } break; } } else { $this->m_sStreamId = $sAlias; } } } function F8ddf8952() { return isset($this->m_pclConteneurRepetee) ? ($this->m_sStreamId . '_' . $this->m_pclConteneurRepetee->m_nLigneAffichee) : $this->m_sStreamId ; } function F0e527c40($sMemo,$bForceTailleReelle,$nTransparence,$nModeAffichage,$nCouleurFond) { if ($this->F19164dfa()) $this->Fc421bd92(); if (empty($sMemo)) { $this->m_image = imagecreatetruecolor($this->m_nLargeur,$this->m_nHauteur); if ($this->m_image===false) return false; imagefill($this->m_image,0,0,Fb121f882($nCouleurFond)); } else { F6b1e3687(); $this->m_image = imagecreatefromstring($sMemo); if ( ($this->m_image!==false) && (imagecolortransparent($this->m_image) == -1) ) { $this->Fd2ea6e89(true); } F1e7b0563(); $data = F1abae4f0(); if (!empty($data)) F853b7085($data,errMessageSysteme); if ($this->m_image===false) { $sNomTemporaire = F4574f559(__FUNCTION__,'.'); $f=F0a2479f9($sNomTemporaire,foCreation); Fa40bd700($f,$sMemo); Fae814d9e($f); $bOK = $this->Faeaf760a($sNomTemporaire,$bForceTailleReelle,$nTransparence,$nModeAffichage,$nCouleurFond); Fc0adeacb($sNomTemporaire); return $bOK; } } $this->m_sFormatImport = null; if (is_resource($this->m_image)) { $data = ''; if (!$bForceTailleReelle) { $this->Fd827cbc0($nCouleurFond); $this->F8ff9c1c7($nTransparence,$nModeAffichage,$nCouleurFond); } else { $this->Fb869595d(); } } else { $this->F9fa19304(); } return (empty($data)); } function Fd827cbc0($nCouleurFond) { if (imagecolorstotal($this->m_image)==0) { return; } $nLargeur=imagesx($this->m_image); $nHauteur=imagesy($this->m_image); $tmp = imagecreatetruecolor($nLargeur,$nHauteur); F6b1e3687(); if ( (($nIndexTransp=imagecolortransparent($this->m_image))>-1) && (false!==imagecolorsforindex($this->m_image,$nIndexTransp)) ) { $nCouleurFondGD = Fb121f882($nCouleurFond); imagefill($tmp,0,0,imagecolorallocate($tmp,Fadb05a7c($nCouleurFondGD),F88bb47e1($nCouleurFondGD),F72d1dde6($nCouleurFondGD))); } imagecopy($tmp,$this->m_image,0,0,0,0,$nLargeur,$nHauteur); F1e7b0563(); imagedestroy($this->m_image); $this->m_image=$tmp; } function Fb869595d($tmp=null) { F6b1e3687(); $this->m_nLargeur = imagesx(isset($tmp) ? $tmp : $this->m_image); $this->m_nHauteur = imagesy(isset($tmp) ? $tmp : $this->m_image); F1e7b0563(); } function Faeaf760a($sFichier,$bForceTailleReelle,$nTransparence,$nModeAffichage,$nCouleurFond) { if ($this->F19164dfa()) $this->Fc421bd92(); $info = F0123f916($sFichier); $type = utf8_substr($info,0,utf8_strpos($info,TAB)); F6b1e3687(); $bFormatCouleurVrai = true; switch ($type) { case "JPG": $this->m_image = imagecreatefromjpeg(F9486bf1a($sFichier)); break; case "BMP": $this->m_image = F7f901a36(F9486bf1a($sFichier)); break; case "PNG": $this->m_image = imagecreatefrompng(F9486bf1a($sFichier)); $sMemo = file_get_contents(F9486bf1a($sFichier)); if ((utf8_ord ( utf8_substr($sMemo,25,1) ) & 4) == 4) { $this->Fd2ea6e89(true); } unset($sMemo); break; case "GIF": $this->m_image = imagecreatefromgif(F9486bf1a($sFichier)); $bFormatCouleurVrai = false; break; default: $data = FMK_ChaineConstruit('ERR_FICHIER_INCORRECT',$sFichier); $this->m_image = null; break; } if (is_resource($this->m_image)) { $this->m_sFormatImport = $type; if (!$bForceTailleReelle) { if (!$bFormatCouleurVrai) { $this->Fd827cbc0($nCouleurFond); } $this->F8ff9c1c7($nTransparence,$nModeAffichage,$nCouleurFond); } else { $this->Fb869595d(); } } else { $this->F9fa19304(); } F1e7b0563(); if (empty($data)) $data = F1abae4f0(); if (!empty($data)) F853b7085($data,errMessageSysteme); return (empty($data)); } function F7a6ad42d() { F6b1e3687(); $bSucces = imagedestroy($this->m_image); F1e7b0563(); return $bSucces; } function Ffcc8144c() { $sFlux = $this->F3267b049(enMemoire); $clContexte =& FMK_Contexte(); $clContexte->F4c8f9bd4('STREAMIMAGE_'.$this->F8ddf8952(), $sFlux); } function F3267b049($sDestination) { $type = 'PNG'; if (isset($this->m_sFormatImport)) { $type = $this->m_sFormatImport; } switch ($type) { case 'JPG': $sFlux = $this->dSauveImageJPEG($sDestination); break; case 'GIF': $sFlux = $this->dSauveImageGIF($sDestination); break; case 'BMP': $sFlux = $this->dSauveImageBMP($sDestination); break; case 'PNG': default: if ($sDestination == enMemoire) { $sFlux = Ff6520165($this->m_image); } else { $sFlux = imagepng($this->m_image,F9486bf1a($sDestination)); } } return $sFlux; } function F19164dfa() { $clContexte =& FMK_Contexte(); return ( $clContexte->F1a1d6423('STREAMIMAGE_'.$this->F8ddf8952()) ); } function Fc421bd92() { $clContexte =& FMK_Contexte(); $clContexte->Ff9d5e233('STREAMIMAGE_'.$this->F8ddf8952()); } function _HasGD($bCreerSiNon = false, $sAlias = null) { F6b1e3687(); $bRes = is_resource($this->m_image); F1e7b0563(); $clContexte =& FMK_Contexte(); if (!$bRes) { $sLectureSession = $clContexte->F239ddeda('STREAMIMAGE_'.$this->F8ddf8952()); if ( isset($sAlias) && isset($sLectureSession) ) { $this->m_image = imagecreatefromstring($clContexte->F239ddeda('STREAMIMAGE_'.$this->F8ddf8952()) ); if (imagecolortransparent($this->m_image) == IMG_COLOR_TRANSPARENT) imagesavealpha($this->m_image,true); if ($this->F9f31211e()) { $this->m_imageTexture = imagecreatefromstring($clContexte->F239ddeda('STREAMIMAGE_'.$this->F8ddf8952().'_TEXTURE') ); } if ($this->F50eeb490()) { $this->m_imageBrosse = imagecreatefromstring($clContexte->F239ddeda('STREAMIMAGE_'.$this->F8ddf8952().'_BROSSE') ); } return true; } if ($bCreerSiNon) { return $this->F9fa19304(); } return false; } return true; } function F99d5ad65($nNbCouleurs) { $buffer = imagecreatetruecolor($this->m_nLargeur,$this->m_nHauteur); if ($this->F0b8659df()) { $trans_color = imagecolortransparent ( $buffer ); if ($trans_color!=-1) { $trans_color = imagecolorsforindex($buffer,$trans_color); $trans_index = imagecolorallocate ( $buffer, $trans_color['red'], $trans_color['green'], $trans_color['blue'] ); imagecolortransparent ( $buffer, $trans_index ); } else { $trans_index = gdCouleurDéfaut; if (isset($this->m_sAliasImageParent)) { global $MaPage; if (isset($MaPage->TabChamp[$this->m_sAliasImageParent])) { $pclChamp =& $MaPage->TabChamp[$this->m_sAliasImageParent]; $trans_index = Fb121f882($pclChamp->F4c8b7365()); } } } imagefill($buffer,0,0,$trans_index); imagealphablending($buffer,true); imagesavealpha($buffer,false); } else { imagefill($buffer,0,0,gdCouleurDéfaut); } imagecopy($buffer,$this->m_image,0,0,0,0,$this->m_nLargeur,$this->m_nHauteur); if ( (isset($nNbCouleurs)) && (is_numeric($nNbCouleurs)) && ($nNbCouleurs>0) ) { $buffer2 = imagecreatetruecolor($this->m_nLargeur,$this->m_nHauteur); imagetruecolortopalette($buffer,false,$nNbCouleurs); if ($this->F0b8659df()) { $trans_index = imagecolorallocate ( $buffer2, $trans_color['red'], $trans_color['green'], $trans_color['blue'] ); imagecolortransparent ( $buffer2, $trans_index ); imagefill($buffer2,0,0,$trans_index); imagealphablending($buffer2,true); imagesavealpha($buffer2,false); } else { imagefill($buffer2,0,0,gdCouleurDéfaut); } imagecopy($buffer2,$buffer,0,0,0,0,$this->m_nLargeur,$this->m_nHauteur); return $buffer2; } return $buffer; } function dPixelCouleur($x,$y) { $tabCouleur = imagecolorsforindex($this->m_image,imagecolorat($this->m_image,$x,$y)); $retour = F4f6e8051($tabCouleur['red'],$tabCouleur['green'],$tabCouleur['blue'],0); return ($retour == 1) ? 0 : $retour; } function dPixelOpacite($x,$y) { if ( ($x<0) || ($y<0) || ($x>=$this->m_nLargeur) || ($y>=$this->m_nHauteur) ) return false; $CouleurGD = new Fe38a1599(imagecolorat($this->m_image,$x,$y)); $CouleurWL = new FMK_Dessin_Couleur_WLangage( $CouleurGD->F57dd4c6c(CouleurFormatWL) ); return $CouleurWL->F43e12208(); } function F73549e41($bForceCommeAffichage = false, $bInterditAlpha = false) { $imageAffichage = imagecreatetruecolor($this->m_nLargeur,$this->m_nHauteur); if ($this->m_bAvecOpacite) { if ( (!$bInterditAlpha) && ($this->m_nCouleurTransparente == IMG_COLOR_TRANSPARENT) ) { imagesavealpha($imageAffichage, true); imagealphablending($imageAffichage, false); } else { $fond = $this->F35c8b3aa($this->m_nCouleurTransparente,true,$imageAffichage); imagecolortransparent($imageAffichage,$fond); } imagecopy($imageAffichage,$this->m_image,0,0,0,0,$this->m_nLargeur,$this->m_nHauteur); if ( ($this->m_bAvecQuadrillage) && ($bForceCommeAffichage) ) { $nAlphaCouleur = (!$bInterditAlpha) ? 100 : 0; $couleurBlanc = imagecolorallocatealpha($imageAffichage,255,255,255,$nAlphaCouleur); $couleurNoir = imagecolorallocatealpha($imageAffichage,238,243,250,$nAlphaCouleur); $nCoteCarre = 10; $nLigne = 0; for ($j=0; $j<$this->m_nHauteur; $j = $j + $nCoteCarre+1) { $bBlancEnCours = (++$nLigne % 2); for ($i=0; $i<$this->m_nLargeur; $i = $i + $nCoteCarre+1) { $couleurEnCours = ($bBlancEnCours) ? $couleurBlanc : $couleurNoir; $bBlancEnCours = !$bBlancEnCours; if ($couleurEnCours != $couleurBlanc) imagefilledrectangle($imageAffichage,$i,$j,$i+$nCoteCarre,$j+$nCoteCarre,$couleurEnCours); } } } } else { imagecopy($imageAffichage,$this->m_image,0,0,0,0,$this->m_nLargeur,$this->m_nHauteur); } return $imageAffichage; } function dSauveImagePNG($sURL, $CouleurTransparente = null, $bForceCommeAffichage = false) { if (imagetypes() & IMG_PNG) { $bForceSansAlpha = false; $coulTransparentePrecedente = $this->m_nCouleurTransparente; if (isset($CouleurTransparente) && ($CouleurTransparente!=Transparent)) { $this->m_nCouleurTransparente = Fb121f882( $CouleurTransparente ); $bForceSansAlpha = true; } else { $CouleurTransparente = IMG_COLOR_TRANSPARENT; $bForceSansAlpha = !$this->F0b8659df(); } $image = $this->F73549e41($bForceCommeAffichage,$bForceSansAlpha); if ($CouleurTransparente != IMG_COLOR_TRANSPARENT) { imagecolortransparent($image,$CouleurTransparente); } if ($sURL == enMemoire) { $Retour = Ff6520165($image); } else { $Retour = imagepng($image,F9486bf1a($sURL)); } imagedestroy($image); $this->m_nCouleurTransparente = $coulTransparentePrecedente; return $Retour; } else { F853b7085(Fd7624002("Le format PNG n'est pas supporté par la librairie GD chargée"),errMessageSysteme); return false; } } function dSauveImageBMP($sNomFichier, $nNbCouleurs = null) { $image = $this->F99d5ad65($nNbCouleurs); if ($sNomFichier == enMemoire) $Retour = Fd3f53de9($image); else $Retour = Fcdc9d18d($image,$sNomFichier,gdCouleurDéfaut); imagedestroy($image); return $Retour; } function dSauveImageGIF($sNomFichier, $nNbCouleurs = null) { if (imagetypes() & IMG_GIF) { $image = $this->F99d5ad65((isset($nNbCouleurs) ? max($nNbCouleurs,256) : 256)); if ($sNomFichier == enMemoire) { $Retour = F2e5ba721($image); } else { $Retour = imagegif($image,F9486bf1a($sNomFichier)); } imagedestroy($image); return $Retour; } else { F853b7085(Fd7624002("Le format GIF n'est pas supporté par la librairie GD chargée"),errMessageSysteme); return false; } } function dSauveImageJPEG($sNomFichier,$nQualite=null) { if (!isset($nQualite)) $nQualite = gdJpegQualiteDefaut; if ( (imagetypes() & IMG_JPEG) || (imagetypes() & IMG_JPG) ) { $buffer = imagecreatetruecolor($this->m_nLargeur,$this->m_nHauteur); imagefill($buffer,0,0,gdCouleurDéfaut); if ($this->F0b8659df()) { imagealphablending($buffer,true); imagesavealpha($buffer,false); } imagecopy($buffer,$this->m_image,0,0,0,0,$this->m_nLargeur,$this->m_nHauteur); if ($sNomFichier == enMemoire) { $Retour = Fa58a0db1($buffer,$nQualite); } else { $Retour = (imagejpeg($buffer,F9486bf1a($sNomFichier),$nQualite)); } imagedestroy($buffer); return $Retour; } else { F853b7085(Fd7624002("Le format JPEG n'est pas supporté par la librairie GD chargée"),errMessageSysteme); return false; } } function F50eeb490() { return ($this->m_bStyleDefini); } function F9f31211e() { return (isset($this->m_nFondCouleur)); } function F0b8659df() { return ($this->m_bAvecOpacite); } function F3fe82231($nFormat,$nCouleur,$nCouleurTransparente = IMG_COLOR_TRANSPARENT) { $tabStyle = null; switch ($nFormat) { case gdStyleTraitTiret : $tabStyle = array($nCouleur,$nCouleur,$nCouleur,$nCouleurTransparente); break; case gdStyleTraitPointillé : $tabStyle = array($nCouleur,$nCouleur,$nCouleurTransparente,$nCouleurTransparente); break; case gdStyleTraitPointilléTiret : $tabStyle = array($nCouleur,$nCouleur,$nCouleur,$nCouleur,$nCouleur,$nCouleur,$nCouleur,$nCouleur,$nCouleur,$nCouleurTransparente,$nCouleurTransparente,$nCouleurTransparente,$nCouleurTransparente,$nCouleurTransparente,$nCouleur,$nCouleur,$nCouleur,$nCouleurTransparente,$nCouleurTransparente,$nCouleurTransparente,$nCouleurTransparente,$nCouleurTransparente); break; case gdStyleTraitDeuxPointillés : $tabStyle = array($nCouleur,$nCouleur,$nCouleur,$nCouleur,$nCouleur,$nCouleur,$nCouleur,$nCouleur,$nCouleur,$nCouleurTransparente,$nCouleurTransparente,$nCouleurTransparente,$nCouleur,$nCouleur,$nCouleur,$nCouleurTransparente,$nCouleurTransparente,$nCouleurTransparente,$nCouleur,$nCouleur,$nCouleur,$nCouleurTransparente,$nCouleurTransparente,$nCouleurTransparente); break; case gdStyleTraitInvisible : $tabStyle = array($nCouleurTransparente); break; default : $tabStyle = array($nCouleur); } return $tabStyle; } function F35c8b3aa($nCouleur, $bForceSansTransparence = false, $image = null) { if (!isset($image)) $image = &$this->m_image; $nCouleur = ($nCouleur===0) ? Fb121f882(1) : $nCouleur; if ( ($nCouleur == IMG_COLOR_STYLEDBRUSHED) || ($nCouleur == IMG_COLOR_TILED) ) { if ($nCouleur == IMG_COLOR_STYLEDBRUSHED) { $this->dStylo(F91b14b72($this->m_nStyleCouleur),$this->m_nStyleTrait,$this->m_nStyleLargeurTrait,F4db7eeed($this->m_nStyleOpacite)); } else { $this->dFond(F91b14b72($this->m_nFondCouleur),$this->m_nFondRemplissage,$this->m_nFondHachure,F4db7eeed($this->m_nFondOpacite)); } return $nCouleur; } if ( ($this->m_bAvecOpacite) && (!$bForceSansTransparence) ) { if ($nCouleur == IMG_COLOR_TRANSPARENT) return $nCouleur; $nResultat = imagecolorallocatealpha( $image ,Fadb05a7c($nCouleur),F88bb47e1($nCouleur),F72d1dde6($nCouleur),F8ef357dc($nCouleur) ); } else { if ($nCouleur == IMG_COLOR_TRANSPARENT) return ($bForceSansTransparence) ? gdCouleurDéfaut : IMG_COLOR_TRANSPARENT; $nResultat = imagecolorallocate( $image ,Fadb05a7c($nCouleur),F88bb47e1($nCouleur),F72d1dde6($nCouleur) ); } if ( ($nResultat == -1) || ($nResultat === false) ) { F853b7085(F1ac3f040("ERR_INTERNE")); $nResultat = gdCouleurDéfaut; } return $nResultat; } function F30829ce1() { $this->m_image = imagecreatetruecolor($this->m_nLargeur,$this->m_nHauteur); if ($this->F0b8659df()) { imagesavealpha($this->m_image, true); imagealphablending($this->m_image, false); imagefill($this->m_image,0,0,imagecolorallocatealpha($this->m_image,0,0,0,127)); } } function F8abfc681(&$nCouleurTraits, $bForcerStyle = false, $bForceSansTransparence = false, $bForceSansTexture = false) { if ( ($nCouleurTraits === null) || $bForcerStyle) { if (($this->F50eeb490()) || $bForcerStyle) { if (!$bForceSansTexture) $nCouleurTraits = IMG_COLOR_STYLEDBRUSHED; else { $nAlpha = (!$bForceSansTransparence) ? $this->m_nStyleOpacite : gdAlphaDefaut; $nCouleurTraits = F967399ea($this->m_nStyleCouleur,$nAlpha); } } else { $nCouleurTraits = gdCouleurDéfaut; } } else $nCouleurTraits = Fb121f882($nCouleurTraits); $nCouleurTraits = $this->F35c8b3aa($nCouleurTraits,$bForceSansTransparence); } function Ff3f10c0c(&$nCouleurFond, $bForcerStyle = false, $bForceSansTransparence = false, $bForceSansTexture = false) { if ( ($nCouleurFond === null) || $bForcerStyle) { if ( ($this->F9f31211e()) || $bForcerStyle) { if ($this->m_nFondRemplissage == RemplissageHachuré) { $nCouleurFond = IMG_COLOR_TILED; } elseif ($this->m_nFondRemplissage == RemplissageTransparent) { $nCouleurFond = IMG_COLOR_TRANSPARENT; } if (($this->m_nFondRemplissage == RemplissagePlein) || ($bForceSansTexture && ($nCouleurFond == IMG_COLOR_TILED)) ) { $nAlpha = (!$bForceSansTransparence) ? $this->m_nFondOpacite : gdAlphaDefaut; $nCouleurFond = F967399ea($this->m_nFondCouleur,$nAlpha); } } else { $nCouleurFond = IMG_COLOR_TRANSPARENT; } } else $nCouleurFond = Fb121f882($nCouleurFond); if ($bForceSansTransparence && ($nCouleurFond == IMG_COLOR_TRANSPARENT)) $nCouleurFond = gdCouleurDéfaut; $nCouleurFond = $this->F35c8b3aa($nCouleurFond,$bForceSansTransparence); } function F11ec9304(&$nCouleurTraits, &$nCouleurFond, $bForcerStyle = false, $bForceSansTransparence = false, $bForceSansTexture = false) { $this->Ff3f10c0c($nCouleurFond,$bForcerStyle,$bForceSansTransparence,$bForceSansTexture); $this->F8abfc681($nCouleurTraits,$bForcerStyle,$bForceSansTransparence,$bForceSansTexture); } function dLigne($nXDépart, $nYDépart, $nXArrivée, $nYArrivée, $nCouleur = null, $nLargeur = null) { $this->F8abfc681($nCouleur); if ( (!isset($nLargeur) ) || (!is_numeric($nLargeur)) || ($nLargeur<=0) ) { if ($this->F50eeb490()) $nLargeur = $this->m_nStyleLargeurTrait; else $nLargeur = gdLargeurTraitDéfaut; } imagesetthickness($this->m_image,$nLargeur); $bRetour = imageline($this->m_image,$nXDépart,$nYDépart,$nXArrivée,$nYArrivée,$nCouleur); imagesetthickness($this->m_image,gdLargeurTraitDéfaut); return $bRetour; } function dPoint($nX, $nY, $nCouleur = null, $nOpacite = null) { if (!isset($nOpacite)) $nOpacite = wlOpaciteDefaut; if (!is_numeric($nOpacite) || ($nOpacite<wlOpaciteMin) || ($nOpacite>wlOpaciteMax) ) { F853b7085(FMK_ChaineConstruit(F1ac3f040("ERR_PARAMETRE_VALEUR_INCORRECT"),F1ac3f040("FCT_DPOINT"))); return false; } $this->F8abfc681($nCouleur,false,true,true); $nCouleur = F967399ea($nCouleur,F9b65f3c4($nOpacite)); $nCouleur=imagecolorallocatealpha($this->m_image,Fadb05a7c($nCouleur),F88bb47e1($nCouleur),F72d1dde6($nCouleur),F8ef357dc($nCouleur)); if ($this->m_nModeCourant == dessinXOR) $nCouleur = (($nCouleur)^(imagecolorat($this->m_image,$nX,$nY))); return imagesetpixel($this->m_image,$nX,$nY,$nCouleur); } function dPolygone() { $args = func_get_args(); F6b1e3687(); if (is_array($args[0])) $args = $args[0]; F1e7b0563(); F6b1e3687(); $bArray = is_array($args[0]); F1e7b0563(); if ($bArray) { $tab = array(); F6b1e3687(); $bArray = is_array($args[0][0]); F1e7b0563(); if ($bArray) { $i=0; while ( (isset($args[0][$i])) && (is_array($args[0][$i])) && (isset($args[0][$i][0])) && (isset($args[0][$i][1])) ) { $tab[] = $args[0][$i][0]; $tab[] = $args[0][$i][1]; ++$i; } } else { $tab = $args[0]; } if (isset($args[1])) $nCouleurFond = $args[1]; if (isset($args[2])) $nCouleurTraits = $args[2]; $args = $tab; $nNbPoints = floor(count($args) / 2); } else { $nNbPoints = $args[0]; $nNbArgs = count($args); F6b1e3687(); if (($nNbArgs==1)&&(is_array($args[0]))) { $args = $args[0]; $nNbArgs = floor(count($args)); } F1e7b0563(); for ($i=0; $i<$nNbArgs-1; $i++) { $args[$i]=$args[$i+1]; } unset($args[$nNbArgs-1]); --$nNbArgs; if ($nNbArgs == ($nNbPoints*2)+2 ) { $nCouleurFond = $args[$nNbArgs-2]; $nCouleurTraits = $args[$nNbArgs-1]; unset($args[$nNbArgs-1]); unset($args[$nNbArgs-2]); } elseif ($nNbArgs == ($nNbPoints*2)+1 ) { $nCouleurFond = $args[$nNbArgs-1]; $nCouleurTraits = null; unset($args[$nNbArgs-1]); } else { $nCouleurFond = null; $nCouleurTraits = null; } } if ($nNbPoints<3) return false; $this->F11ec9304($nCouleurTraits,$nCouleurFond); if (count($args)>$nNbPoints*2) { $args=array_slice($args,0,$nNbPoints*2); } $bResultat = true; if ($nCouleurFond != IMG_COLOR_TRANSPARENT) $bResultat = $bResultat && imagefilledpolygon($this->m_image,$args,$nNbPoints,$nCouleurFond); if ($nCouleurTraits != IMG_COLOR_TRANSPARENT) $bResultat = $bResultat && imagepolygon($this->m_image,$args,$nNbPoints,$nCouleurTraits); return $bResultat; } function dCercle($x1,$y1,$x2,$y2, $nCouleurFond = null,$nCouleurTrait = null) { $nHauteur = $y2 - $y1; $nLargeur = $x2 - $x1; $xCentre = $x1 + ($nLargeur/2); $yCentre = $y1 + ($nHauteur/2); $this->F11ec9304($nCouleurTrait,$nCouleurFond); $bResultat = true; if ( $nCouleurFond != IMG_COLOR_TRANSPARENT ) $bResultat = $bResultat && imagefilledellipse($this->m_image,$xCentre,$yCentre,$nLargeur,$nHauteur,$nCouleurFond); if ( $nCouleurTrait != IMG_COLOR_TRANSPARENT ) $bResultat = $bResultat && imageellipse($this->m_image,$xCentre,$yCentre,$nLargeur,$nHauteur,$nCouleurTrait); return $bResultat; } function dRectangle($x1,$y1,$x2,$y2, $nCouleurFond = null, $nCouleurTrait = null) { $this->F11ec9304($nCouleurTrait,$nCouleurFond); $bResultat = true; if ( $nCouleurFond != IMG_COLOR_TRANSPARENT ) $bResultat = $bResultat && imagefilledrectangle($this->m_image,$x1,$y1,$x2,$y2,$nCouleurFond); if ( $nCouleurTrait != IMG_COLOR_TRANSPARENT ) $bResultat = $bResultat && imagerectangle($this->m_image,$x1,$y1,$x2,$y2,$nCouleurTrait); return $bResultat; } function dFond($nCouleur, $styleRemplissage = null, $typeHachure = null, $nOpacite = null) { if ($styleRemplissage === null) $styleRemplissage = RemplissageDéfaut; if ($typeHachure === null) $typeHachure = HachuresDéfaut; if ($nOpacite === null) $nOpacite = wlOpaciteDefaut; $this->m_nFondCouleur = Fb121f882($nCouleur); $this->m_nFondOpacite = F9b65f3c4($nOpacite,CouleurFormatWL); $this->m_nFondRemplissage = $styleRemplissage; $this->m_nFondHachure = $typeHachure; { if (isset($this->m_imageTexture)) { F6b1e3687(); imagedestroy($this->m_imageTexture); F1e7b0563(); } $this->m_imageTexture = imagecreate($this->m_nLargeur,$this->m_nHauteur); if ($this->F0b8659df()) { $couleurTransp = imagecolorallocate($this->m_imageTexture,255-Fadb05a7c($nCouleur),255-F88bb47e1($nCouleur),255-F72d1dde6($nCouleur)); imagecolortransparent($this->m_imageTexture,$couleurTransp); } else { imagefill($this->m_imageTexture,0,0, imagecolorallocate($this->m_imageTexture,Fadb05a7c(gdCouleurDéfaut),F88bb47e1(gdCouleurDéfaut),F72d1dde6(gdCouleurDéfaut)) ); } $x1 = 0; $y1 = 0; $x2 = $this->m_nLargeur; $y2 = $this->m_nHauteur; $couleur = $this->F35c8b3aa(F967399ea($this->m_nFondCouleur,$this->m_nFondOpacite),true,$this->m_imageTexture); if ($this->m_nFondRemplissage == RemplissagePlein) { imagefill($this->m_imageTexture,0,0,$couleur); } elseif ( ($this->m_nFondRemplissage == RemplissageHachuré) && ($this->m_nFondCouleur != IMG_COLOR_TRANSPARENT) ) switch ($this->m_nFondHachure) { case HachuresCroisees : case HachuresHorizontales : for($i=$x1+5;$i<$x2;$i = $i + 10) { imageline($this->m_imageTexture,$x1,$i,$x2,$i,$couleur); } if ($this->m_nFondHachure == HachuresHorizontales) break; case HachuresVerticales : for($i=$y1+5;$i<$y2;$i = $i + 10) { imageline($this->m_imageTexture,$i,$y1,$i,$y2,$couleur); } break; case HachuresDiagonalesCroisees : case HachuresDiagonales120degres : case HachuresDiagonales60degres : $nPas = 7; $xBase = $x1 + floor($y2 / tan(deg2rad(60))); imageline($this->m_imageTexture,$x1,$y2,$xBase,$y1,$couleur); $y = $y1; $x = $xBase; $bVertical = false; for( $x12=$x1+$nPas; $x12<$x2; $x12 = $x12 + $nPas) { if ($x!=$x2) { $x += $nPas; } else { if (!$bVertical) { $b = ($x2-$x12) * tan(deg2rad(60)); $y = $y2 - $b; $x = $x2; $bVertical = true; } else { $y += $nPas* tan(deg2rad(60)); } } imageline($this->m_imageTexture,$x12,$y2,$x,$y,$couleur); } $y = $xBase * tan(deg2rad(60)); for( $x=$xBase-$nPas; $x>$x1; $x = $x - $nPas) { $y = $y - ($nPas * tan(deg2rad(60))); imageline($this->m_imageTexture,$x1,$y,$x,$y1,$couleur); } if ($this->m_nFondHachure == HachuresDiagonales60degres) break; case HachuresDiagonalesCroisees : case HachuresDiagonales120degres : for($j=$y1+1;$j<$y2;$j++) { for($i=$x1+1;$i<$x2-$i;$i++) { $a = imagecolorat($this->m_imageTexture,$i,$j); $b = imagecolorat($this->m_imageTexture,$x2-$i,$j); if ($this->m_nFondHachure == HachuresDiagonales120degres) { imagesetpixel($this->m_imageTexture,$i,$j,$b); imagesetpixel($this->m_imageTexture,$x2-$i,$j,$a); } else { if ($b == $couleur) imagesetpixel($this->m_imageTexture,$i,$j,$b); if ($a == $couleur) imagesetpixel($this->m_imageTexture,$x2-$i,$j,$a); } } } break; } imagesettile ($this->m_image,$this->m_imageTexture); $clContexte =& FMK_Contexte(); $clContexte->F4c8f9bd4('STREAMIMAGE_'.$this->F8ddf8952().'_TEXTURE',Ff6520165($this->m_imageTexture)); } return true; } function Feafd537d($x1,$y1,$x2,$y2,$x3,$y3,$x4,$y4, $nCouleurTrait = null, $nCouleurFond = null, $bModePortion = false, $bModeCorde = false) { $nHauteur = $y2 - $y1; $nLargeur = $x2 - $x1; $nRayonLargeur = $nLargeur/2; $nRayonHauteur = $nHauteur/2; $xCentre = $x1 + $nRayonLargeur; $yCentre = $y1 + $nRayonHauteur; $nAlpha = rad2deg(atan2(($y3 - $yCentre), ($x3 - $xCentre))); $nBeta = rad2deg(atan2(($y4 - $yCentre), ($x4 - $xCentre))); while ($nAlpha < 0) $nAlpha += 360; while ($nBeta < 0) $nBeta += 360; $switch = $nBeta; $nBeta = $nAlpha; $nAlpha = $switch; $bResultat = true; $couleur_des_traits = $nCouleurTrait; $couleur_de_fond = $nCouleurFond; { if ($bModePortion) { $bResultat = $bResultat && imagefilledarc($this->m_image,$xCentre,$yCentre,$nLargeur,$nHauteur,$nAlpha,$nBeta, $couleur_de_fond,IMG_ARC_PIE); $bResultat = $bResultat && imagefilledarc($this->m_image,$xCentre,$yCentre,$nLargeur,$nHauteur,$nAlpha,$nBeta, $couleur_des_traits, IMG_ARC_EDGED | IMG_ARC_NOFILL); return $bResultat; } $bResultat = $bResultat && imagearc($this->m_image,$xCentre,$yCentre,$nLargeur,$nHauteur,$nAlpha,$nBeta,$couleur_des_traits); if ($bModeCorde) $bResultat = $bResultat && imagefilledarc($this->m_image,$xCentre,$yCentre,$nLargeur,$nHauteur,$nAlpha,$nBeta,$couleur_des_traits,IMG_ARC_CHORD | IMG_ARC_NOFILL); } if ($bModeCorde && ($couleur_de_fond!=IMG_COLOR_TRANSPARENT)) { if ( ( ( deg2rad($nAlpha) >= 270 ) && (deg2rad($nAlpha) < 360 ) ) || ( ( deg2rad($nAlpha) >= 0 ) && (deg2rad($nAlpha) < 90 ) ) ) $nVraiX3 = $xCentre + $nRayonLargeur * cos(deg2rad($nAlpha)); else $nVraiX3 = $xCentre - $nRayonLargeur * cos(deg2rad($nAlpha)); if ( ( deg2rad($nAlpha) >= 0 ) && (deg2rad($nAlpha) < 180 ) ) $nVraiY3 = $yCentre + $nRayonHauteur * sin(deg2rad($nAlpha)); else $nVraiY3 = $yCentre - $nRayonHauteur * sin(deg2rad($nAlpha)); if ( ( ( deg2rad($nBeta) >= 270 ) && (deg2rad($nBeta) < 360 ) ) || ( ( deg2rad($nBeta) >= 0 ) && (deg2rad($nBeta) < 90 ) ) ) $nVraiX4 = $xCentre + $nRayonLargeur * cos(deg2rad($nBeta)); else $nVraiX4 = $xCentre - $nRayonLargeur * cos(deg2rad($nBeta)); if ( ( deg2rad($nBeta) >= 0 ) && (deg2rad($nBeta) < 180 ) ) $nVraiY4 = $yCentre + $nRayonHauteur * sin(deg2rad($nBeta)); else $nVraiY4 = $yCentre - $nRayonHauteur * sin(deg2rad($nBeta)); $ang = $nAlpha + (($nBeta-$nAlpha)/2); if ( ($nAlpha>$ang) && ($nBeta<$ang) ) $ang = ($ang%360)+180; if ( ( ( deg2rad($ang) >= 270 ) && (deg2rad($ang) < 360 ) ) || ( ( deg2rad($ang) >= 0 ) && (deg2rad($ang) < 90 ) ) ) $nAngleMedian_X = $xCentre + $nRayonLargeur * cos(deg2rad($ang)); else $nAngleMedian_X = $xCentre - $nRayonLargeur * cos(deg2rad($ang)); if ( ( deg2rad($ang) >= 0 ) && (deg2rad($ang) < 180 ) ) $nAngleMedian_Y = $yCentre + $nRayonHauteur * sin(deg2rad($ang)); else $nAngleMedian_Y = $yCentre - $nRayonHauteur * sin(deg2rad($ang)); $posX = ($nVraiX3 + $nVraiX4 + $nAngleMedian_X)/3; $posY = ($nVraiY3 + $nVraiY4 + $nAngleMedian_Y)/3; $posX = floor($posX); $posY = floor($posY); if (!$this->F9f31211e()) { $bResultat = $bResultat &&imagefilltoborder( $this->m_image, $posX, $posY, $couleur_des_traits, $couleur_de_fond ); return $bResultat; } $copy = imagecreatetruecolor($this->m_nLargeur,$this->m_nHauteur); if ($this->F0b8659df()) { imagesavealpha($copy, true); imagealphablending($copy, false); } imagecopy($copy,$this->m_image,0,0,0,0,$this->m_nLargeur,$this->m_nHauteur); $copy1 = imagecreatetruecolor($this->m_nLargeur,$this->m_nHauteur); if ($this->F0b8659df()) { imagesavealpha($copy1, true); imagealphablending($copy1, false); } imagecopy($copy1,$this->m_image,0,0,0,0,$this->m_nLargeur,$this->m_nHauteur); $nCouleurDesTraits = ($couleur_des_traits==IMG_COLOR_STYLEDBRUSHED) ? $this->m_nStyleCouleur : $couleur_des_traits; $nCouleurDeFond = ($couleur_de_fond==IMG_COLOR_TILED) ? $this->m_nFondCouleur : $couleur_de_fond; $bResultat = $bResultat &&imagefilltoborder( $copy1, $posX, $posY, $nCouleurDesTraits, $nCouleurDeFond ); unset($couleur_de_fond); $this->Ff3f10c0c($couleur_de_fond); $this->F2375b0db($posX,$posY,$couleur_de_fond); for($i=0; $i<$this->m_nLargeur; $i++) for($j=0; $j<$this->m_nHauteur; $j++) { if ( imagecolorat($copy,$i,$j) == imagecolorat($copy1,$i,$j) ) { imagesetpixel($this->m_image,$i,$j,imagecolorat($copy,$i,$j)); } } imagedestroy($copy); imagedestroy($copy1); } return $bResultat; } function dArc($x1,$y1,$x2,$y2,$x3,$y3,$x4,$y4, $nCouleurTrait = null ) { $this->F8abfc681($nCouleurTrait); return $this->Feafd537d($x1,$y1,$x2,$y2,$x3,$y3,$x4,$y4, $nCouleurTrait); } function dCorde($x1,$y1,$x2,$y2,$x3,$y3,$x4,$y4, $nCouleurFond = null,$nCouleurTrait = null ) { $this->F11ec9304($nCouleurTrait,$nCouleurFond); return $this->Feafd537d($x1,$y1,$x2,$y2,$x3,$y3,$x4,$y4, $nCouleurTrait, $nCouleurFond,false,true); } function dPortion($x1,$y1,$x2,$y2,$x3,$y3,$x4,$y4, $nCouleurFond = null, $nCouleurTrait = null) { $this->F11ec9304($nCouleurTrait,$nCouleurFond); return $this->Feafd537d($x1,$y1,$x2,$y2,$x3,$y3,$x4,$y4, $nCouleurTrait, $nCouleurFond,true); } function F9fa19304() { $this->F30829ce1(); if (isset($this->m_sAliasImageParent)) { global $MaPage; if (isset($MaPage->TabChamp[$this->m_sAliasImageParent])) { $pclChamp =& $MaPage->TabChamp[$this->m_sAliasImageParent]; $nCouleurWL = $pclChamp->F4c8b7365(); } } else { $nCouleurWL = wlCouleurDefaut; } imagefill($this->m_image,0,0,Fb121f882($nCouleurWL)); return true; } function Fd2ea6e89($bEtat = true) { $this->m_bAvecOpacite = $bEtat; imagesavealpha($this->m_image,$bEtat); imagealphablending($this->m_image,!$bEtat); $this->m_nCouleurTransparente = IMG_COLOR_TRANSPARENT; if (!$bEtat) { $this->m_nFondOpacite = gdAlphaDefaut; $this->m_nStyleOpacite = gdAlphaDefaut; } } function F327ae7ad($bEtat = true) { $this->m_bAvecQuadrillage = $bEtat; return $this->Fd2ea6e89($bEtat); } function F1c45c627() { $this->F327ae7ad(false); } function dCopieImage(&$ImageSource, &$ImageDestination, $nModeCopie = copieSrcCopie, $nXImgSrc = null, $nYImgSrc = null, $nHauteurSrc = null, $nLargeurSrc = null, $nXImgDest = null, $nYImgDest = null, $nHauteurImgDest = null, $nLargeurImgDest = null) { if (!isset($nXImgDest)) $nXImgDest = 0; if (!isset($nYImgDest)) $nYImgDest = 0; if (!isset($nXImgSrc)) $nXImgSrc = 0; if (!isset($nYImgSrc)) $nYImgSrc = 0; if (!isset($nLargeurSrc)) $nLargeurSrc = $ImageSource->m_nLargeur; if (!isset($nHauteurSrc)) $nHauteurSrc = $ImageSource->m_nHauteur; switch ($nModeCopie) { case copieImage : return imagecopymerge($ImageDestination->m_image,$ImageSource->m_image,$nYImgDest,$nYImgDest,$nXImgSrc,$nYImgSrc,$nLargeurSrc,$nHauteurSrc,100); break; case copieFusionCopie : return $this->dCopieImage($ImageSource,$ImageDestination,copieImage); break; case copieFusionPeint : if (!isset($ImageDestination->m_imageTexture)) { F853b7085(FMK_ChaineConstruit(F1ac3f040("ERR_DESSIN"),F1ac3f040("FCT_DCOPIEIMAGE")),errMessageSysteme); return false; } $nLargeur = min($ImageSource->m_nLargeur,$ImageDestination->m_nLargeur); $nHauteur = min($ImageSource->m_nHauteur,$ImageDestination->m_nHauteur); for ($i=0; $i<$nLargeur; $i++) { for ($j=0; $j<$nHauteur; $j++) { $nCouleurSource = imagecolorat($ImageSource->m_image ,$i,$j); $nCouleurDestination = imagecolorat($ImageDestination->m_imageTexture ,$i,$j); $nAnd = ( $nCouleurSource and $nCouleurDestination ); imagesetpixel($ImageDestination->m_image,$i,$j,$nAnd); } } return true; break; case copiePatCopie : if (!isset($ImageSource->m_imageTexture)) { F853b7085(FMK_ChaineConstruit(F1ac3f040("ERR_DESSIN"),F1ac3f040("FCT_DCOPIEIMAGE")),errMessageSysteme); return false; } return imagecopy($ImageDestination->m_image,$ImageSource->m_imageTexture,0,0,0,0,$ImageSource->m_nLargeur,$ImageSource->m_nHauteur); break; case copiePatInverse : if ( (!isset($ImageSource->m_imageTexture)) || (!isset($ImageDestination->m_imageTexture)) ) { F853b7085(FMK_ChaineConstruit(F1ac3f040("ERR_DESSIN"),F1ac3f040("FCT_DCOPIEIMAGE")),errMessageSysteme); return false; } $nLargeur = min($ImageSource->m_nLargeur,$ImageDestination->m_nLargeur); $nHauteur = min($ImageSource->m_nHauteur,$ImageDestination->m_nHauteur); for ($i=0; $i<$nLargeur; $i++) { for ($j=0; $j<$nHauteur; $j++) { $nCouleurSource = imagecolorat($ImageSource->m_imageTexture ,$i,$j); $nCouleurDestination = imagecolorat($ImageDestination->m_imageTexture ,$i,$j); $nXor = ( $nCouleurSource ^ $nCouleurDestination ); imagesetpixel($ImageDestination->m_image,$i,$j,$nXor); } } return true; break; case copiePatPeint : if (!isset($ImageDestination->m_imageTexture)) { F853b7085(FMK_ChaineConstruit(F1ac3f040("ERR_DESSIN"),F1ac3f040("FCT_DCOPIEIMAGE")),errMessageSysteme); return false; } $nLargeur = min($ImageSource->m_nLargeur,$ImageDestination->m_nLargeur); $nHauteur = min($ImageSource->m_nHauteur,$ImageDestination->m_nHauteur); for ($i=0; $i<$nLargeur; $i++) { for ($j=0; $j<$nHauteur; $j++) { $nCouleurSource = imagecolorat($ImageSource->m_image ,$i,$j); $nCouleurSource = $this->F35c8b3aa(F6676bda4($nCouleurSource),true,$ImageSource->m_image); $nCouleurDestination = imagecolorat($ImageDestination->m_imageTexture ,$i,$j); $nXor = ( $nCouleurSource or $nCouleurDestination ); imagesetpixel($ImageDestination->m_image,$i,$j,$nXor); } } return true; break; case copiePasSrcCopie : return $ImageSource->dInverseCouleur(); break; case copiePasSrcEfface : return $this->dCopieImage($ImageSource,$ImageDestination,copieSrcPeint) && $ImageDestination->dInverseCouleur(); break; case copieSrcEfface : return $this->dCopieImage($ImageDestination,$ImageDestination,copiePasSrcCopie) && $this->dCopieImage($ImageSource,$ImageDestination,copieFusionCopie); break; case copieSrcEt : $nLargeur = min($ImageSource->m_nLargeur,$ImageDestination->m_nLargeur); $nHauteur = min($ImageSource->m_nHauteur,$ImageDestination->m_nHauteur); for ($i=0; $i<$nLargeur; $i++) { for ($j=0; $j<$nHauteur; $j++) { $nCouleurSource = imagecolorat($ImageSource->m_image ,$i,$j); $nCouleurDestination = imagecolorat($ImageDestination->m_image ,$i,$j); $nXor = ( $nCouleurSource and $nCouleurDestination ); imagesetpixel($ImageDestination->m_image,$i,$j,$nXor); } } return true; break; case copieSrcInverse : $nLargeur = min($ImageSource->m_nLargeur,$ImageDestination->m_nLargeur); $nHauteur = min($ImageSource->m_nHauteur,$ImageDestination->m_nHauteur); for ($i=0; $i<$nLargeur; $i++) { for ($j=0; $j<$nHauteur; $j++) { $nCouleurSource = imagecolorat($ImageSource->m_image ,$i,$j); $nCouleurDestination = imagecolorat($ImageDestination->m_image ,$i,$j); $nXor = ( $nCouleurSource ^ $nCouleurDestination ); imagesetpixel($ImageDestination->m_image,$i,$j,$nXor); } } return true; break; case copieSrcPeint : $nLargeur = min($ImageSource->m_nLargeur,$ImageDestination->m_nLargeur); $nHauteur = min($ImageSource->m_nHauteur,$ImageDestination->m_nHauteur); for ($i=0; $i<$nLargeur; $i++) { for ($j=0; $j<$nHauteur; $j++) { $nCouleurSource = imagecolorat($ImageSource->m_image ,$i,$j); $nCouleurDestination = imagecolorat($ImageDestination->m_image ,$i,$j); $nOr = ( $nCouleurSource or $nCouleurDestination ); imagesetpixel($ImageDestination->m_image,$i,$j,$nOr); } } return true; break; case copieToutBlanc : $ImageDestination->F30829ce1(); return imagefill($ImageDestination->m_image,0,0,imagecolorallocate($ImageDestination->m_image,255,255,255)); break; case copieToutNoir : $ImageDestination->F30829ce1(); return true; break; case copieDstInverse : return $this->dCopieImage($ImageDestination,$ImageSource,copiePasSrcCopie); break; case copieSrcCopie : if (!isset($nLargeurImgDest)) $nLargeurImgDest = $ImageDestination->m_nLargeur; if (!isset($nHauteurImgDest)) $nHauteurImgDest = $ImageDestination->m_nHauteur; $bRetour = imagecopyresampled( $ImageDestination->m_image, $ImageSource->m_image, $nXImgDest, $nYImgDest, $nXImgSrc, $nYImgSrc, $nLargeurImgDest, $nHauteurImgDest, $nLargeurSrc, $nHauteurSrc); return $bRetour; } return false; } function dFinDessin() { $this->m_bFinDessin = true; if ($this->F19164dfa()) $this->Fc421bd92(); F418548d8(false); return true; } function F2375b0db($x, $y, $nCouleur, $nCouleurArrierePlan = null) { $copy = imagecreatetruecolor($this->m_nLargeur,$this->m_nHauteur); imagecopy($copy,$this->m_image,0,0,0,0,$this->m_nLargeur,$this->m_nHauteur); if (!isset($nCouleurArrierePlan)) $nCouleurArrierePlan = imagecolorat($copy,$x,$y); $nCouleurNoir = ($nCouleur==imagecolorallocate($copy,0,0,1)) ? imagecolorallocate($copy,0,1,0) : imagecolorallocate($copy,0,0,1); if ($nCouleur != IMG_COLOR_TILED) { for($i=0; $i<$this->m_nLargeur; $i++) for($j=0; $j<$this->m_nHauteur; $j++) { if (imagecolorat($copy,$i,$j) != $nCouleurArrierePlan) { imagesetpixel($copy,$i,$j,$nCouleurNoir); } } imagefilltoborder($copy,$x,$y,$nCouleurNoir,$nCouleur); for($i=0; $i<$this->m_nLargeur; $i++) for($j=0; $j<$this->m_nHauteur; $j++) { if (imagecolorat($copy,$i,$j) == $nCouleur) imagesetpixel($this->m_image,$i,$j,$nCouleur); } } else { $nCouleurUnie = $this->m_nFondCouleur; $copy2 = imagecreatetruecolor($this->m_nLargeur,$this->m_nHauteur); imagecopy($copy2,$this->m_image,0,0,0,0,$this->m_nLargeur,$this->m_nHauteur); imagefilledrectangle($this->m_image,0,0,$this->m_nLargeur,$this->m_nHauteur,$nCouleur); for($i=0; $i<$this->m_nLargeur; $i++) for($j=0; $j<$this->m_nHauteur; $j++) { if (imagecolorat($copy,$i,$j) != $nCouleurArrierePlan) { imagesetpixel($copy,$i,$j,$nCouleurNoir); } } imagefilltoborder($copy,$x,$y,$nCouleurNoir,$nCouleurUnie); for($i=0; $i<$this->m_nLargeur; $i++) for($j=0; $j<$this->m_nHauteur; $j++) { if (imagecolorat($copy,$i,$j) != $nCouleurUnie) imagesetpixel($this->m_image,$i,$j,imagecolorat($copy2,$i,$j)); } imagedestroy($copy2); } imagedestroy($copy); } function dRemplissage($x,$y,$nCouleurRemplissage = null,$nCouleur_aux_limites = null) { if (isset($nCouleur_aux_limites)) $nCL = $nCouleur_aux_limites = ($nCouleur_aux_limites==0) ? 1 : $nCouleur_aux_limites; $this->F11ec9304($nCouleur_aux_limites,$nCouleurRemplissage); if (!isset($nCL)) { $this->F2375b0db($x,$y,$nCouleurRemplissage); } if ($nCouleurRemplissage == IMG_COLOR_TRANSPARENT) { $nCouleurRemplissage= !$this->m_bAvecOpacite ? gdCouleurDéfaut : imagecolorallocatealpha($this->m_image,0,0,0,127); } if ($nCouleur_aux_limites == IMG_COLOR_TRANSPARENT) { return imagefill($this->m_image,$x,$y,$nCouleurRemplissage); } return imagefilltoborder( $this->m_image, $x, $y, $nCouleur_aux_limites, $nCouleurRemplissage ); } function dStylo( $nCouleur, $styleTrait = null, $nLargeurTrait = null, $nOpacite = null) { if ($styleTrait === null) $styleTrait = gdStyleTraitDéfaut; if ($nLargeurTrait === null) $nLargeurTrait = gdLargeurTraitDéfaut; if ($nOpacite === null) $nOpacite = wlOpaciteDefaut; if ( (($nOpacite>wlOpaciteMax)&&($nOpacite<wlOpaciteMin)) || (!is_numeric($styleTrait)) || (!is_numeric($nLargeurTrait)) ) { F853b7085(FMK_ChaineConstruit(F1ac3f040("ERR_PARAMETRE_VALEUR_INCORRECT"),F1ac3f040("FCT_DSTYLO"))); return false; } $this->m_nStyleCouleur = Fb121f882( ( ($nCouleur==0) ) ? 1 : $nCouleur ); $this->m_nStyleLargeurTrait = $nLargeurTrait; $this->m_nStyleOpacite = F9b65f3c4($nOpacite,CouleurFormatWL); $this->m_nStyleTrait = ($this->m_nStyleLargeurTrait > gdLargeurTraitDéfaut) ? gdStyleTraitPlein : $styleTrait; $nCouleur = $this->F35c8b3aa(F967399ea($this->m_nStyleCouleur,$this->m_nStyleOpacite)); $tabStyle = $this->F3fe82231($this->m_nStyleTrait,$nCouleur); if (imagesetstyle($this->m_image, $tabStyle)) { if (isset($this->m_imageBrosse)) { F6b1e3687(); imagedestroy($this->m_imageBrosse); F1e7b0563(); } $this->m_imageBrosse = imagecreatetruecolor($this->m_nStyleLargeurTrait,$this->m_nStyleLargeurTrait); $nCouleur2 = imagecolorallocatealpha($this->m_imageBrosse,Fadb05a7c($this->m_nStyleCouleur),F88bb47e1($this->m_nStyleCouleur),F72d1dde6($this->m_nStyleCouleur),F9b65f3c4($nOpacite)); imagefilledrectangle($this->m_imageBrosse,0,0,$this->m_nStyleLargeurTrait,$this->m_nStyleLargeurTrait,imagecolorallocate($this->m_imageBrosse,255,255,255)); imagefilledrectangle($this->m_imageBrosse,0,0,$this->m_nStyleLargeurTrait,$this->m_nStyleLargeurTrait,$nCouleur2); $tabStyle = $this->F3fe82231($this->m_nStyleTrait,$nCouleur2,IMG_COLOR_TRANSPARENT); imagecolortransparent($this->m_imageBrosse,gdCouleurDéfaut); imagesetstyle($this->m_imageBrosse, $tabStyle); imagesetbrush($this->m_image, $this->m_imageBrosse); $this->m_bStyleDefini = true; $clContexte =& FMK_Contexte(); $clContexte->F4c8f9bd4('STREAMIMAGE_'.$this->F8ddf8952().'_BROSSE',Ff6520165($this->m_imageBrosse)); return true; } { $this->m_bStyleDefini = false; F853b7085(FMK_ChaineConstruit(F1ac3f040("ERR_PARAMETRE_VALEUR_INCORRECT"),F1ac3f040("FCT_DSTYLO"))); return false; } } function dRedimensionne($nNouvelleLargeur, $nNouvelleHauteur) { $tmp = imagecreatetruecolor($nNouvelleLargeur,$nNouvelleHauteur); if ($this->F0b8659df()) { imagesavealpha($tmp, true); imagealphablending($tmp, false); imagefill($tmp,0,0,imagecolorallocatealpha($tmp,0,0,0,127)); } if (!imagecopyresampled($tmp,$this->m_image,0,0,0,0,$nNouvelleLargeur,$nNouvelleHauteur,imagesx($this->m_image),imagesy($this->m_image))) return false; $this->Fb869595d($tmp); $this->F30829ce1(); imagecopy($this->m_image,$tmp,0,0,0,0,$nNouvelleLargeur,$nNouvelleHauteur); imagedestroy($tmp); return true; } function dRotation($nAngle) { if (!function_exists("imagerotate")) { F853b7085("function imagerotate does not exist",errMessageSysteme); return false; } $nCouleurFond = $this->F35c8b3aa(gdCouleurDéfaut,true); $imgBufferRotation = imagecreatetruecolor($this->m_nLargeur,$this->m_nHauteur); if ($this->F0b8659df()) { imagesavealpha($imgBufferRotation, true); imagealphablending($imgBufferRotation, false); } imagecopy($imgBufferRotation,$this->m_image,0,0,0,0,$this->m_nLargeur,$this->m_nHauteur); $imgBufferRotation = imagerotate($this->m_image,$nAngle,$nCouleurFond); $this->F30829ce1(); $this->dRemplissage(0,0,$nCouleurFond,Transparent); $nCentreX = floor(imagesx($this->m_image) / 2); $nCentreY = floor(imagesy($this->m_image) / 2); $nNouveauCentreX = floor(imagesx($imgBufferRotation) / 2); $nNouveauCentreY = floor(imagesy($imgBufferRotation) / 2); $nSrcX = ($nCentreX < $nNouveauCentreX) ? ($nNouveauCentreX-$nCentreX) : 0; $nSrcY = ($nCentreY < $nNouveauCentreY) ? ($nNouveauCentreY-$nCentreY) : 0; $nDstX = ($nCentreX > $nNouveauCentreX) ? ($nCentreX-$nNouveauCentreX) : 0; $nDstY = ($nCentreY > $nNouveauCentreY) ? ($nCentreY-$nNouveauCentreY) : 0; imagecopyresampled($this->m_image,$imgBufferRotation,$nDstX,$nDstY,$nSrcX,$nSrcY,2*$nCentreX,2*$nCentreY,2*$nCentreX,2*$nCentreY); return true; } function dInverseCouleur() { if (function_exists("imagefilter")) return imagefilter($this->m_image,IMG_FILTER_NEGATE); else { $tabCoulInv = array(); for ($i=0; $i<$this->m_nLargeur; $i++) { for ($j=0;$j<$this->m_nHauteur;$j++) { $nCouleurOrigine = imagecolorat($this->m_image,$i,$j); if (!isset($tabCoulInv[$nCouleurOrigine])) { $tabCoulInv[$nCouleurOrigine] = $this->F35c8b3aa(F6676bda4($nCouleurOrigine)); } imagesetpixel($this->m_image,$i,$j,$tabCoulInv[$nCouleurOrigine]); } } return true; } } function dModifieTSL($nModifTeinte,$nModifSaturation,$nModifLuminosite,&$ImageDest) { if (!isset($ImageDest)) $ImageDest = $this; $nModifTeinte=(int)($nModifTeinte%360); $nModifSaturation=(int)(255*($nModifSaturation%101)/100.0); $nModifLuminosite=(int)(255*($nModifLuminosite%101)/100.0); for ($i=0; $i<$this->m_nLargeur; $i++) { for ($j=0;$j<$this->m_nHauteur;$j++) { $nCouleurOrigine = imagecolorat($this->m_image,$i,$j); $nCouleurWL = F91b14b72($nCouleurOrigine); $nTeinte = 0; $nSaturation = 0; $nLuminosite = 0; F043b1c5e($nCouleurWL,$nTeinte,$nLuminosite,$nSaturation); $nTeinte += $nModifTeinte; $nTeinte=$nTeinte%360; $nSaturation = max(0,min(255,($nSaturation + $nModifSaturation))); $nCouleurWL = F5e769b88($nTeinte,$nLuminosite,$nSaturation); if($nModifLuminosite!=0) { $nCouleurWL = F4f6e8051( 0xFF & max(0,min(255,(int)( ($nCouleurWL & 0xFF) + $nModifLuminosite))), 0xFF & max(0,min(255,(int)( (($nCouleurWL>>8) & 0xFF) + $nModifLuminosite))), 0xFF & max(0,min(255,(int)( (($nCouleurWL>>16) & 0xFF) + $nModifLuminosite))) ); } $ImageDest->dPoint($i,$j,$nCouleurWL); } } return true; } function dChangeMode($nNouveauMode) { switch ($nNouveauMode) { case dessinAntiAliasing: $this->m_nModeCourant = $nNouveauMode; return true; case dessinNormal : default: $this->m_nModeCourant = $nNouveauMode; return true; } return false; } function Ff78b2e53($nY1,$nY2) { if ( ($nY2<=$this->m_nHauteur) && ($nY1<=$this->m_nHauteur)) { F6b1e3687(); for ($i=0;$i<$this->m_nLargeur;$i++) { $c1 = imagecolorat($this->m_image,$i,$nY1); $c2 = imagecolorat($this->m_image,$i,$nY2); imagesetpixel($this->m_image,$i,$nY1,$c2); imagesetpixel($this->m_image,$i,$nY2,$c1); } F1e7b0563(); } } function Fa8153655($nX1,$nX2) { if ( ($nX2<=$this->m_nLargeur) && ($nX1<=$this->m_nLargeur)) { F6b1e3687(); for ($i=0;$i<$this->m_nHauteur;$i++) { $c1 = imagecolorat($this->m_image,$nX1,$i); $c2 = imagecolorat($this->m_image,$nX2,$i); imagesetpixel($this->m_image,$nX1,$i,$c2); imagesetpixel($this->m_image,$nX2,$i,$c1); } F1e7b0563(); } } function dSymetrieHorizontale() { for ($i=0; $i<($this->m_nHauteur-$i);$i++) { $this->Ff78b2e53($i,$this->m_nHauteur-$i-1); } return true; } function dSymetrieVerticale() { for ($i=0; $i<($this->m_nLargeur-$i);$i++) { $this->Fa8153655($i,$this->m_nLargeur-$i-1); } return true; } function dPolice($sNomPolice, $nTaille = null, $nAttributs = null, $nInclinaison = null) { if (!isset($nTaille)) $nTaille = gdFontTailleApresdPoliceDéfaut; if (!isset($nAttributs)) $nAttributs = iNormal; if (!isset($nInclinaison)) $nInclinaison = gdFontInclinaisonDéfaut; $sExtensionPolice = GD_FONT_EXTENSION; $sNom = utf8_strtoupper($sNomPolice); $tabPolices = utf8_explode(',',$sNom); $clContexte =& FMK_Contexte(); $bPoliceTrouvee = $clContexte->F239ddeda('PoliceDejaRecherchee' . $sNomPolice . $nAttributs); $bPoliceTrouvee = isset($bPoliceTrouvee) && ($bPoliceTrouvee===true); $tabCheminsPossibles = array('.','..'); if ($bPoliceTrouvee !== true ) { $tabPoliceMajSelonAttributs = array(); $iPolice = -1; while(isset($tabPolices[++$iPolice])) { $sNomPolice = utf8_trim($tabPolices[$iPolice]); if (F61bc61eb($sNomPolice,"'") && F0728da76($sNomPolice,"'")) { $sNomPolice = substr($sNomPolice,1,strlen($sNomPolice)-1); } if ($nAttributs === iNormal) { $tabPoliceMajSelonAttributs[] = $sNomPolice; } else { $sNomPolice=$tabPolices[$iPolice]; if ($nAttributs & iItalique) $sNomPolice.= "_ITALIC"; if ($nAttributs & iGras) $sNomPolice.= "_BOLD"; $tabPoliceMajSelonAttributs[] = $sNomPolice; $sNomPolice=$tabPolices[$iPolice]; if ($nAttributs & iGras) $sNomPolice.= "_BOLD"; if ($nAttributs & iItalique) $sNomPolice.= "_ITALIC"; $tabPoliceMajSelonAttributs[] = $sNomPolice; $sNomPolice=$tabPolices[$iPolice]; if ($nAttributs & iGras) $sNomPolice.= "B"; if ($nAttributs & iItalique) $sNomPolice.= "I"; $tabPoliceMajSelonAttributs[] = $sNomPolice; $sNomPolice=$tabPolices[$iPolice]; if (Fdef56c7f($nAttributs,iGras) && F5f7235e7($nAttributs,iItalique)) $sNomPolice.= "BD"; if (F5f7235e7($nAttributs,iGras)&& Fdef56c7f($nAttributs,iItalique)) $sNomPolice.= "I"; if (Fdef56c7f($nAttributs,iGras) && Fdef56c7f($nAttributs,iItalique)) $sNomPolice.= "BI"; $tabPoliceMajSelonAttributs[] = $sNomPolice; $sNomPolice=$tabPolices[$iPolice]; if (Fdef56c7f($nAttributs,iGras) && F5f7235e7($nAttributs,iItalique)) $sNomPolice.= "-BOLD"; if (F5f7235e7($nAttributs,iGras)&& Fdef56c7f($nAttributs,iItalique)) $sNomPolice.= "-OBLIQUE"; if (Fdef56c7f($nAttributs,iGras) && Fdef56c7f($nAttributs,iItalique)) $sNomPolice.= "-BOLDOBLIQUE"; $tabPoliceMajSelonAttributs[] = $sNomPolice; } } $tabPoliceMajSelonAttributs = array_unique($tabPoliceMajSelonAttributs); $i=0; $bPoliceTrouvee = false; $bDossierFontSystemDejaInclus = false; $bChercherEtRecopier = false; $sCheminReelDefaut = F0ac3fb91(F8df7b692(realpath($tabCheminsPossibles[0]))); do { $sChemin = $tabCheminsPossibles[$i++]; $sCheminReel = F8df7b692(realpath($sChemin)); $sCheminReel = F0ac3fb91($sCheminReel); $handle = opendir(F9486bf1a($sCheminReel)); $bPoliceTrouvee = false; while (false !== ($file = readdir($handle))) { $file = F8df7b692($file); if (Fda9fdf77(F7816de1e($file,fExtension),$sExtensionPolice,ccSansCasse)==0) { if (in_array(utf8_strtoupper(F7816de1e($file,fFichier)),$tabPoliceMajSelonAttributs) ) { $sCheminOrigine = $sCheminReel.$file; $sCheminOrigineMajuscule = $sCheminReel.utf8_strtoupper($file); $sCheminRenomme = utf8_str_replace(utf8_strtoupper($sExtensionPolice),$sExtensionPolice,$sCheminReelDefaut.utf8_strtoupper($file)); $sCheminFinal = $sCheminOrigine; F6b1e3687(); if ((strcmp($sCheminOrigine , $sCheminRenomme ) !== 0)) { if ($bChercherEtRecopier) { if (copy(F9486bf1a($sCheminOrigine),F9486bf1a($sCheminRenomme))) $sCheminFinal = $sCheminRenomme; } elseif (GD_FONT_TOUT_EN_MAJUSCULE) { if (rename(F9486bf1a($sCheminOrigine),F9486bf1a($sCheminOrigineMajuscule))) $sCheminFinal = $sCheminRenomme; } } F1e7b0563(); $bPoliceTrouvee = true; $clContexte->F4c8f9bd4('PoliceDejaRecherchee'.$sNomPolice.$nAttributs,$sCheminFinal); break; } } } closedir($handle); if ($i===count($tabCheminsPossibles) && !$bPoliceTrouvee) { if (GD_FONT_AUTORISE_RECOPIE_DEPUIS_FONTS_SYSTEMES && !$bDossierFontSystemDejaInclus) { $sDossierFonts = F0ac3fb91(isset($_SERVER['SystemRoot']) ? $_SERVER['SystemRoot'] : (isset($_SERVER['WINDIR']) ? $_SERVER['WINDIR'] : (dirname(utf8_substr($_SERVER['PATH'],0,utf8_strpos($_SERVER['PATH'],';')))))) . 'Fonts'; if (is_dir($sDossierFonts)) { $tabCheminsPossibles[] = F8df7b692($sDossierFonts); $bDossierFontSystemDejaInclus = true; $bChercherEtRecopier = true; } } } } while ( (!$bPoliceTrouvee) && ($i<count($tabCheminsPossibles)) ); } $this->m_sFontFichier = null; $this->m_nFontTaille = $nTaille; $this->m_nFontAttributs = $nAttributs; $this->m_nFontInclinaison = $nInclinaison; if ($bPoliceTrouvee) { $this->m_sFontFichier = $clContexte->F239ddeda('PoliceDejaRecherchee'.$sNomPolice.$nAttributs); return true; } else { if (GD_FONT_AUTORISE_POLICES_DISTRIBUEES) { if (in_array('SANS-SERIF',$tabPolices)) { $sNomPolice = 'DejaVuSans'; } elseif (in_array('SERIF',$tabPolices)) { $sNomPolice = 'DejaVuSerif'; } elseif (in_array('MONO',$tabPolices)) { $sNomPolice = 'DejaVuSansMono'; } else { Fa19d34ae(); F853b7085(FMK_ChaineConstruit('ERR_GD_FONT_INDISPONIBLE',$sNomPolice)); $sNomPolice = 'DejaVuSans'; } $sNomPoliceSansAttribut = $sNomPolice; $clChargeur =& FMK_Chargeur(); $sCheminReel = F0ac3fb91(realpath(F9486bf1a($clChargeur->Fd0ef2564()))); if (Fdef56c7f($nAttributs,iGras) && F5f7235e7($nAttributs,iItalique)) $sNomPolice.= "-Bold"; if (F5f7235e7($nAttributs,iGras)&& Fdef56c7f($nAttributs,iItalique)) $sNomPolice.= "-Oblique"; if (Fdef56c7f($nAttributs,iGras) && Fdef56c7f($nAttributs,iItalique)) $sNomPolice.= "-BoldOblique"; if (file_exists($sCheminReel.$sNomPolice.$sExtensionPolice)) { $this->m_sFontFichier = $sCheminReel.$sNomPolice.$sExtensionPolice; return true; } else { $sNomPolice = $sNomPoliceSansAttribut; if (Fdef56c7f($nAttributs,iGras) && F5f7235e7($nAttributs,iItalique)) $sNomPolice.= "-Bold"; if (F5f7235e7($nAttributs,iGras)&& Fdef56c7f($nAttributs,iItalique)) $sNomPolice.= "-Italic"; if (Fdef56c7f($nAttributs,iGras) && Fdef56c7f($nAttributs,iItalique)) $sNomPolice.= "-BoldItalic"; if (file_exists($sCheminReel.$sNomPolice.$sExtensionPolice)) { $this->m_sFontFichier = $sCheminReel.$sNomPolice.$sExtensionPolice; return true; } else { } } } } if (!F572d2e3e()) { Fa19d34ae(); F853b7085(FMK_ChaineConstruit('ERR_GD_FONT_INDISPONIBLE',$sNomPolice)); } return false; } function F3c6482ea($sTexte,&$nLargeur,&$nHauteur,$bTenirCompteInclinaison=true) { if (!isset($this->m_sFontFichier) || (empty($this->m_sFontFichier))) { $nLargeur = imagefontwidth(GD_FONT_DEFAUT)*utf8_strlen($sTexte); $nHauteur = imagefontheight(GD_FONT_DEFAUT); $retour = array(0,$nHauteur,$nLargeur,$nHauteur,$nLargeur,0,0,0); } else { $nInclinaison = (($bTenirCompteInclinaison) ? $this->m_nFontInclinaison : 0); F6b1e3687(); $retour = imagettfbbox ( $this->m_nFontTaille,$nInclinaison, $this->m_sFontFichier , $sTexte); if ($retour===false) { if (!ini_get("safe_mode")) putenv('GDFONTPATH=' . realpath('..') . ';' . realpath('..') ); $this->m_sFontFichier = basename($this->m_sFontFichier); $retour = imagettfbbox ( $this->m_nFontTaille, $nInclinaison , $this->m_sFontFichier , $sTexte); if ($retour===false) { F1e7b0563(); return false; } } F1e7b0563(); $nLargeur = abs($retour[6]-$retour[4]); $nHauteur = abs($retour[5]-$retour[3]); } return $retour; } function dTexte ($nAbscisse, $nOrdonnee, $sTexte, $nCouleur = null, $bGestionDuEt = null) { $this->F8abfc681($nCouleur,false,false,true); if (!isset($bGestionDuEt)) $bGestionDuEt = gdFontEtCommercialInterpretation; $nLargeurTexte = $nHauteurTexte = 0; $this->F3c6482ea($sTexte,$nLargeurTexte,$nHauteurTexte); if ($nLargeurTexte===0 || $nHauteurTexte===0) { F3ccdac86(FMK_ChaineConstruit(F1ac3f040("ERR_DESSIN"),F1ac3f040("FCT_DTEXTE"))); return false; } $nAbcisseCentree = $nOrdoneeCentree = 0; if ($nAbscisse === auMilieu) { $center = ceil($this->m_nLargeur / 2); $nAbcisseCentree = $center - (ceil($nLargeurTexte/2)); } if ($nOrdonnee === auCentre) { $center = ceil($this->m_nHauteur / 2); $nOrdoneeCentree = $center - (ceil($nHauteurTexte/2)); } if (!isset($this->m_sFontFichier) || (empty($this->m_sFontFichier))) { if ($nAbscisse === auMilieu) $nAbscisse = $nAbcisseCentree; if ($nOrdonnee === auCentre) $nOrdonnee = $nOrdoneeCentree; imagestring($this->m_image,GD_FONT_DEFAUT,$nAbscisse,$nOrdonnee,$sTexte,$nCouleur); return true; } $bAlphaForce = false; if ($this->F0b8659df()) { imagesavealpha($this->m_image,true); imagealphablending($this->m_image,true); $bAlphaForce = true; } $tabMessages = (!$bGestionDuEt) ? utf8_explode('&',$sTexte) : array($sTexte); $nXDecalage = $nAbcisseCentree; $nYDecalage = $nOrdoneeCentree + $nHauteurTexte; $nLargeurIBarre=$nHauteurIBarre=0; $this->F3c6482ea($sTexte,$nLargeurIBarre,$nHauteurIBarre,false); $j=0; while (isset($tabMessages[$j])) { if (($j>0)&&($tabMessages[$j]!='')) { $tabEtInfos = imagettfbbox($this->m_nFontTaille, $this->m_nFontInclinaison,$this->m_sFontFichier,utf8_substr($tabMessages[$j],0,1)); $xfin = $nAbscisse+$nXDecalage+($tabEtInfos[2]-$tabEtInfos[0]); $yfin = $nOrdonnee+$nYDecalage+($tabEtInfos[3]-$tabEtInfos[1]); imageline($this->m_image,$nAbscisse+$nXDecalage,$nOrdonnee+$nYDecalage,$xfin,$yfin,$nCouleur); } $sTexte = $tabMessages[$j]; imagettftext($this->m_image, $this->m_nFontTaille, $this->m_nFontInclinaison, $nAbscisse+$nXDecalage, $nOrdonnee+$nYDecalage, $nCouleur, $this->m_sFontFichier, $sTexte) ; $tabInfos = imagettfbbox($this->m_nFontTaille, $this->m_nFontInclinaison,$this->m_sFontFichier,$sTexte); $nXDecalage += $tabInfos[2]-$tabInfos[0]; $nYDecalage += $tabInfos[3]-$tabInfos[1]; ++$j; } if ($this->m_nFontAttributs & iSouligné) { imageline($this->m_image,$nAbscisse,$nOrdonnee+$nHauteurTexte,$nAbscisse+$nXDecalage,$nOrdonnee+$nYDecalage,$nCouleur); } if ($this->m_nFontAttributs & iBarre) { $nBarreY = ($nHauteurIBarre/2)*cos(deg2rad($this->m_nFontInclinaison)); $nBarreX = ($nHauteurIBarre/2)*sin(deg2rad($this->m_nFontInclinaison)); imageline( $this->m_image,$nAbscisse-$nBarreX , $nOrdonnee-$nBarreY+$nHauteurTexte, $nAbscisse+$nXDecalage-$nBarreX, $nOrdonnee+$nYDecalage-$nBarreY, $nCouleur ); } if ($bAlphaForce) { imagesavealpha($this->m_image,true); imagealphablending($this->m_image,false); } return true; } function F8ff9c1c7($nTransparence,$nModeAffichage,$nCouleurFond) { switch ($nTransparence) { case 2: $this->Fd2ea6e89(false); $this->m_nCouleurTransparente = imagecolorallocate($this->m_image,0xFF, 0x00, 0xFF); break; case 3: $this->Fd2ea6e89(false); $this->m_nCouleurTransparente = imagecolorat($this->m_image,0,0); break; case 1: default: $this->m_nCouleurTransparente = IMG_COLOR_TRANSPARENT; if ($this->F0b8659df()) { $nCouleurFond = Transparent; } } $this->m_nFondCouleur = Fb121f882($nCouleurFond); if ($this->m_nFondCouleur == IMG_COLOR_TRANSPARENT) { $this->m_nFondCouleur = $this->m_nCouleurTransparente; } $dwMode = $nModeAffichage & 0x0000FFFF; switch($dwMode) { case 1: $this->F2acc0ba7(); break; case 2: $this->F1f938821(); break; case 3: $this->Fb792b160(); break; case 4: $this->Ff6651e27(); break; case 5: $this->F4f2ed543(false, false,false); break; case 6: $this->F4f2ed543(true, false,false); break; case 7: $this->F4f2ed543(false, true,false); break; case 8: $this->F4f2ed543(true, true,false); break; case 9: $this->F4f2ed543(false, false, true); break; case 10: $this->F4f2ed543(true, false, true); break; default: } $this->m_nFondCouleur=null; if ($nTransparence>1) { imagealphablending($this->m_image,true); imagecolortransparent($this->m_image,$this->m_nCouleurTransparente); } } function F2acc0ba7() { $nNouvelleLargeur = $this->m_nLargeur; $nNouvelleHauteur = $this->m_nHauteur; $nNormalLargeur = imagesx($this->m_image); $nNormalHauteur = imagesy($this->m_image); $nMinLargeur = min($nNouvelleLargeur,$nNormalLargeur); $nMinHauteur = min($nNouvelleHauteur,$nNormalHauteur); $tmp = imagecreatetruecolor($nMinLargeur,$nMinHauteur); if ($this->F0b8659df()) { imagesavealpha($tmp, true); imagealphablending($tmp, false); imagefill($tmp,0,0,imagecolorallocatealpha($tmp,0,0,0,127)); } if (!imagecopy($tmp,$this->m_image,0,0,0,0,$nMinLargeur,$nMinHauteur)) return false; $this->F30829ce1(); imagefill($this->m_image,0,0,$this->m_nFondCouleur); imagecopy($this->m_image,$tmp,0,0,0,0,$nMinLargeur,$nMinHauteur); imagedestroy($tmp); return true; } function Ff6651e27() { $nOffsetX = 0; $nOffsetY = 0; $nNormalLargeur = imagesx($this->m_image); $nNormalHauteur = imagesy($this->m_image); $tmp = imagecreatetruecolor($this->m_nLargeur,$this->m_nHauteur); if ($this->F0b8659df()) { imagesavealpha($tmp, true); imagealphablending($tmp, false); imagefill($tmp,0,0,imagecolorallocatealpha($tmp,0,0,0,127)); } while($nOffsetY < $this->m_nHauteur) { $hSRC = min($this->m_nHauteur - $nOffsetY, $nNormalHauteur); $nOffsetX = 0; while($nOffsetX < $this->m_nLargeur) { $wSRC = min($this->m_nLargeur - $nOffsetX, $nNormalLargeur); imagecopy($tmp,$this->m_image,$nOffsetX,$nOffsetY,0,0,$wSRC,$hSRC); $nOffsetX+=$wSRC; } $nOffsetY+=$hSRC; } $this->F30829ce1(); imagefill($this->m_image,0,0,$this->m_nFondCouleur); imagecopy($this->m_image,$tmp,0,0,0,0,$this->m_nLargeur,$this->m_nHauteur); imagedestroy($tmp); return true; } function F1f938821() { $nNouvelleLargeur = $this->m_nLargeur; $nNouvelleHauteur = $this->m_nHauteur; $nNormalLargeur = imagesx($this->m_image); $nNormalHauteur = imagesy($this->m_image); $nMinLargeur = min($nNouvelleLargeur,$nNormalLargeur); $nMinHauteur = min($nNouvelleHauteur,$nNormalHauteur); $dst_x = 0; $dst_y = 0; $offset_x = 0; $offset_y = 0; if ($this->m_nLargeur>$nMinLargeur) { $dst_x = floor( ($this->m_nLargeur-$nMinLargeur)/2 ); } if ($this->m_nLargeur<$nNormalLargeur) { $offset_x = floor( ($nNormalLargeur-$this->m_nLargeur)/2 ); } if ($this->m_nHauteur>$nMinHauteur) { $dst_y = floor( ($this->m_nHauteur-$nMinHauteur)/2 ); } if ($this->m_nHauteur<$nNormalHauteur) { $offset_y = floor( ($nNormalHauteur-$this->m_nHauteur)/2 ); } $tmp = imagecreatetruecolor($nMinLargeur,$nMinHauteur); if ($this->F0b8659df()) { imagesavealpha($tmp, true); imagealphablending($tmp, false); imagefill($tmp,0,0,imagecolorallocatealpha($tmp,0,0,0,127)); } if (!imagecopy($tmp,$this->m_image,0,0,$offset_x,$offset_y,$nMinLargeur,$nMinHauteur)) return false; $this->F30829ce1(); imagefill($this->m_image,0,0,$this->m_nFondCouleur); imagecopy($this->m_image,$tmp,$dst_x,$dst_y,0,0,$nMinLargeur,$nMinHauteur); imagedestroy($tmp); return true; } function Fb792b160() { $this->dRedimensionne($this->m_nLargeur,$this->m_nHauteur); } function F4f2ed543($bCentre,$bEtendu,$bAdapte) { $nWidth = $this->m_nLargeur; $nHeight = $this->m_nHauteur; $nWidthOri = imagesx($this->m_image); $nHeightOri = imagesy($this->m_image); $scaleX = $nWidth / $nWidthOri; $scaleY = $nHeight / $nHeightOri; if($bEtendu) $minScale=( $scaleX < $scaleY ) ? $scaleY : $scaleX; else $minScale=( $scaleX < $scaleY ) ? $scaleX : $scaleY; if($bAdapte&&($minScale>1)) $minScale=1; $nLargeurAffiche=floor($nWidthOri*$minScale); $nHauteurAffiche=floor($nHeightOri*$minScale); $tmp = imagecreatetruecolor($nLargeurAffiche,$nHauteurAffiche); if ($this->F0b8659df()) { imagesavealpha($tmp, true); imagealphablending($tmp, false); imagefill($tmp,0,0,imagecolorallocatealpha($tmp,0,0,0,127)); } if (!imagecopyresampled($tmp,$this->m_image,0,0,0,0,$nLargeurAffiche,$nHauteurAffiche,$nWidthOri,$nHeightOri)) return false; imagedestroy($this->m_image); $this->m_image = $tmp; if ($bCentre) { return $this->F1f938821(); } else { return $this->F2acc0ba7(); } } } $_FMK_Dessin_Image_Gd = null; function F0123f916($sNomFichier) { DebutErreurAttendue(); $tabInfos = getimagesize(F9486bf1a($sNomFichier)); $data = GetMessageErreurAttendue(); FinErreurAttendue(); if ( (!empty($data)) || ($tabInfos === false) ) { F853b7085($data,errMessageSysteme); return "BAD".TAB.TAB.TAB; } $sFormat = ''; $nBitsParPixel = 0; switch ($tabInfos['mime']) { case "image/bmp" : $sFormat = 'BMP'; break; case "image/gif" : $sFormat = 'GIF'; $nBitsParPixel = 8; break; case "image/jpeg" : $sFormat = 'JPG'; break; case "image/png" : $sFormat = 'PNG'; break; case "image/wbmp" : $sFormat = 'BMP'; break; default : return "BAD".TAB.TAB.TAB; } $nLargeur = $tabInfos[0]; $nHauteur = $tabInfos[1]; if (isset($tabInfos['channels'])) $nBitsParPixel = ($tabInfos['bits'] / 8) * $tabInfos['channels']; return $sFormat . TAB . $nLargeur . TAB . $nHauteur . TAB . $nBitsParPixel; } function Ff6520165($image) { ob_start(); imagepng($image); $imageData = ob_get_contents(); ob_end_clean(); return $imageData; } function Fa58a0db1($image, $nQualite = null) { if (!isset($nQualite)) $nQualite = gdJpegQualiteDefaut; ob_start(); imagejpeg($image,null,$nQualite); $imageData = ob_get_contents(); ob_end_clean(); return $imageData; } function F2e5ba721($image) { ob_start(); imagegif($image); $imageData = ob_get_contents(); ob_end_clean(); return $imageData; } function Fd3f53de9($image) { return Fcdc9d18d($image); } function Fcdc9d18d($im, $filename = false) { $bOptim = true; if (!$im) return false; if ($filename === false) { $fn = session_id(); } else $fn = $filename; F6b1e3687(); $f = fopen (F9486bf1a($fn), "w+"); F1e7b0563(); if (!$f) return false; $fwrite = ""; $biWidth = imagesx ($im); $biHeight = imagesy ($im); $biBPLine = $biWidth * 3; $biStride = ($biBPLine + 3) & ~3; $biSizeImage = $biStride * $biHeight; $bfOffBits = 54; $bfSize = $bfOffBits + $biSizeImage; if (!$bOptim) { fwrite ($f, 'BM', 2); fwrite ($f, pack ('VvvV', $bfSize, 0, 0, $bfOffBits)); fwrite ($f, pack ('VVVvvVVVVVV', 40, $biWidth, $biHeight, 1, 24, 0, $biSizeImage, 0, 0, 0, 0)); } else { $fwrite .= 'BM'; $fwrite .= pack ('VvvV', $bfSize, 0, 0, $bfOffBits); $fwrite .= pack ('VVVvvVVVVVV', 40, $biWidth, $biHeight, 1, 24, 0, $biSizeImage, 0, 0, 0, 0); } $numpad = $biStride - $biBPLine; for ($y = $biHeight - 1; $y >= 0; --$y) { for ($x = 0; $x < $biWidth; ++$x) { $col = imagecolorat ($im, $x, $y); if (!$bOptim) fwrite ($f, pack ('V', $col), 3); else $fwrite .= utf8_substr(pack ('V', $col),0,3); } for ($i = 0; $i < $numpad; ++$i) { if (!$bOptim) fwrite ($f, pack ('C', 0)); else $fwrite .= pack ('C', 0); } } if ($bOptim) fwrite($f,$fwrite); fclose ($f); if ($filename === false) { $data = file_get_contents(F9486bf1a($fn)); unlink(F9486bf1a($fn)); return $data; } return true; } function F7f901a36($filename) { $filename = F9486bf1a($filename); if (! $f1 = fopen($filename,"rb")) return false; $FILE = unpack("vfile_type/Vfile_size/Vreserved/Vbitmap_offset", fread($f1,14)); if ($FILE['file_type'] != 19778) return false; $BMP = unpack('Vheader_size/Vwidth/Vheight/vplanes/vbits_per_pixel'. '/Vcompression/Vsize_bitmap/Vhoriz_resolution'. '/Vvert_resolution/Vcolors_used/Vcolors_important', fread($f1,40)); $BMP['colors'] = pow(2,$BMP['bits_per_pixel']); if ($BMP['size_bitmap'] == 0) $BMP['size_bitmap'] = $FILE['file_size'] - $FILE['bitmap_offset']; $BMP['bytes_per_pixel'] = $BMP['bits_per_pixel']/8; $BMP['bytes_per_pixel2'] = ceil($BMP['bytes_per_pixel']); $BMP['decal'] = ($BMP['width']*$BMP['bytes_per_pixel']/4); $BMP['decal'] -= floor($BMP['width']*$BMP['bytes_per_pixel']/4); $BMP['decal'] = 4-(4*$BMP['decal']); if ($BMP['decal'] == 4) $BMP['decal'] = 0; $PALETTE = array(); if ($BMP['colors'] < 16777216) { $PALETTE = unpack('V'.$BMP['colors'], fread($f1,$BMP['colors']*4)); } $IMG = fread($f1,$BMP['size_bitmap']); $VIDE = utf8_chr(0); $res = imagecreatetruecolor($BMP['width'],$BMP['height']); $P = 0; $Y = $BMP['height']-1; while ($Y >= 0) { $X=0; while ($X < $BMP['width']) { if ($BMP['bits_per_pixel'] >= 24) $COLOR = unpack("V",utf8_substr($IMG,$P,3).$VIDE); elseif ($BMP['bits_per_pixel'] == 16) { $COLOR = unpack("n",utf8_substr($IMG,$P,2)); $COLOR[1] = $PALETTE[$COLOR[1]+1]; } elseif ($BMP['bits_per_pixel'] == 8) { $COLOR = unpack("n",$VIDE.utf8_substr($IMG,$P,1)); $COLOR[1] = $PALETTE[$COLOR[1]+1]; } elseif ($BMP['bits_per_pixel'] == 4) { $COLOR = unpack("n",$VIDE.utf8_substr($IMG,floor($P),1)); if (($P*2)%2 == 0) $COLOR[1] = ($COLOR[1] >> 4) ; else $COLOR[1] = ($COLOR[1] & 0x0F); $COLOR[1] = $PALETTE[$COLOR[1]+1]; } elseif ($BMP['bits_per_pixel'] == 1) { $COLOR = unpack("n",$VIDE.utf8_substr($IMG,floor($P),1)); if (($P*8)%8 == 0) $COLOR[1] = $COLOR[1] >>7; elseif (($P*8)%8 == 1) $COLOR[1] = ($COLOR[1] & 0x40)>>6; elseif (($P*8)%8 == 2) $COLOR[1] = ($COLOR[1] & 0x20)>>5; elseif (($P*8)%8 == 3) $COLOR[1] = ($COLOR[1] & 0x10)>>4; elseif (($P*8)%8 == 4) $COLOR[1] = ($COLOR[1] & 0x8)>>3; elseif (($P*8)%8 == 5) $COLOR[1] = ($COLOR[1] & 0x4)>>2; elseif (($P*8)%8 == 6) $COLOR[1] = ($COLOR[1] & 0x2)>>1; elseif (($P*8)%8 == 7) $COLOR[1] = ($COLOR[1] & 0x1); $COLOR[1] = $PALETTE[$COLOR[1]+1]; } else return false; imagesetpixel($res,$X,$Y,$COLOR[1]); ++$X; $P += $BMP['bytes_per_pixel']; } --$Y; $P+=$BMP['decal']; } fclose($f1); return $res; } ?>