<?php
//20.0.56.0 FMK/Pear/SQL/Parser.php GF Based on LGPL Project SQL_Parser which can be found at http://pear.php.net/package/SQL_Parser 
//VersionVI: 30F200066p
//(c) 2005-2012 PC SOFT  - Release
 if (!defined('__INC__FMK/Pear/PEAR.php')) { define('__INC__FMK/Pear/PEAR.php',true); include_once(WB_INCLUDE_PATH.'WD1d5ce3b8322119ec5bb186d0cf889fcc.php'); } if (!defined('__INC__FMK/Pear/SQL/Lexer.php')) { define('__INC__FMK/Pear/SQL/Lexer.php',true); include_once(WB_INCLUDE_PATH.'WDee8f107cb5bc04589ae2dcc8622c0ff6.php'); } class SQL_Parser { var $lexer; var $token; var $functions = array(); var $types = array(); var $symbols = array(); var $operators = array(); var $synonyms = array(); var $dialects = array("ANSI", "MySQL"); function SQL_Parser($string = null, $dialect = "ANSI") { $this->F69b46a72($dialect); if (is_string($string)) { $this->lexer = new Lexer($string, 1); $this->lexer->symbols =& $this->symbols; } } function F69b46a72($dialect) { if (in_array($dialect, $this->dialects)) { FMK_Charge('FMK/Pear/SQL/Dialect_'.$dialect.'.php',true); $dialect = $GLOBALS['dialect']; $this->types = array_flip($dialect['types']); $this->functions = array_flip($dialect['functions']); $this->operators = array_flip($dialect['operators']); $this->commands = array_flip($dialect['commands']); $this->synonyms = $dialect['synonyms']; $this->symbols = array_merge( $this->types, $this->functions, $this->operators, $this->commands, array_flip($dialect['reserved']), array_flip($dialect['conjunctions'])); } else { return $this->Fb9eb0792('Unknown SQL dialect:'.$dialect); } return null; } function Feadbbc07(&$values, &$types) { $values = array(); $types = array(); while ($this->token != ')') { $this->F8c566b01(); if ($this->F47f9f0db() || ($this->token == 'ident')) { $values[] = $this->lexer->tokText; $types[] = $this->token; } elseif ($this->token == ')') { return false; } else { return $this->Fb9eb0792('Expected a value'); } $this->F8c566b01(); if (($this->token != ',') && ($this->token != ')')) { return $this->Fb9eb0792('Expected , or )'); } } } function Fb9eb0792($message) { $end = 0; if ($this->lexer->string != '') { while (($this->lexer->lineBegin+$end < $this->lexer->stringLen) && ($this->lexer->string{$this->lexer->lineBegin+$end} != "\n")){ ++$end; } } $message = 'Parse error: '.$message.' on line '. ($this->lexer->lineNo+1)."\n"; $message .= utf8_substr($this->lexer->string, $this->lexer->lineBegin, $end)."\n"; $length = is_null($this->token) ? 0 : utf8_strlen($this->lexer->tokText); $message .= utf8_str_repeat(' ', abs($this->lexer->tokPtr - $this->lexer->lineBegin - $length))."^"; $message .= ' found: "'.$this->lexer->tokText.'"'; return $GLOBALS['PEAR']->Fb9eb0792($message); } function F0e7f32a4() { return isset($this->types[$this->token]); } function F47f9f0db() { return (($this->token == 'real_val') || ($this->token == 'int_val') || ($this->token == 'text_val') || ($this->token == 'null')); } function Faf85413a() { return isset($this->functions[$this->token]); } function F2eb62983() { return isset($this->commands[$this->token]); } function F74329c0a() { return isset($this->symbols[$this->token]); } function F7bf65627() { return isset($this->operators[$this->token]); } function F8c566b01() { $this->token = $this->lexer->Fb067b3d3(); } function F3233aaf0() { $namedConstraint = false; $options = array(); while (($this->token != ',') && ($this->token != ')') && ($this->token != null)) { $option = $this->token; $haveValue = true; switch ($option) { case 'constraint': $this->F8c566b01(); if ($this->token = 'ident') { $constraintName = $this->lexer->tokText; $namedConstraint = true; $haveValue = false; } else { return $this->Fb9eb0792('Expected a constraint name'); } break; case 'default': $this->F8c566b01(); if ($this->F47f9f0db()) { $constraintOpts = array('type'=>'default_value', 'value'=>$this->lexer->tokText); } elseif ($this->Faf85413a()) { $results = $this->parseFunctionOpts(); if ($GLOBALS['PEAR']->F81ae42f2($results)) { return $results; } $results['type'] = 'default_function'; $constraintOpts = $results; } else { return $this->Fb9eb0792('Expected default value'); } break; case 'primary': $this->F8c566b01(); if ($this->token == 'key') { $constraintOpts = array('type'=>'primary_key', 'value'=>true); } else { return $this->Fb9eb0792('Expected "key"'); } break; case 'not': $this->F8c566b01(); if ($this->token == 'null') { $constraintOpts = array('type'=>'not_null', 'value' => true); } else { return $this->Fb9eb0792('Expected "null"'); } break; case 'check': $this->F8c566b01(); if ($this->token != '(') { return $this->Fb9eb0792('Expected ('); } $results = $this->Fad1ee6d7(); if ($GLOBALS['PEAR']->F81ae42f2($results)) { return $results; } $results['type'] = 'check'; $constraintOpts = $results; if ($this->token != ')') { return $this->Fb9eb0792('Expected )'); } break; case 'unique': $this->F8c566b01(); if ($this->token != '(') { return $this->Fb9eb0792('Expected ('); } $constraintOpts = array('type'=>'unique'); $this->F8c566b01(); while ($this->token != ')') { if ($this->token != 'ident') { return $this->Fb9eb0792('Expected an identifier'); } $constraintOpts['column_names'][] = $this->lexer->tokText; $this->F8c566b01(); if (($this->token != ')') && ($this->token != ',')) { return $this->Fb9eb0792('Expected ) or ,'); } } if ($this->token != ')') { return $this->Fb9eb0792('Expected )'); } break; case 'month': case 'year': case 'day': case 'hour': case 'minute': case 'second': $intervals = array( array('month'=>0, 'year'=>1), array('second'=>0, 'minute'=>1, 'hour'=>2, 'day'=>3)); foreach ($intervals as $class) { if (isset($class[$option])) { $constraintOpts = array('quantum_1'=>$this->token); $this->F8c566b01(); if ($this->token == 'to') { $this->F8c566b01(); if (!isset($class[$this->token])) { return $this->Fb9eb0792( 'Expected interval quanta'); } if ($class[$this->token] >= $class[$constraintOpts['quantum_1']]) { return $this->Fb9eb0792($this->token. ' is not smaller than '. $constraintOpts['quantum_1']); } $constraintOpts['quantum_2'] = $this->token; } else { $this->lexer->F16d73c67(); } break; } } if (!isset($constraintOpts['quantum_1'])) { return $this->Fb9eb0792('Expected interval quanta'); } $constraintOpts['type'] = 'values'; break; case 'null': $haveValue = false; break; default: return $this->Fb9eb0792('Unexpected token ' .$this->lexer->tokText); } if ($haveValue) { if ($namedConstraint) { $options['constraints'][$constraintName] = $constraintOpts; $namedConstraint = false; } else { $options['constraints'][] = $constraintOpts; } } $this->F8c566b01(); } return $options; } function Fad1ee6d7($subSearch = false) { $clause = array(); $this->F8c566b01(); if ($this->token == 'not') { $clause['neg'] = true; $this->F8c566b01(); } $foundSubclause = false; if ($this->token == '(') { $clause['arg_1']['value'] = $this->Fad1ee6d7(true); $clause['arg_1']['type'] = 'subclause'; if ($this->token != ')') { return $this->Fb9eb0792('Expected ")"'); } $foundSubclause = true; } else if ($this->F74329c0a()) { return $this->Fb9eb0792('Expected a column name or value'); } else { $clause['arg_1']['value'] = $this->lexer->tokText; $clause['arg_1']['type'] = $this->token; } if (!$foundSubclause) { $this->F8c566b01(); if (!$this->F7bf65627()) { return $this->Fb9eb0792('Expected an operator'); } $clause['op'] = $this->token; $this->F8c566b01(); switch ($clause['op']) { case 'is': if ($this->token == 'not') { $clause['neg'] = true; $this->F8c566b01(); } if ($this->token != 'null') { return $this->Fb9eb0792('Expected "null"'); } $clause['arg_2']['value'] = ''; $clause['arg_2']['type'] = $this->token; break; case 'not': if ($this->token != 'in') { return $this->Fb9eb0792('Expected "in"'); } $clause['op'] = $this->token; $clause['neg'] = true; $this->F8c566b01(); case 'in': if ($this->token != '(') { return $this->Fb9eb0792('Expected "("'); } $this->F8c566b01(); if ($this->token == 'select') { $clause['arg_2']['value'] = $this->F56042786(true); $clause['arg_2']['type'] = 'command'; } else { $this->lexer->Fbbc08648(); $result = $this->Feadbbc07($clause['arg_2']['value'], $clause['arg_2']['type']); if ($GLOBALS['PEAR']->F81ae42f2($result)) { return $result; } } if ($this->token != ')') { return $this->Fb9eb0792('Expected ")"'); } break; case 'and': case 'or': $this->lexer->F16d73c67(); break; default: if ($this->F74329c0a()) { return $this->Fb9eb0792('Expected a column name or value'); } if ($this->token == '(') { $clause['arg_2']['value'] = $this->Fad1ee6d7(true); $clause['arg_2']['type'] = 'subclause'; $this->F8c566b01(); if ($this->token != ')') { return $this->Fb9eb0792('Expected ")"'); } } else { $clause['arg_2']['value'] = $this->lexer->tokText; $clause['arg_2']['type'] = $this->token; } } } $this->F8c566b01(); if (($this->token == 'and') || ($this->token == 'or')) { $op = $this->token; $subClause = $this->Fad1ee6d7($subSearch); if ($GLOBALS['PEAR']->F81ae42f2($subClause)) { return $subClause; } else { $clause = array('arg_1' => $clause, 'op' => $op, 'arg_2' => $subClause); } } else { $this->lexer->F16d73c67(); } return $clause; } function F8e91005b() { $values = null; $types = null; $this->F8c566b01(); if ($this->token != '(') { return $this->Fb9eb0792('Expected ('); } $fields = array(); while (1) { $this->F8c566b01(); if ($this->token == 'ident') { $name = $this->lexer->tokText; } elseif ($this->token == ')') { return $fields; } else { return $this->Fb9eb0792('Expected identifier'); } $this->F8c566b01(); if ($this->F0e7f32a4($this->token)) { $type = $this->token; } else { return $this->Fb9eb0792('Expected a valid type'); } $this->F8c566b01(); if ($this->token == 'precision') { if ($type == 'double') { return $this->Fb9eb0792('Unexpected token'); } $this->F8c566b01(); } elseif ($this->token == 'varying') { if ($type == 'character') { $type == 'varchar'; $this->F8c566b01(); } else { return $this->Fb9eb0792('Unexpected token'); } } $fields[$name]['type'] = $this->synonyms[$type]; if ($this->token == '(') { $results = $this->Feadbbc07($values, $types); if ($GLOBALS['PEAR']->F81ae42f2($results)) { return $results; } switch ($fields[$name]['type']) { case 'numeric': if (isset($values[1])) { if ($types[1] != 'int_val') { return $this->Fb9eb0792('Expected an integer'); } $fields[$name]['decimals'] = $values[1]; } case 'float': if ($types[0] != 'int_val') { return $this->Fb9eb0792('Expected an integer'); } $fields[$name]['length'] = $values[0]; break; case 'char': case 'varchar': case 'integer': case 'int': if (sizeof($values) != 1) { return $this->Fb9eb0792('Expected 1 parameter'); } if ($types[0] != 'int_val') { return $this->Fb9eb0792('Expected an integer'); } $fields[$name]['length'] = $values[0]; break; case 'set': case 'enum': if (!sizeof($values)) { return $this->Fb9eb0792('Expected a domain'); } $fields[$name]['domain'] = $values; break; default: if (sizeof($values)) { return $this->Fb9eb0792('Unexpected )'); } } $this->F8c566b01(); } $options = $this->F3233aaf0(); if ($GLOBALS['PEAR']->F81ae42f2($options)) { return $options; } $fields[$name] += $options; if ($this->token == ')') { return $fields; } elseif (is_null($this->token)) { return $this->Fb9eb0792('Expected )'); } } } function parseFunctionOpts() { $function = $this->token; $opts['name'] = $function; $this->F8c566b01(); if ($this->token != '(') { return $this->Fb9eb0792('Expected "("'); } switch ($function) { case 'count': $this->F8c566b01(); switch ($this->token) { case 'distinct': $opts['distinct'] = true; $this->F8c566b01(); if ($this->token != 'ident') { return $this->Fb9eb0792('Expected a column name'); } case 'ident': case '*': $opts['arg'][] = $this->lexer->tokText; break; default: return $this->Fb9eb0792('Invalid argument'); } break; case 'concat': $this->F8c566b01(); while ($this->token != ')') { switch ($this->token) { case 'ident': case 'text_val': $opts['arg'][] = $this->lexer->tokText; break; case ',': break; default: return $this->Fb9eb0792('Expected a string or a column name'); } $this->F8c566b01(); } $this->lexer->Fbbc08648(); break; case 'avg': case 'min': case 'max': case 'sum': default: $this->F8c566b01(); $opts['arg'] = $this->lexer->tokText; break; } $this->F8c566b01(); if ($this->token != ')') { return $this->Fb9eb0792('Expected ")"'); } $this->F8c566b01(); if ($this->token == ',' || $this->token == 'from') { $this->lexer->Fbbc08648(); } elseif ($this->token == 'as') { $this->F8c566b01(); if ($this->token == 'ident' ) { $opts['alias'] = $this->lexer->tokText; } else { return $this->Fb9eb0792('Expected column alias'); } } else { if ($this->token == 'ident' ) { $opts['alias'] = $this->lexer->tokText; } else { return $this->Fb9eb0792('Expected column alias, from or comma'); } } return $opts; } function Fc39a477b() { $this->F8c566b01(); switch ($this->token) { case 'table': $tree = array('command' => 'create_table'); $this->F8c566b01(); if ($this->token == 'ident') { $tree['table_names'][] = $this->lexer->tokText; $fields = $this->F8e91005b(); if ($GLOBALS['PEAR']->F81ae42f2($fields)) { return $fields; } $tree['column_defs'] = $fields; } else { return $this->Fb9eb0792('Expected table name'); } break; case 'index': $tree = array('command' => 'create_index'); break; case 'constraint': $tree = array('command' => 'create_constraint'); break; case 'sequence': $tree = array('command' => 'create_sequence'); break; default: return $this->Fb9eb0792('Unknown object to create'); } return $tree; } function Fa62abcfc() { $values = null; $this->F8c566b01(); if ($this->token == 'into') { $tree = array('command' => 'insert'); $this->F8c566b01(); if ($this->token == 'ident') { $tree['table_names'][] = $this->lexer->tokText; $this->F8c566b01(); } else { return $this->Fb9eb0792('Expected table name'); } if ($this->token == '(') { $results = $this->Feadbbc07($values, $types); if ($GLOBALS['PEAR']->F81ae42f2($results)) { return $results; } else { if (sizeof($values)) { $tree['column_names'] = $values; } } $this->F8c566b01(); } if ($this->token == 'values') { $this->F8c566b01(); $results = $this->Feadbbc07($values, $types); if ($GLOBALS['PEAR']->F81ae42f2($results)) { return $results; } else { if (isset($tree['column_defs']) && (sizeof($tree['column_defs']) != sizeof($values))) { return $this->Fb9eb0792('field/value mismatch'); } if (sizeof($values)) { foreach ($values as $key=>$value) { $values[$key] = array('value'=>$value, 'type'=>$types[$key]); } $tree['values'] = $values; } else { return $this->Fb9eb0792('No fields to insert'); } } } else { return $this->Fb9eb0792('Expected "values"'); } } else { return $this->Fb9eb0792('Expected "into"'); } return $tree; } function F34b30cc3() { $this->F8c566b01(); if ($this->token == 'ident') { $tree = array('command' => 'update'); $tree['table_names'][] = $this->lexer->tokText; } else { return $this->Fb9eb0792('Expected table name'); } $this->F8c566b01(); if ($this->token != 'set') { return $this->Fb9eb0792('Expected "set"'); } while (true) { $this->F8c566b01(); if ($this->token != 'ident') { return $this->Fb9eb0792('Expected a column name'); } $tree['column_names'][] = $this->lexer->tokText; $this->F8c566b01(); if ($this->token != '=') { return $this->Fb9eb0792('Expected ='); } $this->F8c566b01(); if (!$this->F47f9f0db($this->token)) { return $this->Fb9eb0792('Expected a value'); } $tree['values'][] = array('value'=>$this->lexer->tokText, 'type'=>$this->token); $this->F8c566b01(); if ($this->token == 'where') { $clause = $this->Fad1ee6d7(); if ($GLOBALS['PEAR']->F81ae42f2($clause)) { return $clause; } $tree['where_clause'] = $clause; break; } elseif ($this->token != ',') { return $this->Fb9eb0792('Expected "where" or ","'); } } return $tree; } function Fbb4d2623() { $this->F8c566b01(); if ($this->token != 'from') { return $this->Fb9eb0792('Expected "from"'); } $tree = array('command' => 'delete'); $this->F8c566b01(); if ($this->token != 'ident') { return $this->Fb9eb0792('Expected a table name'); } $tree['table_names'][] = $this->lexer->tokText; $this->F8c566b01(); if ($this->token != 'where') { return $this->Fb9eb0792('Expected "where"'); } $clause = $this->Fad1ee6d7(); if ($GLOBALS['PEAR']->F81ae42f2($clause)) { return $clause; } $tree['where_clause'] = $clause; return $tree; } function Ffeef5ed0() { $this->F8c566b01(); switch ($this->token) { case 'table': $tree = array('command' => 'drop_table'); $this->F8c566b01(); if ($this->token != 'ident') { return $this->Fb9eb0792('Expected a table name'); } $tree['table_names'][] = $this->lexer->tokText; $this->F8c566b01(); if (($this->token == 'restrict') || ($this->token == 'cascade')) { $tree['drop_behavior'] = $this->token; } $this->F8c566b01(); if (!is_null($this->token)) { return $this->Fb9eb0792('Unexpected token'); } return $tree; break; case 'index': $tree = array('command' => 'drop_index'); break; case 'constraint': $tree = array('command' => 'drop_constraint'); break; case 'sequence': $tree = array('command' => 'drop_sequence'); break; default: return $this->Fb9eb0792('Unknown object to drop'); } return $tree; } function F56042786($subSelect = false) { $tree = array('command' => 'select'); $this->F8c566b01(); if (($this->token == 'distinct') || ($this->token == 'all')) { $tree['set_quantifier'] = $this->token; $this->F8c566b01(); } if ($this->token == '*') { $tree['column_names'][] = '*'; $this->F8c566b01(); } elseif ($this->token == 'ident' || $this->Faf85413a()) { while ($this->token != 'from') { if ($this->token == 'ident') { $prevTok = $this->token; $prevTokText = $this->lexer->tokText; $this->F8c566b01(); if ($this->token == '.') { $columnTable = $prevTokText; $this->F8c566b01(); $prevTok = $this->token; $prevTokText = $this->lexer->tokText; } else { $columnTable = ''; } if ($prevTok == 'ident') { $columnName = $prevTokText; } else { return $this->Fb9eb0792('Expected column name'); } if ($this->token == 'as') { $this->F8c566b01(); if ($this->token == 'ident' ) { $columnAlias = $this->lexer->tokText; } else { return $this->Fb9eb0792('Expected column alias'); } } elseif ($this->token == 'ident') { $columnAlias = $this->lexer->tokText; } else { $columnAlias = ''; } $tree['column_tables'][] = $columnTable; $tree['column_names'][] = $columnName; $tree['column_aliases'][] = $columnAlias; if ($this->token != 'from') { $this->F8c566b01(); } if ($this->token == ',') { $this->F8c566b01(); } } elseif ($this->Faf85413a()) { if (!isset($tree['set_quantifier'])) { $result = $this->parseFunctionOpts(); if ($GLOBALS['PEAR']->F81ae42f2($result)) { return $result; } $tree['set_function'][] = $result; $this->F8c566b01(); if ($this->token == 'as') { $this->F8c566b01(); if ($this->token == 'ident' ) { $columnAlias = $this->lexer->tokText; } else { return $this->Fb9eb0792('Expected column alias'); } } else { $columnAlias = ''; } } else { return $this->Fb9eb0792('Cannot use "'. $tree['set_quantifier'].'" with '.$this->token); } } elseif ($this->token == ',') { $this->F8c566b01(); } else { return $this->Fb9eb0792('Unexpected token "'.$this->token.'"'); } } } else { return $this->Fb9eb0792('Expected columns or a set function'); } if ($this->token != 'from') { return $this->Fb9eb0792('Expected "from"'); } $this->F8c566b01(); while ($this->token == 'ident') { $tree['table_names'][] = $this->lexer->tokText; $this->F8c566b01(); if ($this->token == 'ident') { $tree['table_aliases'][] = $this->lexer->tokText; $this->F8c566b01(); } elseif ($this->token == 'as') { $this->F8c566b01(); if ($this->token == 'ident') { $tree['table_aliases'][] = $this->lexer->tokText; } else { return $this->Fb9eb0792('Expected table alias'); } $this->F8c566b01(); } else { $tree['table_aliases'][] = ''; } if ($this->token == 'on') { $clause = $this->Fad1ee6d7(); if ($GLOBALS['PEAR']->F81ae42f2($clause)) { return $clause; } $tree['table_join_clause'][] = $clause; } else { $tree['table_join_clause'][] = ''; } if ($this->token == ',') { $tree['table_join'][] = ','; $this->F8c566b01(); } elseif ($this->token == 'join') { $tree['table_join'][] = 'join'; $this->F8c566b01(); } elseif (($this->token == 'cross') || ($this->token == 'inner')) { $join = $this->lexer->tokText; $this->F8c566b01(); if ($this->token != 'join') { return $this->Fb9eb0792('Expected token "join"'); } $tree['table_join'][] = $join.' join'; $this->F8c566b01(); } elseif (($this->token == 'left') || ($this->token == 'right')) { $join = $this->lexer->tokText; $this->F8c566b01(); if ($this->token == 'join') { $tree['table_join'][] = $join.' join'; } elseif ($this->token == 'outer') { $join .= ' outer'; $this->F8c566b01(); if ($this->token == 'join') { $tree['table_join'][] = $join.' join'; } else { return $this->Fb9eb0792('Expected token "join"'); } } else { return $this->Fb9eb0792('Expected token "outer" or "join"'); } $this->F8c566b01(); } elseif ($this->token == 'natural') { $join = $this->lexer->tokText; $this->F8c566b01(); if ($this->token == 'join') { $tree['table_join'][] = $join.' join'; } elseif (($this->token == 'left') || ($this->token == 'right')) { $join .= ' '.$this->token; $this->F8c566b01(); if ($this->token == 'join') { $tree['table_join'][] = $join.' join'; } elseif ($this->token == 'outer') { $join .= ' '.$this->token; $this->F8c566b01(); if ($this->token == 'join') { $tree['table_join'][] = $join.' join'; } else { return $this->Fb9eb0792('Expected token "join" or "outer"'); } } else { return $this->Fb9eb0792('Expected token "join" or "outer"'); } } else { return $this->Fb9eb0792('Expected token "left", "right" or "join"'); } $this->F8c566b01(); } elseif (($this->token == 'where') || ($this->token == 'order') || ($this->token == 'limit') || (is_null($this->token))) { break; } } while (!is_null($this->token) && (!$subSelect || $this->token != ')') && $this->token != ')') { switch ($this->token) { case 'where': $clause = $this->Fad1ee6d7(); if ($GLOBALS['PEAR']->F81ae42f2($clause)) { return $clause; } $tree['where_clause'] = $clause; break; case 'order': $this->F8c566b01(); if ($this->token != 'by') { return $this->Fb9eb0792('Expected "by"'); } $this->F8c566b01(); while ($this->token == 'ident') { $col = $this->lexer->tokText; $this->F8c566b01(); if (isset($this->synonyms[$this->token])) { $order = $this->synonyms[$this->token]; if (($order != 'asc') && ($order != 'desc')) { return $this->Fb9eb0792('Unexpected token'); } $this->F8c566b01(); } else { $order = 'asc'; } if ($this->token == ',') { $this->F8c566b01(); } $tree['sort_order'][$col] = $order; } break; case 'limit': $this->F8c566b01(); if ($this->token != 'int_val') { return $this->Fb9eb0792('Expected an integer value'); } $length = $this->lexer->tokText; $start = 0; $this->F8c566b01(); if ($this->token == ',') { $this->F8c566b01(); if ($this->token != 'int_val') { return $this->Fb9eb0792('Expected an integer value'); } $start = $length; $length = $this->lexer->tokText; $this->F8c566b01(); } $tree['limit_clause'] = array('start'=>$start, 'length'=>$length); break; case 'group': $this->F8c566b01(); if ($this->token != 'by') { return $this->Fb9eb0792('Expected "by"'); } $this->F8c566b01(); while ($this->token == 'ident') { $col = $this->lexer->tokText; $this->F8c566b01(); if ($this->token == ',') { $this->F8c566b01(); } $tree['group_by'][] = $col; } break; case 'having': $clause = ''; $this->F8c566b01(); while ( $this->token != null ) { $clause .= ' '.$this->lexer->tokText; $this->F8c566b01(); } $tree['having_clause'] = $clause; break; default: return $this->Fb9eb0792('Unexpected clause'); } } return $tree; } function F2e88eca8($string = null) { if (is_string($string)) { $this->lexer = new Lexer($string, 3); $this->lexer->symbols =& $this->symbols; } else { if (!is_object($this->lexer)) { return $this->Fb9eb0792('No initial string specified'); } } $this->F8c566b01(); switch ($this->token) { case null: return $this->Fb9eb0792('Nothing to do'); case 'select': return $this->F56042786(); case 'update': return $this->F34b30cc3(); case 'insert': return $this->Fa62abcfc(); case 'delete': return $this->Fbb4d2623(); case 'create': return $this->Fc39a477b(); case 'drop': return $this->Ffeef5ed0(); default: return $this->Fb9eb0792('Unknown action :'.$this->token); } } } ?>