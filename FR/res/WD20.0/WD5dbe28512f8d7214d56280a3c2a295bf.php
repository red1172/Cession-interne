<?php
//20.0.56.0 WL/VM/VM.php GF 
//VersionVI: 30F200066p
//(c) 2006-2008 PC SOFT  - Release
 if (!defined('__INC__FMK/Langue/Alphabet.php')) { define('__INC__FMK/Langue/Alphabet.php',true); include_once(WB_INCLUDE_PATH.'WDcd0b26b72175a8bae40e1d32deffe704.php'); } if (!defined('__INC__FMK/Disque.php')) { define('__INC__FMK/Disque.php',true); include_once(WB_INCLUDE_PATH.'WD99bd5984d9c78e9239c729a52b83e562.php'); } if (!defined('__INC__FMK/Chaine.php')) { define('__INC__FMK/Chaine.php',true); include_once(WB_INCLUDE_PATH.'WD55acb2e708e26f23cb8956cd93e98123.php'); } if (!defined('__INC__FMK/Chaine/Conversion.php')) { define('__INC__FMK/Chaine/Conversion.php',true); include_once(WB_INCLUDE_PATH.'WD2763954cb0d71a3b844e3c73c65bc4a3.php'); } if (!defined('__INC__FMK/Date.php')) { define('__INC__FMK/Date.php',true); include_once(WB_INCLUDE_PATH.'WD97af71f4453b9d548e8ff90b4bbaba9f.php'); } if (!defined('__INC__FMK/Environnement.php')) { define('__INC__FMK/Environnement.php',true); include_once(WB_INCLUDE_PATH.'WD62c1fcbeb97cd284448bd7a6ec627839.php'); } if (!defined('__INC__FMK/Exception/Pile.php')) { define('__INC__FMK/Exception/Pile.php',true); include_once(WB_INCLUDE_PATH.'WDc8aea829013863fbce9e58dbd520d694.php'); } if (!defined('__INC__FMK/Compat/xsystem.php')) { define('__INC__FMK/Compat/xsystem.php',true); include_once(WB_INCLUDE_PATH.'WD14183cc5dbbd843da831afdd3bf106e4.php'); } define("ExceptionErreur",256,true); define("ExceptionAvertissement",512,true); define("ExceptionInformation",1024,true); $TabVariableGlobaleVM = array(); define('CHRONO', 0); define('CHARSET', 1); class FMK_Chronometre { var $Debut = 0; var $Fin = 0; function F46e81903() { $this->Debut = $this->Fc4c29d26(); $this->Fin = -1; } function F1cd0aa55() { if($this->Fin == -1) { $this->Fin = $this->getValeur(); } return $this->Fin; } function getValeur() { if($this->Fin == -1) { return $this->Fc4c29d26() - $this->Debut; } return $this->Fin; } function Fc4c29d26() { return Fd443b7ac(); } } function VM_SauveVariableGlobaleInterne(&$pclPage) { global $TabVariableGlobaleVM; $pclLangueAlphabet =& FMK_Langue_Alphabet(); $pclPage->TabVarGlobaleInterneComposante["VM"] = array( $TabVariableGlobaleVM , $pclLangueAlphabet); } function VM_RestaureVariableGlobaleInterne(&$pclPage) { global $TabVariableGlobaleVM; if (!isset($pclPage->TabVarGlobaleInterneComposante["VM"])) return; $TabVariableGlobaleVM = $pclPage->TabVarGlobaleInterneComposante["VM"][0]; Fd880c293($pclPage->TabVarGlobaleInterneComposante["VM"][1]); } function DimensionModifie(&$Variable, $NouvelleDimension) { if ($NouvelleDimension < 0) return DimensionRecupere(GetValeur($Variable)); if (($Variable->F1e21db15() !== TYPEWL_TABLEAU)&&($Variable->F1e21db15() !== TYPEWL_TABLEAU_FIXE)) { Fe81a7f9e('ERR_TYPE_PARAM',F83ff700b(TYPEWL_TABLEAU)); } $Diff = $NouvelleDimension - count($Variable->GetValeur(),COUNT_NORMAL); $nNbArgs = func_num_args(); $Variable->m_tabDimensions[0] = $NouvelleDimension; if ( ($nNbArgs>2) && ( $Variable->Fc30d7e5d() ) ) { $args = func_get_args(); unset($args[1]); $args = array_values($args); $nNbDim = $Variable->Fa6cd7f2a(); $nMaxDim = min($nNbArgs-2, $nNbDim-1); for ($i=1; $i<=$nMaxDim; $i++) { $Variable->m_tabDimensions[ $i ] = $args[ $i ]; } } if ($Diff<0) { while ($Diff++) { Operateur(8283,$Variable); } } else { while ($Diff--) { Operateur(8281,$Variable); } } if ( ($nNbArgs>2) && ( $Variable->Fc30d7e5d() ) ) { for($i=1; $i<=$NouvelleDimension; $i++) { $args[0] =& GetValeur(SousType($Variable,$i)); $SousTableau =& $args[0]; $SousTableau->m_tabDimensions = array_slice($Variable->m_tabDimensions,1); call_user_func_array('DimensionModifie',$args); } } return null; } function DimensionRecupere($clVariable) { if (is_object($clVariable)) { if ( ($clVariable->F1e21db15() == TYPEWL_TABLEAU) || ($clVariable->F1e21db15() == TYPEWL_TABLEAU_ASSOCIATIF) || ($clVariable->F1e21db15() == TYPEWL_TABLEAU_FIXE) ) { return VersPrimitif(GetProp($clVariable,'Occurrence')); } elseif ($clVariable->F70cea20e()) { return 4; } elseif( ($clVariable->F1e21db15() == TYPEWL_CHAINE_ASCIIZ) || ($clVariable->F1e21db15() == TYPEWL_CHAINE_PASCAL) ) { return utf8_strlen(GetValeur($clVariable)); } elseif( ($clVariable->F1e21db15() == TYPEWL_VARIANT) ) { return 20; } elseif( ($clVariable->F1e21db15() == TYPEWL_CARACTERE) ) { return 1; } elseif( ($clVariable->F1e21db15() == TYPEWL_MONETAIRE) ) { return 10; } elseif( ($clVariable->F1e21db15() == TYPEWL_NUMERIQUE) ) { if ($clVariable->m_nNombreOctets === 0) return 18; return utf8_implode('',array_slice( array( 0, 1, 1, 2, 2, 3, 3, 4, 4, 4 , 5, 5, 6, 6, 6, 7, 7, 8, 8, 9 , 9, 9, 10, 10, 11, 11, 11, 12, 12, 13, 13, 13, 14, 14, 15, 15, 16, 16, 16 ) ,$clVariable->m_nNombreOctets,1)); } } $Variable = GetValeur($clVariable); if (is_string($Variable)) return 4; if (is_array($Variable)) { $Taille = count($Variable,COUNT_NORMAL); return $Taille; } if (is_double($Variable)) return 8; if (is_int($Variable)||is_resource($Variable)||is_bool($Variable)) return 4; if (is_object($Variable)) return utf8_strlen(serialize($Variable)); if (is_null($Variable)) return 0; return -1; } function Inverse($Chaine) { $Res = ''; $nTaille = strlen($Chaine); while($nTaille--) { $Res = ~$Chaine[$nTaille] . $Res; } return $Res; } function SansAccent($Chaine) { return Fcb2d4de8($Chaine,ccSansAccent); } function ChaineCompare($Chaine1, $Chaine2, $Option = ccNormal) { return Fda9fdf77($Chaine1, $Chaine2, $Option); } function ChaineCommencePar($sChaineInitiale, $sChaineRecherchee, $nOptionRecherche = ccNormal) { if (is_array($sChaineRecherchee)) { $nElemMatch = -1; $nTailleMatch = 0; $nOccurrence = count($sChaineRecherchee,COUNT_NORMAL); for($nIndiceChaine = 0; $nIndiceChaine<$nOccurrence; ++$nIndiceChaine) { $nCommencePar = ChaineCommencePar($sChaineInitiale,$sChaineRecherchee[$nIndiceChaine],$nOptionRecherche); if ($nCommencePar>$nTailleMatch) { $nElemMatch = $nIndiceChaine; $nTailleMatch = $nCommencePar; } } return $nTailleMatch; } $nLenA = utf8_strlen($sChaineInitiale); $nLenB = utf8_strlen($sChaineRecherchee); $nLenCompare = $nLenB; while ($nLenCompare<=$nLenA) { if (Fda9fdf77(utf8_substr($sChaineInitiale,0,$nLenCompare),utf8_substr($sChaineRecherchee,0,$nLenB),$nOptionRecherche)==0) { return $nLenCompare; } if (Fdef56c7f($nOptionRecherche,ccSansEspace) || Fdef56c7f($nOptionRecherche,ccSansPonctuationNiEspace)) { ++$nLenCompare; } else break; } return 0; } function ChaineFinitPar($sChaineInitiale, $sChaineRecherchee, $nOptionRecherche = ccNormal) { if (is_array($sChaineRecherchee)) { $nElemMatch = -1; $nTailleMatch = 0; $nOccurrence = count($sChaineRecherchee,COUNT_NORMAL); for($nIndiceChaine = 0; $nIndiceChaine<$nOccurrence; ++$nIndiceChaine) { $nCommencePar = ChaineFinitPar($sChaineInitiale,$sChaineRecherchee[$nIndiceChaine],$nOptionRecherche); if ($nCommencePar>$nTailleMatch) { $nElemMatch = $nIndiceChaine; $nTailleMatch = $nCommencePar; } } return $nTailleMatch; } return ChaineCommencePar(utf8_strrev($sChaineInitiale), utf8_strrev($sChaineRecherchee), $nOptionRecherche); } function ChaineFormate($Chaine, $Option = ccNormal) { return Fcb2d4de8($Chaine, $Option ); } function ChaineOccurrence($Chaine, $Recherche, $Option = DepuisDebut) { $Resultat = array(); return preg_match_all(F74ae1356($Recherche,$Option),$Chaine,$Resultat); } function ChaineSupprime($sChaine, $sSousChaine, $nOptionsOuDepart= null, $nLongueur=null) { if (isset($nLongueur)) return utf8_substr_replace($sChaine, $sSousChaine, $nOptionsOuDepart-1, $nLongueur); if (!isset($nOptionsOuDepart) && is_string($sSousChaine)) return utf8_str_replace($sSousChaine,'', $sChaine); if (is_array($sSousChaine)) { foreach ($sSousChaine as $sSousChaineStr) { $sChaine = ChaineSupprime($sChaine,$sSousChaineStr,$nOptionsOuDepart,$nLongueur); } return $sChaine; } global $_FMK_Chaine; $cszResultat = ''; $nIndexChaineTrouve = -1; $nPositionDebut = 1; $nPosition = 1; while($nPosition>0) { $nPosition = FMK_Position($sChaine, $sSousChaine, $nPositionDebut, $nOptionsOuDepart); if($nPosition>0) { if($nPosition>$nPositionDebut) $cszResultat.= utf8_substr($sChaine, $nPositionDebut-1,$nPosition-$nPositionDebut); $nPositionDebut = $nPosition + $_FMK_Chaine->nLongueurMatchPosition; } } if(utf8_strlen($sChaine)>=$nPositionDebut) $cszResultat.= utf8_substr($sChaine,$nPositionDebut-1,utf8_strlen($sChaine)-$nPositionDebut+1); return $cszResultat; } function ChaineIncremente($csResultat, $nPosition = null) { $nLng = utf8_strlen($csResultat); $bNombreDebut = ($nPosition === DepuisDebut); $csNombre = ''; $nPos = $nLng - 1; if (!$bNombreDebut) { while (($nPos >= 0) && is_numeric($csResultat[$nPos])) { --$nPos; } ++$nPos; $csNombre = utf8_substr($csResultat,$nPos); } if (!empty($csNombre)) { $csResultat = utf8_substr($csResultat,0,$nPos); } else if (($nPosition === null) || $bNombreDebut) { $nPos = 0; while (($nPos < $nLng) && is_numeric($csResultat[$nPos])) { ++$nPos; } $csNombre = utf8_substr($csResultat,0,$nPos); if (!empty($csNombre)) { $csResultat = utf8_substr($csResultat,$nPos); $bNombreDebut = true; } } $csNombre = (string)(intval($csNombre)+1); if ($bNombreDebut) { $csResultat = $csNombre . $csResultat; } else { $csResultat .= $csNombre; } return $csResultat; } function Milieu($Chaine, $Debut, $Longueur = null) { return F3449a00a($Chaine, $Debut, $Longueur); } function Majuscule($Chaine) { return utf8_strtoupper($Chaine); } function Minuscule($Chaine) { return utf8_strtolower($Chaine); } function Phonetique($sChaine) { return utf8_soundex($sChaine); } function Asc($Chaine) { return utf8_ord($Chaine); } function Caract($Valeur) { return utf8_chr($Valeur); } function Complete($Chaîne, $Taille, $Complétion=" ") { return Fd06ac608($Chaîne,$Taille,$Complétion); } function Droite($Chaine, $Longueur = null) { return F8e3171da($Chaine,$Longueur); } function Gauche($Chaine, $Longueur = null) { return Fb6596e39($Chaine,$Longueur); } function ExtraitChaine($Chaine, $Indice, $Separateur = TAB, $Depuis = DepuisDebut) { return F05ad8ed4($Chaine,$Indice,$Separateur,$Depuis); } function Taille($Chaine) { return utf8_strlen($Chaine); } function Val($Chaine, $Base = BaseChaineDefaut) { switch(utf8_strtolower(utf8_substr($Base,0,1))) { case BaseChaineOctal: $BaseNum = BaseNumeriqueOctal; break; case BaseChaineDecimal: $BaseNum = BaseNumeriqueDecimal; break; case BaseChaineHexadecimal: $BaseNum = BaseNumeriqueHexadecimal; break; default: $BaseNum = ($Base > 0) ? $Base : BaseNumeriqueDefaut; break; } return ($BaseNum == BaseNumeriqueDecimal) ? doubleval($Chaine) : base_convert($Chaine,$BaseNum,BaseNumeriqueDefaut); } function Contient($Chaine, $Recherche, $Option = DepuisDebut) { return FMK_Position($Chaine,$Recherche,1,$Option) > 0; } function Position($Chaine, $Recherche, $Debut = 1, $Option = DepuisDebut) { return FMK_Position($Chaine,$Recherche,$Debut,$Option); } function PositionOccurrence($Chaine, $Recherche, $Occurrence, $Option = DepuisDebut) { return F1e689842($Chaine, $Recherche, $Occurrence, $Option); } function Remplace($Chaine, $Recherche, $Remplacement, $Option = DepuisDebut) { return ($Recherche == "") ? $Chaine : preg_replace(F74ae1356($Recherche,$Option),$Remplacement,$Chaine); } function Repete($Chaine, $Repetition) { return utf8_str_repeat($Chaine, max(0,$Repetition)); } function SysEnvironnement($Option = null) { return Fb4408787($Option); } function SysRep() { return Faee3f2e8("SystemRoot"); } function SysVersion() { return PHP_VERSION; } function SysVersionWindows() { return Fda268110(); } function VersionWindows() { if (Faee3f2e8('PROCESSOR_ARCHITEW6432')!='') return '64'; $sArch = Faee3f2e8('PROCESSOR_ARCHITECTURE'); switch ($sArch) { case 'x86': return '32'; case 'x64': return '64'; default: return (strpos(Faee3f2e8('PROCESSOR_IDENTIFIER') . @php_uname('m'),'64')>0) ? '64' : '32'; } } function Execute($Traitement) { $Type = trtProcedure; $Objet = $Traitement; $Extension = F05ad8ed4($Traitement,1,SepObjetTraitement,DepuisFin); if (utf8_strlen($Extension) < utf8_strlen($Traitement)) { $Objet = utf8_substr($Objet,0,utf8_strlen($Objet) - utf8_strlen($Extension) - utf8_strlen(SepObjetTraitement)); switch(utf8_substr(utf8_strtoupper($Extension),0,3)) { case "INI": case "INF": $Type = trtInit; break; case "CLI": $Type = trtClic; break; default: $Objet=$Traitement; break; } } $Arg = array_slice(func_get_args(),1); array_unshift($Arg,$Objet,$Type,true,false); return call_user_func_array("ExecuteTraitement",$Arg); } function SansEspace($Chaine) { return utf8_trim($Chaine); } function SansCaractere($Chaine,$sCaracteres) { return utf8_trim($Chaine,$sCaracteres); } function CompleteRep($sChaine, $Separateur = SeparateurRepertoire) { return F0ac3fb91( $sChaine , $Separateur ); } function DecompleteRep( $sChaine ) { return Fcb67c520( $sChaine ); } function TypeVar(&$Variable) { if (is_object($Variable)) { return $Variable->F46a8f50b(); } if ( is_bool($Variable) ) return wlBooleen; if ( is_int($Variable) ) { return ((PHP_INT_SIZE === 8) ? wlEntier_8 : wlEntier_4); } if ( is_double($Variable) ) return wlReel; if ( is_string($Variable) ) return wlChaine; if ( is_array($Variable) ) return wlTableau; return wlVariant; } function TypeVariable($Variable) { if ( is_bool($Variable) ) return 17; if ( is_int($Variable) ) return 3; if ( is_double($Variable) ) return 8; if ( is_string($Variable) ) return 12; return 0; } function VariantConvertit($Variable, $Type) { switch ($Type) { case wlBooleen : return settype($Variable,"boolean"); case wlEntier : return settype($Variable,"integer"); case wlReel : return settype($Variable,"double"); case wlChaine : return settype($Variable,"string"); default : return false; } } function TexteVersHTML($sChaine) { if(!isset($sChaine) || empty($sChaine)) { return ""; } $sChaine = utf8_htmlentities($sChaine, ENT_COMPAT); $sChaine = utf8_str_replace("\n",'<br>',utf8_str_replace(RC,"\n",$sChaine)); if (utf8_strpos($sChaine,chr(133))!==false) $sChaine = utf8_str_replace(chr(133),'&#133;',$sChaine); return $sChaine; } define('HTMLVERSTEXTE_HTMLTAGS_PARTICULIERS','<DD><BR><UL><OL><LI><H1><H2><H3><H4><H5><H6><DL><DT><TABLE><TR><TD>'); define('HTMLVERSTEXTE_HTMLTAGS_DEBUG_STRIPTAGS','<A><P><PRE>'); define('HTMLVERSTEXTE_HTMLTAGS_ALLOWED',HTMLVERSTEXTE_HTMLTAGS_PARTICULIERS.HTMLVERSTEXTE_HTMLTAGS_DEBUG_STRIPTAGS); define('HTMLVERSTEXTE_HTMLTAGS_DD',TAB); define('HTMLVERSTEXTE_HTMLTAGS_BR',RC); define('HTMLVERSTEXTE_HTMLTAGS_UL',TAB); define('HTMLVERSTEXTE_HTMLTAGS__UL',RC.RC); define('HTMLVERSTEXTE_HTMLTAGS_OL',RC.TAB); define('HTMLVERSTEXTE_HTMLTAGS_LI',RC.TAB); define('HTMLVERSTEXTE_HTMLTAGS_H1',RC.RC); define('HTMLVERSTEXTE_HTMLTAGS__H1',RC.RC); define('HTMLVERSTEXTE_HTMLTAGS_H2',RC); define('HTMLVERSTEXTE_HTMLTAGS__H2',RC); define('HTMLVERSTEXTE_HTMLTAGS_H3',RC); define('HTMLVERSTEXTE_HTMLTAGS__H3',RC); define('HTMLVERSTEXTE_HTMLTAGS_H4',RC); define('HTMLVERSTEXTE_HTMLTAGS__H4',RC); define('HTMLVERSTEXTE_HTMLTAGS_H5',RC); define('HTMLVERSTEXTE_HTMLTAGS__H5',RC); define('HTMLVERSTEXTE_HTMLTAGS_H6',RC); define('HTMLVERSTEXTE_HTMLTAGS__H6',RC); define('HTMLVERSTEXTE_HTMLTAGS_DL',RC); define('HTMLVERSTEXTE_HTMLTAGS_DT',RC); define('HTMLVERSTEXTE_HTMLTAGS__TABLE',RC); define('HTMLVERSTEXTE_HTMLTAGS_TR',RC); define('HTMLVERSTEXTE_HTMLTAGS__TD',TAB); define('HTMLVERSTEXTE_HTMLTAGS__P',RC.RC); function Fce9b8235($string) { $string = preg_replace('~&#x([0-9a-f]+);~ei', '(hexdec("\\1")>=256) ? "?" : chr(hexdec("\\1"))', $string); $string = preg_replace('~&#([0-9]+);~e', '(intval("\\1")>=256) ? "?" : chr("\\1")', $string); $trans_tbl = utf8_get_html_translation_table(HTML_ENTITIES); $trans_tbl = array_flip($trans_tbl); return utf8_strtr($string, $trans_tbl); } function F75e04656($string) { $trans_tbl = utf8_get_html_translation_table(HTML_ENTITIES); $string = utf8_strtr($string, $trans_tbl); $nTaille = utf8_strlen($string); $sChaine = ''; for($i=0; $i<$nTaille; $i++) { $sChaine .= '&#'.utf8_ord($string[$i]).';'; } return $sChaine; } function Fe3f55bbd($string) { $tabRemplacementsFormattage = array(' ',TAB,RC,FinLigne); foreach ($tabRemplacementsFormattage as $sCaractere)if (utf8_strpos($string,$sCaractere)!==false) $string = utf8_str_replace($sCaractere,'&#'.utf8_ord($sCaractere).';',$string); return $string; } function HTMLVersTexte($sChaineHTML, $nCharset = null) { if (empty($sChaineHTML)) return ''; if (utf8_trim($sChaineHTML)=='') return ' '; $tabKnownTags = array( 'a','abbr','acronym','address','applet','area','b','base','basefont','bdo','big','blockquote','body','br','button','caption','center','cite','code','col','colgroup','dd','del','dfn','dir','div','dl','dt','em','fieldset','font','form','frame','frameset','head','h1','h2','h3','h4','h5','h6','hr','html','i','iframe','img','input','ins','kb','label','legend','li','link','map','menu','meta','noframes','noscript','object','ol','optgroup','option','p','param','pre','q','s','samp','script','select','small','span','strike','strong','style','sub','sup','table','tbody','td','textarea','tfoot','th','thead','title','tr','tt','u','ul','var', ); foreach ($tabKnownTags as $sTag) { $sChaineTag = utf8_stristr($sChaineHTML,'<'.$sTag); while($sChaineTag!==false) { $nTaille = utf8_strlen($sChaineHTML); $nPosDebugContenu = utf8_strpos($sChaineTag,'>'); $nPosDebugContenu = intval($nPosDebugContenu) + ($nTaille - utf8_strlen($sChaineTag) + 1); $sChaineContenuTag = utf8_substr($sChaineHTML,$nPosDebugContenu); $nPosFinTag = utf8_stristr($sChaineContenuTag,'</'.$sTag); if ($nPosFinTag!==false) { $nPosFinTag = utf8_strlen($sChaineContenuTag) - utf8_strlen($nPosFinTag); $sChaineContenuTag = utf8_substr($sChaineContenuTag,0,$nPosFinTag); } $nLongueurOrigine = utf8_strlen($sChaineContenuTag); if( ($sTag=='pre') || ($sTag=='blockquote') ) { $sChaineContenuTag = Fe3f55bbd($sChaineContenuTag); } else { $sChaineContenuTag = utf8_trim($sChaineContenuTag); } $sChaineHTML = utf8_substr_replace($sChaineHTML,$sChaineContenuTag,$nPosDebugContenu,$nLongueurOrigine); $sChaineTag = utf8_stristr(utf8_substr($sChaineHTML,$nPosDebugContenu),'<'.$sTag); } } $sChaineHTML = utf8_str_replace("\n",' ',utf8_str_replace(RC,' ',utf8_str_replace(TAB,'',$sChaineHTML))); while(utf8_strpos($sChaineHTML,'  ')!==false) $sChaineHTML = utf8_str_replace('  ',' ',$sChaineHTML); $sChaineEntite=$sChaineHTML; $tabOperations = array('SCRIPT'=>'','STYLE'=>'','HEAD'=>'','SELECT'=>'','BUTTON'=>'','TEXTAREA'=>''); foreach ($tabOperations as $sTag=>$Rempl) { $sChaineEntite = preg_replace('/<('.$sTag.')([^>]*>)([^\/\1]*)(<\/\1)([^>]*>)/'.UNICODE_REGEXP.'i',$Rempl,$sChaineEntite); } while( (($nPosDebut=utf8_strpos($sChaineEntite,'<!--'))!==false) && (($nPosFin=utf8_strpos($sChaineEntite,'-->',$nPosDebut))!==false) ) { $sChaineEntite = utf8_substr($sChaineEntite,0,$nPosDebut) . utf8_substr($sChaineEntite,$nPosFin+3); } $tabOperations = array('TABLE'=>'TR','TR'=>'TD','LI'=>'LI'); foreach ($tabOperations as $sTag => $sTag2) { $sChaineEntite = preg_replace('/<('.$sTag.')([^>]*>)([^'.$sTag2.']*)(<'.$sTag2.')([^>]*>)/'.UNICODE_REGEXP.'i','<'.$sTag.'><'.$sTag2.'>',$sChaineEntite); $sChaineEntite = preg_replace('/<(\/'.$sTag2.')([^>]*>)([^\/'.$sTag.']*)(<\/'.$sTag.')([^>]*>)/'.UNICODE_REGEXP.'i','</'.$sTag2.'></'.$sTag.'>',$sChaineEntite); } $tabOperations = array('TD','TR','LI'); foreach ($tabOperations as $sTag) { $sChaineEntite = preg_replace('/<(\/'.$sTag.')([^>]*>)([^'.$sTag.']*)(<'.$sTag.')([^>]*>)/'.UNICODE_REGEXP.'i','</'.$sTag.'><'.$sTag.'>',$sChaineEntite); } $sChaineHTML = $sChaineEntite; $sChaineHTMLpropre = ''; $nLen=utf8_strlen($sChaineHTML); $bDansBalise1=false; $bDansBalise2=false; $bAuMoinsUneBalise=false; $sTexteBalise1=''; $sTexteBalise2=''; $sTexteEntreBalise=''; for($i=0;$i<$nLen;++$i) { switch($c=$sChaineHTML[$i]) { case '<': { $bAuMoinsUneBalise=true; if (empty($sTexteBalise1)) { $bDansBalise1=true; $sTexteBalise1='<'; $sChaineHTMLpropre .= utf8_trim($sTexteEntreBalise); $sTexteEntreBalise=''; } else { if ($bDansBalise1) { $sTexteEntreBalise.= $sTexteBalise1; $bDansBalise1=true; $sTexteBalise1='<'; } elseif ($bDansBalise2) { $sTexteEntreBalise.=$sTexteBalise2; $bDansBalise2=true; $sTexteBalise2='<'; } else { $bDansBalise2=true; $sTexteBalise2='<'; } } } break; case '>': { if (empty($sTexteBalise2)) { $bDansBalise1=false; $sTexteBalise1.='>'; if ( (($n=utf8_strlen($sTexteBalise1))>2) && in_array(utf8_strtolower(utf8_trim(str_replace('/','',utf8_substr($sTexteBalise1,1,$n-2)))),$tabKnownTags) ) { $sChaineHTMLpropre.=$sTexteEntreBalise; $sTexteEntreBalise=''; } else { $sTexteEntreBalise = $sTexteBalise1; $sTexteBalise1 = ''; } } else { $bDansBalise2=false; $sTexteBalise2.='>'; if ( (($n=utf8_strlen($sTexteBalise2))>2) && in_array(utf8_strtolower(utf8_trim(str_replace('/','',utf8_substr($sTexteBalise2,1,$n-2)))),$tabKnownTags) ) { if ($sTexteBalise1[1] != '/') $sTexteEntreBalise = utf8_ltrim($sTexteEntreBalise); $sChaineHTMLpropre.= $sTexteBalise1.($sTexteEntreBalise).$sTexteBalise2; $sTexteBalise1=''; $sTexteBalise2=''; $sTexteEntreBalise=''; } else { $sTexteEntreBalise .= $sTexteBalise2; $sTexteBalise2 = ''; } } } break; default: if ($bDansBalise2) { $sTexteBalise2.=$c; } elseif ($bDansBalise1) { $sTexteBalise1.=$c; } elseif (false==$bAuMoinsUneBalise) { $sChaineHTMLpropre.=$c; } else { $sTexteEntreBalise.=$c; } } } $sChaineHTMLpropre = utf8_trim($sChaineHTMLpropre); $sChaineEntite = utf8_html_entity_decode($sChaineHTMLpropre,ENT_QUOTES); $sChaineEntite = Fce9b8235($sChaineEntite); $sChaineTexte = $sChaineEntite; while(($nPos = utf8_strpos($sChaineTexte,'<'))!==false) { $nPosFin = utf8_strpos($sChaineTexte,'>',$nPos+1); $nPosFinErreur = utf8_strpos($sChaineTexte,'<',$nPos+1); if ( ($nPosFinErreur!==false) && ($nPosFinErreur<$nPosFin) ) { $nPosFin = min($nPosFinErreur-1,$nPosFin); $sBalise = utf8_substr($sChaineTexte,$nPos+1,$nPosFin-$nPos-1); $bErreur = true; } else { if ($nPosFin===false) break; $sBalise = utf8_substr($sChaineTexte,$nPos+1,$nPosFin-$nPos-1); $nPosFinNom = utf8_strlen($sBalise); $nPosEspace = utf8_strpos($sBalise,' '); if ($nPosEspace!==false) $nPosFinNom = $nPosEspace; if (!empty($sBalise)) $sBalise = utf8_substr($sBalise,0,$nPosFinNom); $bErreur = false; } if (!isset($sBalise[0])) { if ($bErreur) { $sRemplacement = utf8_htmlentities('<'); --$nPosFin; } else { $sRemplacement = utf8_htmlentities('<>'); } } elseif (!(in_array(utf8_strtolower(utf8_substr($sBalise,$sBalise[0]=='/' ? 1 : 0)),$tabKnownTags))) { switch($sBalise) { case '/': $sRemplacement = ''; break; default : $sRemplacement = utf8_htmlentities('<'.$sBalise.'>'); } } else { if ($sBalise[0]==='/') $sCodeBalise = '_' . utf8_substr($sBalise,1); else $sCodeBalise = $sBalise; $sCodeBalise = utf8_trim(str_replace('/','',utf8_strtoupper($sCodeBalise))); $sNomConstante = 'HTMLVERSTEXTE_HTMLTAGS_' . $sCodeBalise; $sRemplacement = (defined($sNomConstante)) ? utf8_htmlentities(constant($sNomConstante)) : ''; } $sChaineTexte = utf8_substr($sChaineTexte,0,$nPos) . $sRemplacement . utf8_substr($sChaineTexte,$nPosFin+1); } $sChaineTexte = Fce9b8235($sChaineTexte); return $sChaineTexte; } function ChronoDebut($nNumeroChrono = 1) { global $TabVariableGlobaleVM; if(!isset($TabVariableGlobaleVM[CHRONO])) { $TabChrono = array(); $TabVariableGlobaleVM[CHRONO] = &$TabChrono; } else { $TabChrono = &$TabVariableGlobaleVM[CHRONO]; } $chrono = new FMK_Chronometre(); $chrono->F46e81903(); $TabChrono[$nNumeroChrono] = &$chrono; } function ChronoFin($nNumeroChrono = 1) { global $TabVariableGlobaleVM; $TabChrono = $TabVariableGlobaleVM[CHRONO]; if(!isset($TabChrono) || !isset($TabChrono[$nNumeroChrono])) { Erreur('ErreurWL_1_Param',"ErreurChronoInconnu", $nNumeroChrono, Fc34ec142("FCT_CHRONO_FIN")); } $Chrono = &$TabChrono[$nNumeroChrono]; return $Chrono->F1cd0aa55(); } function ChronoValeur($nNumeroChrono = 1) { global $TabVariableGlobaleVM; $TabChrono = $TabVariableGlobaleVM[CHRONO]; if(!isset($TabChrono) || !isset($TabChrono[$nNumeroChrono])) { Erreur('ErreurWL_1_Param',"ErreurChronoInconnu", $nNumeroChrono, Fc34ec142("FCT_CHRONO_VALEUR")); } $Chrono = $TabChrono[$nNumeroChrono]; return $Chrono->getValeur(); } function ChaineVersUTF8($sChaine, $nAlphabet = alphabetCourant) { return F3aa91d2c($sChaine, $nAlphabet); } function UTF8VersChaine($sUTF8,$nAlphabet = alphabetCourant) { return Fd9124f10($sUTF8,$nAlphabet); } function AnsiVersUnicode($sChaine, $nAlphabet = alphabetCourant) { return F244602c6($sChaine, $nAlphabet); } function UnicodeVersAnsi($sChaine, $nAlphabet = alphabetCourant, $sSubs = '?') { return F3ffa4a93($sChaine, $nAlphabet, $sSubs ); } function TraceDebut($nCaracteristique = trFenetre, $sFichierTrace = null) { if ($nCaracteristique & trCreation) { F0a2479f9($sFichierTrace,foCreation); } $clContexte =& F4a1887ce(); $clContexte->F4c8f9bd4('TraceMode',$nCaracteristique); if (isset($sFichierTrace)) { $clContexte->F4c8f9bd4('TraceFichier',$sFichierTrace); } } function TraceFin() { $clContexte =& F4a1887ce(); $clContexte->Ff9d5e233('TraceMode'); $clContexte->Ff9d5e233('TraceMessage'); if (Feef890d7()) { F71e92e30(); } } function VariableRAZ(&$Variable) { if (!is_object($Variable) || ($Variable->F39f2478a()===false)) { Erreur('ErreurGenerique',FMK_ChaineConstruit(Fc34ec142('ERR_PARAMETRE_VALEUR_INCORRECT'),Fc34ec142('FCT_VARIABLERAZ'))); } } function dbgInfo($nInformation, $nParametre = null, $_pile = null) { if ($nInformation === dbgLigne) { Fe81a7f9e('ERR_CONSTANTE_IGNOREE_PHP','CTE_DBGLIGNE'); return null; } if (!isset($nParametre)) $nParametre = dbgTraitementEnCours; $fmkPile = new FMK_Exception_Pile(true,$_pile); $fmkPile->F74a027ca(); $fmkPile->F74a027ca(); switch ($nInformation) { case dbgTraitement: case dbgNomComplet: $sNomFramework = utf8_str_replace('\\','',utf8_str_replace('/','',F8df7b692(realpath(WB_INCLUDE_PATH)))); $bFonctionSouhaitee = false; switch ($nParametre) { case dbgTraitementEnCours: $nEtage_A_Ignorer = 0; break; case dbgTraitementAppelant: $nEtage_A_Ignorer = 1; break; default: $nEtage_A_Ignorer = intval($nParametre); } while (!$bFonctionSouhaitee) { $sFichierSourceACP = realpath($fmkPile->F55ef34c4()); $sSource = utf8_str_replace('\\','',utf8_str_replace('/','',F8df7b692(dirname($sFichierSourceACP)))); if (!empty($sSource) && utf8_strpos( $sNomFramework , $sSource)!==false) { if ($nEtage_A_Ignorer==0) { $bFonctionSouhaitee = true; } else { --$nEtage_A_Ignorer; $fmkPile->Fa9342e22(); } } else { $fmkPile->Fa9342e22(); } } $sNomTraitement = $fmkPile->F537feeb3(); $Retour = (empty($sNomTraitement) || ($nInformation==dbgNomComplet)) ? $sNomTraitement : (Fc34ec142('MSG_PCODE') .' '. Fac06269c($sNomTraitement)) ; $fmkPile->Destructeur(); unset($fmkPile); return $Retour; break; case dbgPile: $tabInfoPile = $fmkPile->F0946bdc0(); if (!isset($tabInfoPile[PILE_FONCTION])) return ''; $sRetour = ''; $FORMAT_INFORMATION_NIVEAU_PILE = Fc34ec142('FORMAT_INFORMATION_NIVEAU_PILE'); $nNbAppels = count($tabInfoPile[PILE_FONCTION]); for($i = 0; $i<$nNbAppels; ++$i) { if (!empty($sRetour)) $sRetour.=RC; $sRetour.= utf8_sprintf($FORMAT_INFORMATION_NIVEAU_PILE,(Fc34ec142('MSG_PCODE') .' '. Fac06269c($tabInfoPile[PILE_FONCTION][$i])),$tabInfoPile[PILE_LIGNE][$i]); } return $sRetour; break; case dbgNomType: if (!isset($nParametre)) return null; return F83ff700b(constant('TYPEVAR_VERS_WL_'.$nParametre)); break; case dbgLigne: default: } return null; } function Nation($nNumeroNation = null) { $gclEnvLangue =& FMK_Langue_Alphabet(); if (!isset($nNumeroNation)) { return $gclEnvLangue->nNation; } else { $gclEnvLangue->nNation = $nNumeroNation; return $nNumeroNation; } } function NationVersLangue($nNation) { return F5bb5caf8($nNation); } function LangueVersNation($nLangue,$nSousLangue=0) { $nResultat = 0; switch($nLangue) { case LANGUE_ALLEMAND : $nResultat = NATION_ALLEMAND; break; case LANGUE_ANGLAIS : switch($nSousLangue) { case 1 : $nResultat = NATION_AMERICAIN; break; case 3 : $nResultat = NATION_AUSTRALIEN; break; case 6 : $nResultat = NATION_IRLANDAIS; break; default : $nResultat = NATION_ANGLAIS; break; } break; case LANGUE_ARABE : $nResultat = NATION_ARABE; break; case LANGUE_BULGARE : $nResultat = NATION_BULGARE ; break; case LANGUE_CHINOIS : switch($nSousLangue) { case 1 : $nResultat = NATION_CHINOIS_TRADITIONNEL; break; default : $nResultat = NATION_CHINOIS; break; } break; case LANGUE_COREEN : $nResultat = NATION_COREEN; break; case LANGUE_CROATE : switch($nSousLangue) { case 2 : case 3 : $nResultat = NATION_SERBE; break; default : $nResultat = NATION_CROATE; break; } break; case LANGUE_DANOIS: $nResultat = NATION_DANOIS; break; case LANGUE_ESPAGNOL : $nResultat = NATION_ESPAGNOL; break; case LANGUE_ESTONIEN: $nResultat = NATION_ESTONIEN; break; case LANGUE_FINNOIS : $nResultat = NATION_FINNOIS; break; case LANGUE_FRANCAIS : switch($nSousLangue) { case 3 : $nResultat = NATION_CANADIEN_FRANCAIS; break; default : $nResultat = NATION_CHINOIS; break; } break; case LANGUE_GREC : $nResultat = NATION_GREC; break; case LANGUE_HEBREU : $nResultat = NATION_HEBREUX; break; case LANGUE_HONGROIS : $nResultat = NATION_HONGROIS; break; case LANGUE_ISLANDAIS : $nResultat = NATION_ISLANDAIS; break; case LANGUE_ITALIEN: $nResultat = NATION_ITALIEN; break; case LANGUE_JAPONAIS : $nResultat = NATION_JAPONAIS; break; case LANGUE_LETTON : $nResultat = NATION_LETTON; break; case LANGUE_LITUANIEN : $nResultat = NATION_LITUANIEN; break; case LANGUE_NEERLANDAIS: $nResultat = NATION_NEERLANDAIS; break; case LANGUE_NORVEGIEN : $nResultat = NATION_NORVEGIEN; break; case LANGUE_POLONAIS : $nResultat = NATION_POLONAIS; break; case LANGUE_PORTUGAIS: switch($nSousLangue) { case 1 : $nResultat = NATION_PORTUGAIS_BRESILIEN; break; default : $nResultat = NATION_PORTUGAIS; break; } break; case LANGUE_ROUMAIN : $nResultat = NATION_ROUMAIN; break; case LANGUE_RUSSE : $nResultat = NATION_RUSSE; break; case LANGUE_SLOVAQUE : $nResultat = NATION_SLOVAQUE; break; case LANGUE_SLOVENE : $nResultat = NATION_SLOVENE; break; case LANGUE_SUEDOIS : $nResultat = NATION_SUEDOIS; break; case LANGUE_TCHEQUE: $nResultat = NATION_TCHEQUE; break; case LANGUE_THAI : $nResultat = NATION_THAI; break; case LANGUE_TURC : $nResultat = NATION_TURC; break; case LANGUE_VIETNAMIEN : $nResultat = NATION_VIETNAMIEN; break; case LANGUE_ALBANAIS : case LANGUE_ARMENIEN : case LANGUE_BIELORUSSE : case LANGUE_GEORGIEN : case LANGUE_MACEDONIEN : case LANGUE_OUZBEK : case LANGUE_UKRAINIEN : default : $nResultat = 0; break; } return $nResultat; } function LangueVersNom( $nLangue, $nSousLangue) { $strResultat = ''; switch($nLangue) { case LANGUE_ALLEMAND : $strResultat = Fc34ec142('VM_LANGUE_ALLEMAND'); break; case LANGUE_ANGLAIS : switch($nSousLangue) { case 1 : $strResultat = Fc34ec142('VM_LANGUE_AMERICAIN'); break; case 3 : $strResultat = Fc34ec142('VM_LANGUE_AUSTRALIEN'); break; case 6 : $strResultat = Fc34ec142('VM_LANGUE_IRLANDAIS'); break; default : $strResultat = Fc34ec142('VM_LANGUE_ANGLAIS'); break; } break; case LANGUE_ARABE : $strResultat = Fc34ec142('VM_LANGUE_ARABE'); break; case LANGUE_BULGARE : $strResultat = Fc34ec142('VM_LANGUE_BULGARE'); break; case LANGUE_CHINOIS : switch($nSousLangue) { case 1 : $strResultat = Fc34ec142('VM_LANGUE_CHINOIS_TRADITIONNEL'); break; default : $strResultat = Fc34ec142('VM_LANGUE_CHINOIS'); break; } break; case LANGUE_COREEN : $strResultat = Fc34ec142('VM_LANGUE_COREEN'); break; case LANGUE_CROATE : switch($nSousLangue) { case 2 : case 3 : $strResultat = Fc34ec142('VM_LANGUE_SERBE'); break; default : $strResultat = Fc34ec142('VM_LANGUE_CROATE'); break; } break; case LANGUE_DANOIS: $strResultat = Fc34ec142('VM_LANGUE_DANOIS'); break; case LANGUE_ESPAGNOL : $strResultat = Fc34ec142('VM_LANGUE_ESPAGNOL'); break; case LANGUE_ESTONIEN: $strResultat = Fc34ec142('VM_LANGUE_ESTONIEN'); break; case LANGUE_FINNOIS : $strResultat = Fc34ec142('VM_LANGUE_FINNOIS'); break; case LANGUE_FRANCAIS : switch($nSousLangue) { case 3 : $strResultat = Fc34ec142('VM_LANGUE_CANADIEN_FRANCAIS'); break; default : $strResultat = Fc34ec142('VM_LANGUE_FRANCAIS'); break; } break; case LANGUE_GREC : $strResultat = Fc34ec142('VM_LANGUE_GREC'); break; case LANGUE_HEBREU : $strResultat = Fc34ec142('VM_LANGUE_HEBREU'); break; case LANGUE_HONGROIS : $strResultat = Fc34ec142('VM_LANGUE_HONGROIS'); break; case LANGUE_ISLANDAIS : $strResultat = Fc34ec142('VM_LANGUE_ISLANDAIS'); break; case LANGUE_ITALIEN: $strResultat = Fc34ec142('VM_LANGUE_ITALIEN'); break; case LANGUE_JAPONAIS : $strResultat = Fc34ec142('VM_LANGUE_FRANCAIS'); break; case LANGUE_LETTON : $strResultat = Fc34ec142('VM_LANGUE_LETTON'); break; case LANGUE_LITUANIEN : $strResultat = Fc34ec142('VM_LANGUE_LITUANIEN'); break; case LANGUE_NEERLANDAIS: $strResultat = Fc34ec142('VM_LANGUE_NEERLANDAIS'); break; case LANGUE_NORVEGIEN : $strResultat = Fc34ec142('VM_LANGUE_NORVEGIEN'); break; case LANGUE_POLONAIS : $strResultat = Fc34ec142('VM_LANGUE_POLONAIS'); break; case LANGUE_PORTUGAIS: switch($nSousLangue) { case 1 : $strResultat = Fc34ec142('VM_LANGUE_PORTUGAIS_BRESILIEN'); break; default : $strResultat = Fc34ec142('VM_LANGUE_PORTUGAIS'); break; } break; case LANGUE_ROUMAIN : $strResultat = Fc34ec142('VM_LANGUE_ROUMAIN'); break; case LANGUE_RUSSE : $strResultat = Fc34ec142('VM_LANGUE_RUSSE'); break; case LANGUE_SLOVAQUE : $strResultat = Fc34ec142('VM_LANGUE_SLOVAQUE'); break; case LANGUE_SLOVENE : $strResultat = Fc34ec142('VM_LANGUE_SLOVENE'); break; case LANGUE_SUEDOIS : $strResultat = Fc34ec142('VM_LANGUE_SUEDOIS'); break; case LANGUE_TCHEQUE: $strResultat = Fc34ec142('VM_LANGUE_TCHEQUE'); break; case LANGUE_THAI : $strResultat = Fc34ec142('VM_LANGUE_THAI'); break; case LANGUE_TURC : $strResultat = Fc34ec142('VM_LANGUE_TURC'); break; case LANGUE_VIETNAMIEN : $strResultat = Fc34ec142('VM_LANGUE_VIETNAMIEN'); break; case LANGUE_ALBANAIS : case LANGUE_ARMENIEN : case LANGUE_BIELORUSSE : case LANGUE_GEORGIEN : case LANGUE_MACEDONIEN : case LANGUE_OUZBEK : case LANGUE_UKRAINIEN : default : $strResultat = ''; break; } return $strResultat; } function LangueVersAlphabet($nLangID,$nSousLangId) { switch($nLangID) { case LANGUE_JAPONAIS : return alphabetJaponais; case LANGUE_COREEN : return alphabetCoreen; case LANGUE_CHINOIS : return ( $nSousLangId==1 ? alphabetChinoisTraditionnel : alphabetChinois ); case LANGUE_HEBREU : return alphabetHebreu; case LANGUE_ARABE : return alphabetArabe; case LANGUE_GREC : return alphabetGrec; case LANGUE_TURC : return alphabetTurc; case LANGUE_VIETNAMIEN : return alphabetVietnamien; case LANGUE_THAI : return alphabetVietnamien; case LANGUE_TCHEQUE : case LANGUE_HONGROIS : case LANGUE_POLONAIS : case LANGUE_ROUMAIN : case LANGUE_SLOVAQUE : case LANGUE_SLOVENE : case LANGUE_ALBANAIS : case LANGUE_MACEDONIEN : return alphabetEuropeEst; case LANGUE_ARMENIEN : case LANGUE_GEORGIEN : return alphabetUTF8; case LANGUE_RUSSE : case LANGUE_BIELORUSSE : case LANGUE_BULGARE : case LANGUE_UKRAINIEN : return alphabetRusse; case LANGUE_CROATE : return ( $nSousLangId==3 ? alphabetRusse : alphabetEuropeEst ); case LANGUE_OUZBEK : return ( $nSousLangId==2 ? alphabetRusse : alphabetEuropeEst ); case LANGUE_LETTON : case LANGUE_ESTONIEN : case LANGUE_LITUANIEN : return alphabetBalte; } return alphabetAnsi; } function CertificatClientInfo($nInformation, $nSousInformation = -1) { $clInformation = ''; if ((0 > $nInformation) || (6 <= $nInformation)) { Fb9eb0792('ERR_BAD_CONSTANT', $nInformation); } elseif ((-1 > $nSousInformation) || (13 <= $nSousInformation)) { Fb9eb0792('ERR_BAD_CONSTANT', $nSousInformation); } else { switch ($nInformation) { case 0: Fb4f55279($clInformation); break; case 1: F6ebf6119($clInformation); break; case 2: F0bbb55ec($clInformation, $nSousInformation); break; case 3: Fe914b4b8($clInformation, $nSousInformation); break; case 4: Febbbcc85($clInformation, false); break; case 5: Febbbcc85($clInformation, true); break; default: } } return $clInformation; } function Fb4f55279( &$rclInformation) { $rclInformation = Faee3f2e8('CERT_COOKIE'); } function F6ebf6119( &$rclInformation) { $tabNomVariable_SerialNumber = array( 'CERT_SERIALNUMBER', 'SSL_CLIENT_M_SERIAL', 'SSL_CLIENT_CERT_SERIAL', ); $cszEnvironnement = ''; $nSource = F9fa5c586($tabNomVariable_SerialNumber,$cszEnvironnement); if (0 === $nSource) { while (utf8_substr($cszEnvironnement,0,3) === '00-') { $cszEnvironnement = utf8_substr($cszEnvironnement,3); } $cszEnvironnement = utf8_strtoupper(utf8_str_replace('-', '',$cszEnvironnement)); } $rclInformation = $cszEnvironnement; } function F0bbb55ec( &$rclInformation, $eSousInformation) { $tabNomVariable_Issuer = array( 'CERT_ISSUER', 'SSL_CLIENT_I_DN', 'SSL_CLIENT_IDN', ); $tabPrefixeApache_Issuer = array( 'SSL_CLIENT_I_DN_', 'SSL_CLIENT_I', ); F1b75e6fc($rclInformation, $tabNomVariable_Issuer, $tabPrefixeApache_Issuer, $eSousInformation); } function Fe914b4b8( &$rclInformation, $eSousInformation) { $tabNomVariable_Subject = array( 'CERT_SUBJECT', 'SSL_CLIENT_S_DN', 'SSL_CLIENT_DN', ); $tabPrefixeApache_Subject = array( 'SSL_CLIENT_S_DN_', 'SSL_CLIENT_', ); F1b75e6fc($rclInformation, $tabNomVariable_Subject, $tabPrefixeApache_Subject, $eSousInformation); } function F1b75e6fc( &$rclInformation, $tabNomVariables, $tabPrefixeApache, $eSousInformation) { $cszEnvironnement = ''; $nSource = F9fa5c586($tabNomVariables,$cszEnvironnement); if (-1 !== $nSource) { if (-1 == $eSousInformation) { if (0 === $nSource) { $cszEnvironnement = utf8_str_replace(', ', ',',$cszEnvironnement); } else { $cszEnvironnement = utf8_str_replace('/', ',',$cszEnvironnement); } } else { if (0 === $nSource) { F564ae908($cszEnvironnement, $eSousInformation); } else { F2e4438df($cszEnvironnement, $nSource, $tabPrefixeApache, $eSousInformation); } } } $rclInformation = $cszEnvironnement; } function F564ae908( &$rcszEnvironnement, $eSousInformation) { $tabIIS = array( 'C=', 'ST=', 'L=', 'O=', 'OU=', 'CN=', 'T=', 'I=', 'G=', 'S=', 'D=', 'UID=', 'E=', ); $tabValeurs = utf8_explode(', ',$rcszEnvironnement); $pszCle = $tabIIS[$eSousInformation]; $nCleLongeur = utf8_strlen($pszCle); $bTrouve = false; $nNbElements = count($tabValeurs); for ($nCle = 0; $nCle < $nNbElements; ++$nCle) { if (0 === utf8_strncmp($tabValeurs[$nCle], $pszCle, $nCleLongeur)) { $rcszEnvironnement = utf8_substr($tabValeurs[$nCle] , $nCleLongeur); $bTrouve = true; break; } } unset($nNbElements); if (false === $bTrouve) { if (1 === $eSousInformation) { F564ae908($rcszEnvironnement, 9); } else { $rcszEnvironnement = ''; } } } function F2e4438df(&$rcszEnvironnement, $nSource, $tabPrefixeApache, $eSousInformation) { $tabApache = array( 'C', 'ST', 'L', 'O', 'OU', 'CN', 'T', 'I', 'G', 'S', 'D', 'UID', 'Email', ); $rcszEnvironnement = Faee3f2e8($tabPrefixeApache[$nSource - 1] . $tabApache[$eSousInformation]); } function Febbbcc85( &$rclInformation, $bValide) { $tabNomVariable_PresentValide = array( 'CERT_FLAGS', 'SSL_CLIENT_VERIFY', ); $bValeur = false; $cszEnvironnement = ''; $nSource =F9fa5c586($tabNomVariable_PresentValide, $cszEnvironnement); if (0 === $nSource) { switch ( (isset($cszEnvironnement[0]) ? $cszEnvironnement[0] : '0') ) { default: case '0': $bValeur = false; break; case '1': $bValeur = true; break; case '2': $bValeur = false; break; case '3': $bValeur = (false === $bValide) ? true : false; break; } } elseif (1 == $nSource) { if (0 == utf8_strncmp($cszEnvironnement, 'FAILED', 6)) { $bValeur = (false == $bValide) ? true : false; } else if ( (0 === utf8_strncmp($cszEnvironnement, 'GENEROUS', 8)) || (0 === utf8_strncmp($cszEnvironnement, 'SUCCESS', 7))) { $bValeur = true; } else { $bValeur = false; } } else { $bValeur = false; } $rclInformation = VersChaine($bValeur); } ?>