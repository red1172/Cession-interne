<?php
//20.0.56.0 IHM/Champ/Liste/Table/TableAjax.php GF 
//VersionVI: 30F200066p
//(c) 2005-2012 PC SOFT  - Release
 if (!defined('__INC__IHM/Champ/Liste/Table/Table.php')) { define('__INC__IHM/Champ/Liste/Table/Table.php',true); include_once(WB_INCLUDE_PATH.'WDd4feee5389953c66852265e2f26ba4a3.php'); } class CTableAjax extends CTable { var $TabSelect; var $TabColonneAff; function CTableAjax() { parent::CTable(); $this->m_bEstAjax = true; $this->TabSelect = array(); $this->TabColonneAff = null; } function SetValeur($NewVal) { $this->Valeur = (int)($NewVal); $this->TabSelect = array($this->Valeur=>1); if(Feef890d7()) { F694db118($this->m_sNomPHP); } } function selected( $Indice ) { return (isset($this->TabSelect[$Indice]) && ($this->TabSelect[$Indice]) ); } function Fc8e0ba0f() { return $this->TabSelect; } function F3fee29dd($selection) { $this->TabSelect = array(); if(isset($selection) && count($selection) > 0) { foreach ($selection as $nIndiceAjax) { $nIndice = $nIndiceAjax + 1; $this->TabSelect[$nIndice] = 1; } $this->Valeur = key($this->TabSelect); } else { $this->Valeur = -1; } } function Fcfb6d1e2( $ELEMENT, $Indice=-1 ) { $Indice = parent::Fcfb6d1e2($ELEMENT, $Indice); if(isset($this->TabSelect) && !empty($this->TabSelect)) { $nNbLignes = count($this->TabSelect); for($i=$nNbLignes;$i>=$Indice;--$i) { if(isset($this->TabSelect[$i])) { $this->TabSelect[$i+1] = $this->TabSelect[$i]; $this->TabSelect[$i] = 0; } } } } function TableSupprime($Indice=-1) { if ($Indice == -1) { $Indice = $this->ListeSelect(); } parent::TableSupprime($Indice); if (isset($this->TabSelect[$Indice]) && !isset($this->TabLigne[$Indice])) $this->TabSelect[$Indice] = 0; $nNbLignes = $this->F1ac18ca4(); for($i=$Indice+1;$i<$nNbLignes;++$i) { if (isset($this->TabSelect[$i])) { $this->TabSelect[$i-1] = $this->TabSelect[$i]; $this->TabSelect[$i] = 0; } } if($this->Valeur == $Indice) { if(empty($this->TabSelect)) { $this->Valeur = -1; } else { $this->Valeur = key($this->TabSelect); } } } function F70e1a3ed($selection) { if($this->Etat == ETAT_CHAMP_AFF_SANS_SEL || $this->nModeSelection == MODE_SELECTION_SANS) { return; } if(isset($selection) && !empty($selection)) { if($this->nModeSelection == MODE_SELECTION_SIMPLE) { $this->Valeur = $selection[0]; $this->TabSelect = array($this->Valeur=>1); } else { if (parent::ListeSelect() == -1) { $this->Valeur = $selection[0]; } $nNbElement = $this->F1ac18ca4(); foreach ($selection as $Indice) { if($Indice > 0 && $Indice <= $nNbElement) { $this->TabSelect[$Indice] = 1; } } } } else if($this->nModeSelection == MODE_SELECTION_MULTI) { $this->TabSelect = array_fill(1,$this->F1ac18ca4(),1); } } function ListeSelectPlus() { $selection = func_get_args(); $this->F70e1a3ed($selection); if(Feef890d7()) { F694db118($this->m_sNomPHP); } } function TableSelectPlus() { $selection = func_get_args(); $this->F70e1a3ed($selection); if(Feef890d7()) { F694db118($this->m_sNomPHP); } } function TableSupprimeSelect() { $tabIndices = $this->TabSelect; krsort($tabIndices); foreach( $tabIndices as $nIndice => $bSelect) { if (!$bSelect) continue; $this->TableSupprime($nIndice); } $this->TableSelectMoins(); } function ListeSelectMoins() { $deselection = func_get_args(); if (isset($deselection[0]) && is_array($deselection[0])) $deselection = $deselection[0]; if ((!empty($this->TabSelect)) || !isset($deselection) || empty($deselection) || $deselection[0] == -1) { $this->TabSelect = array(); $this->Valeur = -1; } else { foreach (array_keys($this->TabSelect) as $nIndice) { if (in_array($nIndice,$deselection)) { $this->TabSelect[$nIndice] = 0; } } } if(Feef890d7()) { F694db118($this->m_sNomPHP); } } function ListeSelect ($IndiceSel=1) { if($this->Etat == ETAT_CHAMP_AFF_SANS_SEL || $this->nModeSelection == MODE_SELECTION_SANS) { return -1; } if(isset($this->TabSelect) && count($this->TabSelect) >= $IndiceSel) { $i=1; foreach (array_keys($this->TabSelect) as $nIndice) { if ($i==$IndiceSel) return $nIndice; ++$i; } } return -1; } function ListeSelectOccurrence() { if (!isset($this->TabSelect)) return 0; $nCount = 0; foreach ($this->TabSelect as $nEsTuSelectionne) { if ($nEsTuSelectionne==1) { ++$nCount; } } return $nCount; } function GetFirstIndex() { if(Feef890d7()) { return parent::GetFirstIndex(); } if(isset($this->TabSelect) && !empty($this->TabSelect)) { return key($this->TabSelect) - 1; } else { return -1; } } function Fdc05d49f( $ValeurHTTP ) { if($this->nModeSelection == MODE_SELECTION_SIMPLE) parent::Fdc05d49f($ValeurHTTP); } function F37bb1c9f($Valeur) { parent::F37bb1c9f($Valeur); $this->TabSelect = array(); $this->F70e1a3ed(array($Valeur)); } function F08139e12() { $sResultat = '<COLONNES>'; $tabIndiceMemVersIndiceAff = is_array($this->TabColonneAff) ? array_flip($this->TabColonneAff) : null; foreach($this->TabColonnes as $Colonne) { if (!isset($Colonne)) continue; $nIndiceVisible = (isset($tabIndiceMemVersIndiceAff) && isset($tabIndiceMemVersIndiceAff[$Colonne->IndiceColonne-1])) ? ($tabIndiceMemVersIndiceAff[$Colonne->IndiceColonne-1]) : $Colonne->IndiceColonne-1; $sResultat .= utf8_sprintf("<COLONNE ALIAS=\"%s\" SAISISSABLE=\"%s\" LIEN=\"%s\" TYPEWL=\"%s\" VISIBLE=\"%s\" TYPE=\"%s\" BULLE=\"%s\" TRI=\"%s\" RECHERCHE=\"%s\" FILTRE=\"%s\" DEPLACE=\"%s\" AJUSTABLE=\"%s\" />" , ($Colonne->Alias) , ($Colonne->F9503394f()?'1':'0') , ($Colonne->Fd44ca68d()?'1':'0') , ($Colonne->F46a8f50b()) , ($Colonne->Visible?'1':'0') , $Colonne->F4a917fa4() , ($Colonne->GetBulle()) , ($Colonne->Fb3d572af()?'1':'0') , ((string)(intval($Colonne->Fb3d572af())*(intval($Colonne->Ff9f8c930())+intval($Colonne->m_bAvecFiltre)+intval($Colonne->m_nFiltreEncours>0)))) , (string)($Colonne->m_nFiltreEncours) , ((string)$Colonne->m_eDeplaceInsere) . ($nIndiceVisible+1 != $Colonne->IndiceColonne ? ('" POSAFFICHE="'.$nIndiceVisible) : '') , ($Colonne->F66cc6b76()?'1':'0') ); } $sResultat .= "</COLONNES>"; return $sResultat; } function F7ba80b22($nIndiceDepart, $nNbLigne, &$nNbElementsVisibles) { $sResultat = "<LIGNES>"; $nNbColonnes = $this->m_nNbColonnesOuAttributs; $nNbLigneTotal = $this->F1ac18ca4() + intval($this->m_bSaisieCascade); if(isset($this->TabRupture) && isset($this->TabRupture[0])) { $nIndiceDepart=0; } $nNbLigne = min($nNbLigneTotal-$nIndiceDepart,$nNbLigne); if($this->F48dce54a()) { $this->SetMaxLignePage($nNbLigne); if (!$this->m_bSaisieCascade || $nIndiceDepart<$nNbLigneTotal-1) { $this->SetFirstIndex($nIndiceDepart); } } $bTableH = ($this->GetType()===ID_TABLEHIERARCHIQUE); if($nIndiceDepart >= 0 && $nIndiceDepart < $nNbLigneTotal) { $nIndex = 0; $nNbLignesVisibles = 0; if ($bTableH || $this->m_bAvecLigneInvisible) { $nPremierIndiceVisible = $nIndiceDepart; $nIndiceDepart = 0; } else { $nPremierIndiceVisible = 0; } $bFluxPlein = false; $nLignePosAbsolue = $nIndiceDepart-1; while(($nNbLigne == 0 || $nNbElementsVisibles < $nNbLigne) && $nIndex + $nIndiceDepart < $nNbLigneTotal) { if (!$bTableH) { $nIndiceRuptureVisibleSiRepliee = 0; $nLignePosAbsolue = $this->F0f3ddc5a($nLignePosAbsolue, $nIndiceRuptureVisibleSiRepliee); if (NUMLIGNE_INVALIDE != $nLignePosAbsolue) { $bRuptureHaut = $this->F46bf4b9c($nLignePosAbsolue,true); $bRuptureBas = $this->F46bf4b9c($nLignePosAbsolue,false); } } $sResultatLigne = ''; $nIndiceCorrige = $nIndex + $nIndiceDepart; $nIndiceVisible = $nNbLignesVisibles + $nIndiceDepart; if ($this->m_bSaisieCascade && ($nIndiceCorrige+1 == $nNbLigneTotal)) { $Ligne = $this->Fd135d1c5(array_fill(0,count($this->TabColonnes,COUNT_NORMAL),null)); } else { if (!$bTableH) { $nIndiceMemoire = $nLignePosAbsolue + 1; if (!isset($pclIterateur)) { $tmp_nMaxLignePage=$this->nMaxLignePage; $this->nMaxLignePage=0; $pclIterateur=&CIterateurChampLignes_s_pclCreate($this,$nIndiceLigneVisible); $this->nMaxLignePage=$tmp_nMaxLignePage; } while($pclIterateur->vnGetIndiceWL()!=$nIndiceMemoire && $pclIterateur->vbParcoursNonFini()) { $pclIterateur->vParcoursAvance(); } if (!array_key_exists($nIndiceMemoire,$this->TabLigne)) { Fa79fbf41('la ligne n existe pas à cet indice : ' . $nIndiceMemoire); ++$nIndex; continue; } $Ligne =& $this->TabLigne[$nIndiceMemoire]; if (!isset($Ligne) || $Ligne->Visible !== true) { ++$nIndex; continue; } } else { $nIndiceMemoire = $nIndiceCorrige+1; if (!isset($this->TabLigne[$nIndiceMemoire])) { ++$nIndex; continue; } $Ligne = $this->TabLigne[$nIndiceMemoire]; } } $this->m_nLigneAffichee = $nIndiceCorrige; $sResultatLigne .= '<LIGNE NUMERO="'.$nIndiceVisible.'" POSABSOLUE="'.($nIndiceMemoire-1).'"'; if ($bTableH) { $pclTableH =& getRef($this); if ($Ligne->m_nProfondeur>0) $sResultatLigne .= ' PROFONDEUR="'.$Ligne->m_nProfondeur.'"'; $bExistePlusProfond = (isset($this->TabLigne[$nIndiceCorrige+2]) && $this->TabLigne[$nIndiceCorrige+2]->m_nProfondeur>$Ligne->m_nProfondeur); if (!$bExistePlusProfond) { $sResultatLigne .= ' FEUILLE="1"'; } else { if ($Ligne->m_bDeroule) { $sResultatLigne .= ' DEROULE="1"'; } else { $nNbEnroulees=1; while(isset($this->TabLigne[$nIndiceCorrige+1+$nNbEnroulees]) && $this->TabLigne[$nIndiceCorrige+1+$nNbEnroulees]->m_nProfondeur>$Ligne->m_nProfondeur) { ++$nIndex; ++$nNbEnroulees; } $sResultatLigne .= ' NBENROULEES="'.($nNbEnroulees-1).'"'; } } $sImageEnrouleDeroule = $Ligne->m_bDeroule ? $Ligne->Fbb623779() : $Ligne->F8e7cc75c(); if (!empty($sImageEnrouleDeroule)) { $sResultatLigne .= ' IMAGEENROULEDEROULE="'.$sImageEnrouleDeroule.'"'; } } else { if (false !== $this->bLigneRepliee()) { $nIndiceRuptureVisibleSiRepliee = 0; $nLignePosAbsolueSuivante = $this->F0f3ddc5a($nLignePosAbsolue, $nIndiceRuptureVisibleSiRepliee); if (NUMLIGNE_INVALIDE === $nLignePosAbsolueSuivante) { $nLignePosAbsolueSuivante = $this->F1ac18ca4(); } $sResultatLigne .=' NBREPLIEES="' . ($nLignePosAbsolueSuivante - $nLignePosAbsolue) . '"'; } } $sResultatLigne .='>'; for($i=1;$i<=$nNbColonnes;$i++) { $sDescStyle = ""; $Style = null; if (!is_object($Ligne)) continue; if($Ligne->F4740c410($i)) { $Style = $Ligne->F44652a2c($i); } else if($Ligne->F2bd61426()) { $Style = $Ligne->Feb7b0854(); } if(isset($Style)) { $nCouleur = $Style->GetCouleur(); if($nCouleur != -1) { $sDescStyle = " COULEUR=\"".$nCouleur."\""; } $nCouleurFond = $Style->GetCouleurFond(); if($nCouleurFond != -1) { $sDescStyle .= " COULEURFOND=\"".$nCouleurFond."\""; } } $Colonne = $this->TabColonnes[$i]; if (!isset($Colonne)) continue; $sResultatLigne .= "<COLONNE".$sDescStyle.">".($Colonne->F2cd08980($nIndiceMemoire-1,$nIndiceVisible))."</COLONNE>"; } if (!$bTableH) XVERIFY($this->F0dcb9be9($sResultatLigne, $nLignePosAbsolue, $nIndiceVisible, $bRuptureHaut, $bRuptureBas)); ++$nNbLignesVisibles; $sResultatLigne .= "</LIGNE>"; $this->m_nLigneAffichee = null; if ($nIndiceCorrige>=$nPremierIndiceVisible) { ++$nNbElementsVisibles; $sResultat .= $sResultatLigne; } ++$nIndex; } $pclIterateur=null; unset($pclIterateur); $this->RestoreChamps(-1); } $sResultat .= "</LIGNES>"; return $sResultat; } function F7b5c0e7a() { return "<REFRESH RESETTABLE=\"1\"/>"; } function F0cc23d89() { $sResultat = "<SELECTIONS>"; if($this->Etat != ETAT_CHAMP_AFF_SANS_SEL) { foreach($this->TabSelect as $nIndice => $bSel) { if (!$bSel) continue; $sResultat .= ($nIndice!=-1) ? FMK_ChaineConstruit("<SELECTION>%1</SELECTION>", ($nIndice- 1)) : '' ; } } $sResultat .= "</SELECTIONS>"; return $sResultat; } function Fd937dfb3($nIndiceDepart, $nNbLigne, $nDebut=null) { if (!isset($nDebut)) { if (isset($this->m_nIndiceAffichage)) { $nDebut = $this->m_nIndiceAffichage; $this->m_nIndiceAffichage=null; } else { $nDebut = -1; } } $bTableHierarchique = ($this->GetType() == ID_TABLEHIERARCHIQUE); $sResultat = ''; if ($bTableHierarchique) { $pclTableH =& getRef($this); $sResultat .= ' COLHIERARCHIQUE="' . ($pclTableH->m_nNumColonneHierarchique-1) . '"'; if (''!==($sImage = $pclTableH->m_sImageDeroulee)) $sResultat .= ' IMAGEENROULE="' . $sImage . '"'; if (''!==($sImage = $pclTableH->m_sImageEnroulee)) $sResultat .= ' IMAGEDEROULE="' . $sImage . '"'; if (''!==($sImage = $pclTableH->m_sPlancheBoutonPlusMoins)) $sResultat .= ' IMAGEPLUSMOINS="' . $sImage . '"'; } $nIndiceColonneTriee = -1; if ($this->nIndiceColonneTri >= 0) $nIndiceColonneTriee=$this->nIndiceColonneTri; if (isset($this->m_tabIndiceColonneTri)&&isset($this->m_tabIndiceColonneTri[0])&&$this->m_tabIndiceColonneTri[0]>=0) $nIndiceColonneTriee=abs(intval($this->m_tabIndiceColonneTri[0])); if($nIndiceColonneTriee >= 0) { $sResultat .= FMK_ChaineConstruit(" TRI=\"%1\" SENS=\"%2\">", $nIndiceColonneTriee - 1, $this->nSensTri); } else { $sResultat .= ">"; } if($nDebut > 0) { $this->TabSelect = array($nDebut=>1); } $sResultat .= $this->F0cc23d89(); $sResultat .= $this->F08139e12(); $nNbElementsVisibles = 0; $sResultat .= $this->F7ba80b22($nIndiceDepart, $nNbLigne,$nNbElementsVisibles); if($nDebut > 0) { $sResultat = FMK_ChaineConstruit('<LISTE NOMBRE="%1" FIN="%2" TYPE="%3" DEBUT="%4" RUPTURES="%5" HAUTEURLIGNEVARIABLE="%6"', $this->F0de68f17(), '1', $this->F4a917fa4(), $nDebut - 1,VersChaine($this->Fa2c5b186()), VersChaine($this->m_bHauteurLigneVariable) ) . $sResultat; } else { $sResultat = FMK_ChaineConstruit('<LISTE NOMBRE="%1" FIN="%2" TYPE="%3" RUPTURES="%4" HAUTEURLIGNEVARIABLE="%5"', $this->F0de68f17(), "1", $this->F4a917fa4(),VersChaine($this->Fa2c5b186()), VersChaine($this->m_bHauteurLigneVariable)) . $sResultat; } $sResultat .= "</LISTE>"; return $sResultat; } function Fc4748612($params) { $Ligne = array(); $nIndiceLigneModif = $params["LIGNE"]+1; $nIndiceLigneModif = $nIndiceLigneModif + $this->Fcc72e355($nIndiceLigneModif); $nNbColonnes = count($this->TabColonnes,COUNT_NORMAL); $pclColonneModifiee = null; for($i=0;$i<$nNbColonnes;$i++) { if (!key_exists($i+1,$this->TabColonnes)) continue; $Colonne = &$this->TabColonnes[$i + 1]; if ((isset($params['C'.$i])) && $Colonne->F66cc6b76() && ($Colonne->GetType() != 50014) && ($Colonne->GetType() != 20006)) { $Ligne[$i] = $Colonne->Fa19e8373($params['C'.$i]); $ValeurOrigine = VersPrimitif($Colonne->GetValI($nIndiceLigneModif)); if ($ValeurOrigine != $Ligne[$i]) { $pclColonneModifiee =& $Colonne; } } } global $MaPage; F61288fff($MaPage,$params); $bModifSaisieCascade = ($this->m_bSaisieCascade && ($nIndiceLigneModif==$this->F0de68f17())); if($bModifSaisieCascade) { $this->F52613228(); if ($this->F48dce54a()) { $pclFichierParcours =& $this->FichierParcours; $pclRubriqueParcours =& $this->RubriqueParcours; if (!isset($pclFichierParcours) || !isset($pclRubriqueParcours)) return false; $pclFichierParcours->EnregUtilisateur = $pclFichierParcours->F06b47f2e(); if (!$pclFichierParcours->F08a30ecf(H_AFFECTE_PARCOURS)) return false; $this->TabPosition[$nIndiceLigneModif] = $pclFichierParcours->Fd172163b($pclRubriqueParcours); ++$this->nNbTotalEnreg; } $this->TabLigne[$nIndiceLigneModif] = $this->Fd135d1c5($Ligne); } $this->F8992c0d4($nIndiceLigneModif, $Ligne); $this->SetValeur($nIndiceLigneModif); if ($bModifSaisieCascade) { $bAvecPCodeAffLigne = (ExecuteTraitement($this->m_sNomPHP,trtAffichageLigne,false,true)===true); if ($bAvecPCodeAffLigne)$this->Fbe50ddf6($nIndiceLigneModif); if ($this->F48dce54a()) { if(!empty($this->sRubriqueMemorisee)&&$pclFichierParcours->Fec3a1557($pclRubriqueParcours)) { $this->TabValeurMemorisee[$nIndiceLigneModif-1] = $pclFichierParcours->EnregCourant[$this->sRubriqueMemorisee]; } } } $this->F03b82a62($nIndiceLigneModif); if (isset($pclColonneModifiee)) $pclColonneModifiee->Fc1a6d5f6(TRT_modification_Serveur); $this->Fc1a6d5f6(TRT_modification_Serveur); return $this->Fd937dfb3($nIndiceLigneModif - 1, $bModifSaisieCascade ? 2 : 1); } function& GetOccurrence() { $n = $this->F1ac18ca4(); return $n; } function pszGetAjaxInitInline() { FMK_Charge('WL/AJAX/Ajax.php',false); global $MaPage; $this->F8723e249($this->GetFirstIndex() + 1); F3ecf4149(true); global $WB_ContexteAjax; $WB_ContexteAjax = new FMK_ContexteAjax(); $return = utf8_str_replace("\r","\\r",utf8_str_replace("\n","\\n",addslashes(Fd02cc4ce($MaPage->bUTF8)."\n".$this->Fd937dfb3(0,$this->F1ac18ca4()+ intval($this->m_bSaisieCascade))))); F3ecf4149(false); return utf8_str_replace('<','\\x3C',utf8_str_replace('>','\\x3E',$return)); } } class CChampTableHierarchique extends CTableAjax { var $m_tabInfosContenu = null; var $m_nNumColonneHierarchique = 1; var $m_nIndiceParcours = 1; var $m_sImageEnroulee = ''; var $m_sImageDeroulee = ''; var $m_sImagePlusMoins = ''; var $m_sPlancheBoutonPlusMoins = ''; var $m_tabImageEnroulee = null; var $m_tabImageDeroulee = null; function CChampTableHierarchique() { parent::CTableAjax(); $this->m_tabImageEnroulee = array(); $this->m_tabImageDeroulee = array(); } function F56660bf0( $eTypeControleur) { return $this->Fea7a1f04('CControleurChampTable_Web' , $eTypeControleur); } function F4a917fa4() { return 35; } function& GetType() { return getRef(ID_TABLEHIERARCHIQUE); } function SetImageDeroulee($sImage) { $this->m_sImageDeroulee = $sImage; if(Feef890d7()) { F4c16799e($this->m_sNomPHP, PROP_INVALID_MIN); } } function& GetImageDeroulee() { $retour = $this->m_sImageDeroulee; return $retour; } function SetImageEnroulee($sImage) { $this->m_sImageEnroulee = $sImage; if(Feef890d7()) { F4c16799e($this->m_sNomPHP, PROP_INVALID_MIN); } } function& GetImageEnroulee() { $retour = $this->m_sImageEnroulee; return $retour; } function pszGetChampDataHTML() { $pclResultat = null; $pclResultatStats = null; $this->m_pclVue->F1f68ed08( new CPropCodeHTML(szPROP_CODEHTML . cPROP_CODEHTML_SEPARATEUR . PARTIE_CODEHTML_CHAMP_DATA), $pclResultat, $pclResultatStats ); return (isset($pclResultat)) ? $pclResultat : $pclResultatStats; } function InitRemplissage() { if (null === $this->m_tabInfosContenu) return; $nNiveau=0; while(array_key_exists(++$nNiveau,$this->m_tabInfosContenu)) { $tabInfoNiveau =& $this->m_tabInfosContenu[$nNiveau]; if (isset($tabInfoNiveau[5]) && !empty($tabInfoNiveau[5])) { $this->m_tabImageEnroulee[$nNiveau-1] = $tabInfoNiveau[5]; } if (isset($tabInfoNiveau[6]) && !empty($tabInfoNiveau[6])) { $this->m_tabImageDeroulee[$nNiveau-1] = $tabInfoNiveau[6]; } } parent::InitRemplissage(); } function SetSourceRemplissage($tabInfoLiaison, $sRubriqueParcours=null, $sRubriqueAffichee=null, $sRubriqueMemorisee=null, $bParcoursAsc=null, $sValeurRecherche=null, $nNbMaxLigne=null) { $this->m_tabInfosContenu = $tabInfoLiaison; if (!$this->Faa2ea0ef(0) || ''==$this->Fc2d70165(0)) { $this->m_tabInfosContenu=null; return; } F01ae1302(); $this->FichierParcours =& Fbad7a601($this->Fc2d70165(0)); $this->RubriqueParcours =& F2b6640f3($this->FichierParcours,$this->F097b10d0(0)); } function F01a71686() {return $this->m_tabInfosContenu[0];} function Faa2ea0ef($nNiveau) {if ($this->F01a71686()) $nNiveau=0; return array_key_exists($nNiveau+1,$this->m_tabInfosContenu);} function& Fc2d70165($nNiveau) {if ($this->F01a71686()) $nNiveau=0; return $this->m_tabInfosContenu[$nNiveau+1][0];} function& Fa98aecf0($nNiveau){if ($this->F01a71686()) $nNiveau=0; return $this->m_tabInfosContenu[$nNiveau+1][1];} function& F6122fefc($nNiveau) {if ($this->F01a71686()) $nNiveau=0; return $this->m_tabInfosContenu[$nNiveau+1][2];} function& F097b10d0($nNiveau) {if ($this->F01a71686()) $nNiveau=0; return $this->m_tabInfosContenu[$nNiveau+1][3];} function& F5eaaa473($nNiveau) {if ($this->F01a71686()) $nNiveau=0; return $this->m_tabInfosContenu[$nNiveau+1][4];} function F8e7cc75c($nNiveau) { if ($this->F01a71686()) $nNiveau=0; if (isset($this->m_tabImageEnroulee[$nNiveau])) return $this->m_tabImageEnroulee[$nNiveau]; return $this->m_sImageEnroulee; } function Fbb623779($nNiveau) { if ($this->F01a71686()) $nNiveau=0; if (isset($this->m_tabImageDeroulee[$nNiveau])) return $this->m_tabImageDeroulee[$nNiveau]; return $this->m_sImageDeroulee; } function __EnrouleDerouleLigne(&$pclLigne,$nIndice,$bDeroule) { $pclLigne->m_bDeroule = $bDeroule; } function __IncrementeProfondeur(&$pclLigne,$nIndice,$nInc=1) { $pclLigne->m_nProfondeur += $nInc; } function F08be8a7b($sLigne=null) { $nLigne = NUMLIGNE_INVALIDE; if (!isset($sLigne)) { $nLigne = $this->F63ff45c7(); } else { if (is_numeric($sLigne) && key_exists(intval($sLigne),$this->TabLigne)) { $nLigne = intval($sLigne); } else { $nLigne = $this->F14ceb4f2($sLigne); } } return $nLigne; } function F14ceb4f2($sChaineBranche) { $tabChaine = explode(TAB,$sChaineBranche); $tabStrlenChaine = array_map('utf8_strlen',$tabChaine); $nNbProfondeurs = count($tabChaine,COUNT_NORMAL); $nNbLigne = count($this->TabLigne,COUNT_NORMAL); $pclColonneArbre =& $this->GetColonne($this->m_nNumColonneHierarchique); if (!isset($pclColonneArbre)) return NUMLIGNE_INVALIDE; $nProfondeur = 0; for ($nLigne=1; $nLigne<=$nNbLigne && array_key_exists($nProfondeur,$tabChaine); ++$nLigne) { if ($pclColonneArbre->Fcffb5d2b($nLigne,$tabChaine[$nProfondeur],false,$tabStrlenChaine[$nProfondeur])) { ++$nProfondeur; if ($nNbProfondeurs === $nProfondeur) return $nLigne; } } return NUMLIGNE_INVALIDE; } function F0a0320a2($nNumLigne) { $nProfondeur = $this->TabLigne[$nNumLigne]->m_nProfondeur; while(array_key_exists(++$nNumLigne,$this->TabLigne) && $this->TabLigne[$nNumLigne]->m_nProfondeur>$nProfondeur) { } return $nNumLigne-1; } function F5b69c165($nIndiceVisible) { $nNumLigne = 0; $nNemeVisible = 0; while(array_key_exists(++$nNumLigne,$this->TabLigne)) { $pclLigne =& $this->TabLigne[$nNumLigne]; ++$nNemeVisible; if ($nNemeVisible===$nIndiceVisible) return $nNumLigne; if (false===$pclLigne->m_bDeroule) { $nNbEnroulees=1; while(isset($this->TabLigne[$nNumLigne+$nNbEnroulees]) && $this->TabLigne[$nNumLigne+$nNbEnroulees]->m_nProfondeur>$pclLigne->m_nProfondeur) { ++$nNumLigne; } } } return array_key_exists($nNumLigne,$this->TabLigne) ? $nNumLigne : NUMLIGNE_INVALIDE; } function Fe67060d9($nIndiceColonne, $bAsc) { $ColTri = is_numeric($nIndiceColonne) ? array( ($bAsc ? '+' : '-') . $this->TabColonnes[$nIndiceColonne]->Nom) : (is_array($nIndiceColonne) ? $nIndiceColonne : array($nIndiceColonne)); $this->Fdae46ed9(null,true,$ColTri); $nNbLignes = count($this->TabLigne,COUNT_NORMAL); for($iLigne=1; $iLigne<$nNbLignes; ++$iLigne) { $this->Fdae46ed9($iLigne,true,$ColTri); } } function Fcc72e355($nIndiceVisibleMax=null) { $nNbInvisibles = 0; $nNbLignesVisibles = 0; for($nIndex=1; isset($this->TabLigne[$nIndex]); ++$nIndex) { $Ligne =& $this->TabLigne[$nIndex]; if (!$Ligne->m_bDeroule) { while(isset($this->TabLigne[$nIndex+1]) && $this->TabLigne[$nIndex+1]->m_nProfondeur>$Ligne->m_nProfondeur) { ++$nNbInvisibles; ++$nIndex; } } else { ++$nNbLignesVisibles; if (isset($nIndiceVisibleMax) && $nNbLignesVisibles>=$nIndiceVisibleMax) break; } } return $nNbInvisibles; } function TableAjoute($ELEMENT = '') { $tab = func_get_args(); return call_user_func_array( array(&$this,'TableAjouteFils'),$tab); } function TableAjouteFils($sLigne) { $tabColonnes = array_slice(func_get_args(),1); if ($sLigne===null) { return call_user_func_array( array(&$this,'TableAjouteLigne'),$tabColonnes) ; } $nLigne = $this->F08be8a7b($sLigne); if ($nLigne === NUMLIGNE_INVALIDE) return; $nIndiceDernierFils = $this->F0a0320a2($nLigne); if(false===parent::TableInsere($tabColonnes,$nIndiceDernierFils+1)) { return false; } $this->TabLigne[$nIndiceDernierFils+1]->m_nProfondeur = $this->TabLigne[$nLigne]->m_nProfondeur+1; } function TableInsere($ELEMENT, $Indice=-1) { $tab = func_get_args(); return call_user_func_array( array(&$this,'TableInsereFils'),$tab); } function TableInsereFils($nIndice,$nPosition) { $nPosition=max(1,$nPosition); $tabColonnes = array_slice(func_get_args(),2); if ($nIndice===null) { $nIndice=1; $nProfondeurInsertion=0; } else { $nIndice = $this->F08be8a7b($nIndice); if (!isset($this->TabLigne[$nIndice])) return NUMLIGNE_INVALIDE; $nProfondeurInsertion = $this->TabLigne[$nIndice]->m_nProfondeur+1; } $nNbPosition = 0; for($nNumLigne=$nIndice; array_key_exists($nNumLigne,$this->TabLigne); ++$nNumLigne) { if ($this->TabLigne[$nNumLigne]->m_nProfondeur===$nProfondeurInsertion) ++$nNbPosition; if ($nNbPosition===$nPosition) { break; } } if(false===parent::TableInsere($tabColonnes,$nNumLigne)) return NUMLIGNE_INVALIDE; $this->TabLigne[$nNumLigne]->m_nProfondeur = $nProfondeurInsertion; return $nNumLigne; } function TableSupprime($nIndice=null) { if (!isset($nIndice)) return $this->TableSupprimeSelect(); return $this->TableSupprimeFils($nIndice); } function TableSupprimeFils($nIndice) { $nIndice = $this->F08be8a7b($nIndice); if ($nIndice === NUMLIGNE_INVALIDE) return; $nIndiceDernierFils = $this->F0a0320a2($nIndice); while($nIndiceDernierFils>=$nIndice) { parent::TableSupprime($nIndiceDernierFils--); } } function TableDeplaceBranche($nIndiceSource,$nIndiceDestination,$bDeplaceEnFils) { $nIndiceSource = $this->F08be8a7b($nIndiceSource); if ($nIndiceSource === NUMLIGNE_INVALIDE) return; if ($nIndiceDestination===null) { $nIndiceDestination = NUMLIGNE_INVALIDE; } else { $nIndiceDestination = $this->F08be8a7b($nIndiceDestination); if ($nIndiceDestination === NUMLIGNE_INVALIDE) return; $nIndiceFinDestination = $this->F0a0320a2($nIndiceDestination); if ($nIndiceFinDestination === NUMLIGNE_INVALIDE) return; } $nIndiceFinSource = $this->F0a0320a2($nIndiceSource); $nNbLignesDeplacement = 1+($nIndiceFinSource-$nIndiceSource); if ($nNbLignesDeplacement===0) return; $tabDeplacement = array_merge(array(0=>null),array_slice($this->TabLigne,$nIndiceSource-1,$nNbLignesDeplacement)); unset($tabDeplacement[0]); $nRetour = NUMLIGNE_INVALIDE; $tmp = array(0=>null); if ($nIndiceDestination==NUMLIGNE_INVALIDE) { $nRetour = 1; $nIncProfondeur = - $tabDeplacement[1]->m_nProfondeur; if ($nIncProfondeur!==0) array_walk($tabDeplacement,array($this,'__IncrementeProfondeur'),$nIncProfondeur); $tmp = array_merge($tmp,$tabDeplacement); } else { for ($i=1 ;array_key_exists($i,$this->TabLigne); ++$i) { if ($i>=$nIndiceSource && $i<=$nIndiceFinSource) continue; if ($bDeplaceEnFils ? $i===$nIndiceDestination : $i==$nIndiceFinDestination) { $tmp[] = $this->TabLigne[$i++]; $nRetour = count($tmp,COUNT_NORMAL); $nIncProfondeur = $this->TabLigne[$nIndiceDestination]->m_nProfondeur-$tabDeplacement[1]->m_nProfondeur + intval($bDeplaceEnFils); if ($nIncProfondeur!==0) array_walk($tabDeplacement,array($this,'__IncrementeProfondeur'),$nIncProfondeur); $tmp = array_merge($tmp,$tabDeplacement); } $tmp[] = $this->TabLigne[$i]; } } unset($tmp[0]); $this->TabLigne = $tmp; if(Feef890d7()) { F9402f437($this->GetNom(), $this); } return $nRetour; } function TableEchangeBranche($nIndiceSource,$nIndiceDestination) { $nIndiceSource = $this->F08be8a7b($nIndiceSource); if ($nIndiceSource === NUMLIGNE_INVALIDE) return; $nIndiceDestination = $this->F08be8a7b($nIndiceDestination); if ($nIndiceDestination === NUMLIGNE_INVALIDE) return; if ($nIndiceSource>$nIndiceDestination) { $tmp = $nIndiceSource; $nIndiceSource = $nIndiceDestination; $nIndiceDestination = $tmp; } $nIndiceFinSource = $this->F0a0320a2($nIndiceSource); $nIndiceFinDestination = $this->F0a0320a2($nIndiceDestination); if ($nIndiceFinSource>$nIndiceDestination) return; $nProfondeurSource = $this->TabLigne[$nIndiceSource]->m_nProfondeur; $nProfondeurDestination = $this->TabLigne[$nIndiceDestination]->m_nProfondeur; $tmp = array(0=>null); if ($nIndiceSource>1) { $tmp = array_merge($tmp,array_slice($this->TabLigne,0,1+($nIndiceFinSource-$nIndiceSource))); } $tabDestination = array_merge(array(0=>null),array_slice($this->TabLigne,$nIndiceDestination-1,1+($nIndiceFinDestination-$nIndiceDestination))); unset($tabDestination[0]); if ($nProfondeurDestination!==$nProfondeurSource) { array_walk($tabDestination,array($this,'__IncrementeProfondeur'),$nProfondeurSource-$nProfondeurDestination); } $tmp = array_merge($tmp,$tabDestination); unset($tabDestination); if ($nIndiceDestination>$nIndiceFinSource+1) { $tmp = array_merge($tmp,array_slice($this->TabLigne,$nIndiceFinSource-1,1+($nIndiceDestination-$nIndiceFinSource))); } $tabSource = array_merge(array(0=>null),array_slice($this->TabLigne,$nIndiceSource-1,1+($nIndiceFinSource-$nIndiceSource))); unset($tabSource[0]); if ($nProfondeurDestination!==$nProfondeurSource) { array_walk($tabSource,array($this,'__IncrementeProfondeur'),$nProfondeurDestination-$nProfondeurSource); } $tmp = array_merge($tmp,$tabSource); unset($tabSource); if (array_key_exists($nIndiceFinDestination+1,$this->TabLigne)) { $tmp = array_merge($tmp,array_slice($this->TabLigne,$nIndiceFinDestination)); } unset($tmp[0]); $this->TabLigne = $tmp; if(Feef890d7()) { F9402f437($this->GetNom(), $this); } } function TableEchangeLigne($nIndiceSource,$nIndiceDestination) { return $this->TableEchangeBranche($nIndiceSource,$nIndiceDestination); } function TableFilsOccurrence($nIndice) { $nIndice = $this->F08be8a7b($nIndice); if ($nIndice === NUMLIGNE_INVALIDE) return; $nIndiceDernierFils = $this->F0a0320a2($nIndice); return ($nIndiceDernierFils-$nIndice); } function Fdae46ed9($sBrancheTrie,$bATrier,$ptabColonnes=null) { if(!$bATrier) { $this->m_bEstTrie=false; return true; } $this->m_tabIndiceColonneTri = array(); if (!isset($ptabColonnes)||!array_key_exists(0,$ptabColonnes)) { $nNbColonnes=min(10,count($this->TabColonnes,COUNT_NORMAL)); for ($i=1; $i<=$nNbColonnes; ++$i) { $pclColonne =& $this->TabColonnes[$i]; if ($pclColonne===null || !$pclColonne->Visible) continue; $this->m_tabIndiceColonneTri[] = '+' . $pclColonne->IndiceColonne; } } else { if (!is_array($ptabColonnes)) { Fa79fbf41('on doit recevoir un tableau de colonnes à trier, pas une valeur scalaire'); return false; } foreach ($ptabColonnes as $sFormatTriColonne) { if ($sFormatTriColonne=='') continue; $pclColonne =& $this->Fd94d3bbc(substr($sFormatTriColonne,$bPrefixeSens=in_array($sFormatTriColonne[0],array('-','+')))); if ($pclColonne===null) continue; $this->m_tabIndiceColonneTri[] = ($bPrefixeSens?$sFormatTriColonne[0]:'') . $pclColonne->IndiceColonne; } } $this->nIndiceColonneTri = abs(intval( $this->m_tabIndiceColonneTri[0] )); $this->nSensTri = (intval( $this->m_tabIndiceColonneTri[0] )>0) ? 1 : 0; if ($this->F48dce54a()) { return $this->F7c500a79(abs($this->m_tabIndiceColonneTri[0]),$this->m_tabIndiceColonneTri[0]>0); } if ($sBrancheTrie===null) { $nBrancheTrie = NUMLIGNE_INVALIDE; $nProfondeur = NUMLIGNE_INVALIDE; } else { $nBrancheTrie = $this->F08be8a7b($sBrancheTrie); if (!array_key_exists($nBrancheTrie,$this->TabLigne)) return false; $nProfondeur = ($nBrancheTrie==NUMLIGNE_INVALIDE) ? NUMLIGNE_INVALIDE : $this->TabLigne[$nBrancheTrie]->m_nProfondeur; } $nNumLigne=max(0,$nBrancheTrie); $tabIndiceLigneTri = array(); while(array_key_exists(++$nNumLigne,$this->TabLigne) && $this->TabLigne[$nNumLigne]->m_nProfondeur>$nProfondeur) { $this->TabLigne[$nNumLigne]->F2a3fd3f7($nNumLigne); if ($this->TabLigne[$nNumLigne]->m_nProfondeur!==1+$nProfondeur) continue; $tabIndiceLigneTri[] =& $this->TabLigne[$nNumLigne]; } $nLigneFin=$nNumLigne; if(utf8_usort($tabIndiceLigneTri, array($this,'_procCompareLigne_Table'))) { $TabLigne = array(0); $nNbLignes = count($this->TabLigne,COUNT_NORMAL); for($nLigne=1; $nLigne<=$nNbLignes; ++$nLigne) { if ($nLigne<=$nBrancheTrie || $nLigne>=$nLigneFin) { $TabLigne[] = $this->TabLigne[$nLigne]; } else { $nLigneAvant = $nLigne; for($nIndiceDeplcaement = 0; array_key_exists($nIndiceDeplcaement,$tabIndiceLigneTri); ++$nIndiceDeplcaement) { $TabLigne[] = $this->TabLigne[$tabIndiceLigneTri[$nIndiceDeplcaement]->Indice]; $nProfondeur = $this->TabLigne[$tabIndiceLigneTri[$nIndiceDeplcaement]->Indice]->m_nProfondeur; ++$nLigne; for($nLigneDeplacee=1; (array_key_exists($tabIndiceLigneTri[$nIndiceDeplcaement]->Indice + $nLigneDeplacee,$this->TabLigne) && $this->TabLigne[$tabIndiceLigneTri[$nIndiceDeplcaement]->Indice + $nLigneDeplacee]->m_nProfondeur>$nProfondeur);++$nLigneDeplacee) { $TabLigne[] = $this->TabLigne[$tabIndiceLigneTri[$nIndiceDeplcaement]->Indice + ($nLigneDeplacee)]; ++$nLigne; } } if ($nLigneAvant === $nLigne) { Fa79fbf41('Rien de recopié pour effectuer le tri?'); } else { --$nLigne; } } } unset($TabLigne[0]); $this->TabLigne = $TabLigne; if(Feef890d7()) { F9402f437($this->GetNom(), $this); } return true; } return false; } function TableDeroule($sLigne=-1,$piRupture=null) { $nLigne = $this->F08be8a7b($sLigne); if ($nLigne === NUMLIGNE_INVALIDE) return; $pclLigne =& $this->TabLigne[$nLigne]; $pclLigne->SetEnroule(false); } function TableDerouleTout() { array_walk($this->TabLigne,array($this,'__EnrouleDerouleLigne'),true); if(Feef890d7()) { F4c16799e($this->m_sNomPHP, PROP_INVALID_MIN); } } function TableEnroule($sLigne=-1,$piRupture=null) { $nLigne = $this->F08be8a7b($sLigne); if ($nLigne === NUMLIGNE_INVALIDE) return; $pclLigne =& $this->TabLigne[$nLigne]; $pclLigne->SetEnroule(true); } function TableEnrouleTout() { array_walk($this->TabLigne,array($this,'__EnrouleDerouleLigne'),false); if(Feef890d7()) { F4c16799e($this->m_sNomPHP, PROP_INVALID_MIN); } } function TableEtatElement($sLigne=null) { $nLigne = $this->F08be8a7b($sLigne); if ($nLigne === NUMLIGNE_INVALIDE) return -1; return $this->TabLigne[$nLigne]->m_bDeroule ? 1 : 2; } function TableRecupereFils($sLigne,$nParcours) { $nLigne = $this->F08be8a7b($sLigne); if ($nLigne === NUMLIGNE_INVALIDE) return; if ($nParcours == 4096 || $nParcours == 'Premier') $this->m_nIndiceParcours = 1; else ++$this->m_nIndiceParcours; if (isset($this->TabLigne[$nLigne+$this->m_nIndiceParcours]) && $this->TabLigne[$nLigne+$this->m_nIndiceParcours]->m_nProfondeur>$this->TabLigne[$nLigne]->m_nProfondeur) return $nLigne+$this->m_nIndiceParcours; return NUMLIGNE_INVALIDE; } function TableRecupereParent($nNumLigne=NUMLIGNE_INVALIDE) { if (!array_key_exists($nNumLigne,$this->TabLigne) && !array_key_exists(($nNumLigne=$this->F63ff45c7()),$this->TabLigne)) return NUMLIGNE_INVALIDE; $nProfondeur = $this->TabLigne[$nNumLigne]->m_nProfondeur; if ($nProfondeur===0) return 0; while(array_key_exists(--$nNumLigne,$this->TabLigne) && $this->TabLigne[$nNumLigne]->m_nProfondeur>=$nProfondeur) { } if ($nNumLigne === NUMLIGNE_INVALIDE) return NUMLIGNE_INVALIDE; return $nNumLigne; } function TableTypeElement($sLigne=null) { $nLigne = $this->F08be8a7b($sLigne); if ($nLigne === NUMLIGNE_INVALIDE) return -1; if (isset($this->TabLigne[$nLigne+1]) && $this->TabLigne[$nLigne+1]->m_nProfondeur>$this->TabLigne[$nLigne]->m_nProfondeur) return 13; return 14; } } function TableTrieFils($sListeColonnesOuNomTable,$sBrancheTrie) { $sNomTable = null; $tabColonnes = null; $bATrier = true; if ($sListeColonnesOuNomTable=='') { $VMMgr =& F08aafbb0(); $sNomTableOu1ereColonne = $VMMgr->F9faba883(); } else { $sNomTableOu1ereColonne = substr($sListeColonnesOuNomTable,in_array($sListeColonnesOuNomTable[0],array('-','+')),(($nPos=strpos($sListeColonnesOuNomTable,TAB)) ? $nPos : strlen($sListeColonnesOuNomTable))); } $pclVM =& obtenirVM(); $sNomTableOu1ereColonne = $pclVM->F67af5b5c($sNomTableOu1ereColonne); if ($sNomTableOu1ereColonne=='') return false; $pclChamp =& F9abbf335($sListeColonnesOuNomTable,IND_CHAMP); if ($pclChamp===null) return false; switch ($pclChamp->GetType()) { case ID_TABLEHIERARCHIQUE: { $pclTableH =& $pclChamp; if (func_num_args()>2 && !is_string(func_get_arg(2))) { $bATrier = (bool)func_get_arg(2); } else { $tabColonnes = array_slice(func_get_args(),2); } } break; case 20001: case 20002: case 20003: case 20004: case 20005: case 20006: { $pclTableH =& $GLOBALS[$pclChamp->Table]; if ($pclTableH===null || $pclTableH->GetType() !== ID_TABLEHIERARCHIQUE) return false; $tabColonnes = explode(TAB,$sListeColonnesOuNomTable); $tabColonnes[0] = $pclChamp->Nom; } break; default: return false; } return $pclTableH->Fdae46ed9($sBrancheTrie,$bATrier,$tabColonnes); } ?>