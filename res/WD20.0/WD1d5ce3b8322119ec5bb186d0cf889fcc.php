<?php
//20.0.56.0 FMK/Pear/PEAR.php GF This product includes PHP, freely available from http://www.php.net/ :: --------------------------------------------------------------------                   The PHP License, version 2.02Copyright (c) 1999 - 2002 The PHP Group. All rights reserved.-------------------------------------------------------------------- Redistribution and use in source and binary forms, with or withoutmodification, is permitted provided that the following conditionsare met:  1. Redistributions of source code must retain the above copyright     notice, this list of conditions and the following disclaimer.    2. Redistributions in binary form must reproduce the above      copyright notice, this list of conditions and the following      disclaimer in the documentation and/or other materials provided     with the distribution.   3. The name \"PHP\" must not be used to endorse or promote products      derived from this software without prior permission from the      PHP Group.  This does not apply to add-on libraries or tools     that work in conjunction with PHP.  In such a case the PHP     name may be used to indicate that the product supports PHP.   4. The PHP Group may publish revised and/or new versions of the     license from time to time. Each version will be given a     distinguishing version number.     Once covered code has been published under a particular version     of the license, you may always continue to use it under the     terms of that version. You may also choose to use such covered     code under the terms of any subsequent version of the license     published by the PHP Group. No one other than the PHP Group has     the right to modify the terms applicable to covered code created     under this License.  5. Redistributions of any form whatsoever must retain the following     acknowledgment:     \"This product includes PHP, freely available from     http://www.php.net/\".  6. The software incorporates the Zend Engine, a product of Zend     Technologies, Ltd. (\"Zend\"). The Zend Engine is licensed to the     PHP Association (pursuant to a grant from Zend that can be     found at http://www.php.net/license/ZendGrant/) for     distribution to you under this license agreement, only as a     part of PHP.  In the event that you separate the Zend Engine     (or any portion thereof) from the rest of the software, or     modify the Zend Engine, or any portion thereof, your use of the     separated or modified Zend Engine software shall not be governed     by this license, and instead shall be governed by the license     set forth at http://www.zend.com/license/ZendLicense/. THIS SOFTWARE IS PROVIDED BY THE PHP DEVELOPMENT TEAM ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE PHPDEVELOPMENT TEAM OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISEDOF THE POSSIBILITY OF SUCH DAMAGE.-------------------------------------------------------------------- This software consists of voluntary contributions made by manyindividuals on behalf of the PHP Group.The PHP Group can be contacted via Email at group@php.net.For more information on the PHP Group and the PHP project, please see <http://www.php.net>. 
//VersionVI: 30F200066p
//(c) 2005-2012 PC SOFT  - Release
 if (!class_exists('PEAR')) { define('PEAR_ERROR_RETURN', 1); define('PEAR_ERROR_PRINT', 2); define('PEAR_ERROR_TRIGGER', 4); define('PEAR_ERROR_DIE', 8); define('PEAR_ERROR_CALLBACK', 16); define('PEAR_ERROR_EXCEPTION', 32); define('PEAR_ZE2', (function_exists('version_compare') && version_compare(zend_version(), "2-dev", "ge"))); if (substr(PHP_OS, 0, 3) == 'WIN') { define('OS_WINDOWS', true); define('OS_UNIX', false); define('PEAR_OS', 'Windows'); } else { define('OS_WINDOWS', false); define('OS_UNIX', true); define('PEAR_OS', 'Unix'); } $GLOBALS['_PEAR_default_error_mode'] = PEAR_ERROR_RETURN; $GLOBALS['_PEAR_default_error_options'] = E_USER_NOTICE; $GLOBALS['_PEAR_destructor_object_list'] = array(); $GLOBALS['_PEAR_shutdown_funcs'] = array(); $GLOBALS['_PEAR_error_handler_stack'] = array(); ini_set('track_errors', true); class PEAR { var $_debug = false; var $_default_error_mode = null; var $_default_error_options = null; var $_default_error_handler = ''; var $_error_class = 'PEAR_Error'; var $_expected_errors = array(); function PEAR($error_class = null) { $classname = get_class($this); if ($this->_debug) { print "PEAR constructor called, class=$classname\n"; } if ($error_class !== null) { $this->_error_class = $error_class; } while ($classname) { $destructor = "_$classname"; if (method_exists($this, $destructor)) { global $_PEAR_destructor_object_list; $_PEAR_destructor_object_list[] = &$this; break; } else { $classname = get_parent_class($classname); } } } function Fbc96c7bc() { if ($this->_debug) { utf8_printf("PEAR destructor called, class=%s\n", get_class($this)); } } function &F4a1870fb($class, $var) { static $properties; return $properties[$class][$var]; } function F521a00aa($func, $args = array()) { $GLOBALS['_PEAR_shutdown_funcs'][] = array($func, $args); } function F81ae42f2($data, $code = null) { if (is_object($data) && ( (utf8_strcasecmp(get_class($data) , 'pear_error') === 0) || is_subclass_of($data, 'pear_error') ) ) { if (is_null($code)) { return true; } elseif (is_string($code)) { return $data->getMessage() == $code; } else { return $data->getCode() == $code; } } return false; } function F229712ca($mode = null, $options = null) { if (isset($this)) { $setmode = &$this->_default_error_mode; $setoptions = &$this->_default_error_options; } else { $setmode = &$GLOBALS['_PEAR_default_error_mode']; $setoptions = &$GLOBALS['_PEAR_default_error_options']; } switch ($mode) { case PEAR_ERROR_RETURN: case PEAR_ERROR_PRINT: case PEAR_ERROR_TRIGGER: case PEAR_ERROR_DIE: case PEAR_ERROR_EXCEPTION: case null: $setmode = $mode; $setoptions = $options; break; case PEAR_ERROR_CALLBACK: $setmode = $mode; if ((is_string($options) && function_exists($options)) || (is_array($options) && method_exists(@$options[0], @$options[1]))) { $setoptions = $options; } else { trigger_error("invalid error callback", E_USER_WARNING); } break; default: trigger_error("invalid error mode", E_USER_WARNING); break; } } function F2850ba18($code = '*') { if (is_array($code)) { array_push($this->_expected_errors, $code); } else { array_push($this->_expected_errors, array($code)); } return sizeof($this->_expected_errors); } function Fb31edee5() { return array_pop($this->_expected_errors); } function Fa98a3d42($error_code) { $deleted = false; foreach ($this->_expected_errors AS $key => $error_array) { if (in_array($error_code, $error_array)) { unset($this->_expected_errors[$key][array_search($error_code, $error_array)]); $deleted = true; } if (0 == count($this->_expected_errors[$key])) { unset($this->_expected_errors[$key]); } } return $deleted; } function F2bb5171f($error_code) { $deleted = false; if ((is_array($error_code) && (0 != count($error_code)))) { foreach($error_code AS $key => $error) { if ($this->Fa98a3d42($error)) { $deleted = true; } else { $deleted = false; } } return $deleted ? true : $GLOBALS['PEAR']->Fb9eb0792("The expected error you submitted does not exist"); } elseif (!empty($error_code)) { if ($this->Fa98a3d42($error_code)) { return true; } else { return $GLOBALS['PEAR']->Fb9eb0792("The expected error you submitted does not exist"); } } else { return $GLOBALS['PEAR']->Fb9eb0792("The expected error you submitted is empty"); } } function &Fb9eb0792($message = null, $code = null, $mode = null, $options = null, $userinfo = null, $error_class = null, $skipmsg = false) { if (is_object($message)) { $code = $message->getCode(); $userinfo = $message->F620bf9c5(); $error_class = $message->getType(); $message = $message->getMessage(); } if (isset($this) && isset($this->_expected_errors) && sizeof($this->_expected_errors) > 0 && sizeof($exp = end($this->_expected_errors))) { if ($exp[0] == "*" || (is_int(reset($exp)) && in_array($code, $exp)) || (is_string(reset($exp)) && in_array($message, $exp))) { $mode = PEAR_ERROR_RETURN; } } if ($mode === null) { if (isset($this) && isset($this->_default_error_mode)) { $mode = $this->_default_error_mode; $options = $this->_default_error_options; } elseif (isset($GLOBALS['_PEAR_default_error_mode'])) { $mode = $GLOBALS['_PEAR_default_error_mode']; $options = $GLOBALS['_PEAR_default_error_options']; } } if ($error_class !== null) { $ec = $error_class; } elseif (isset($this) && isset($this->_error_class)) { $ec = $this->_error_class; } else { $ec = 'PEAR_Error'; } if ($skipmsg) { return new $ec($code, $mode, $options, $userinfo); } else { return new $ec($message, $code, $mode, $options, $userinfo); } } function &F52bb11dd($message = null, $code = null, $userinfo = null) { if (isset($this) && is_subclass_of($this, 'PEAR_Error')) { return $this->Fb9eb0792($message, $code, null, null, $userinfo); } else { return $GLOBALS['PEAR']->Fb9eb0792($message, $code, null, null, $userinfo); } } function F7e6ef5a5($mode, $options = null) { $stack = &$GLOBALS['_PEAR_error_handler_stack']; if (isset($this)) { $def_mode = &$this->_default_error_mode; $def_options = &$this->_default_error_options; } else { $def_mode = &$GLOBALS['_PEAR_default_error_mode']; $def_options = &$GLOBALS['_PEAR_default_error_options']; } $stack[] = array($def_mode, $def_options); if (isset($this)) { $this->F229712ca($mode, $options); } else { $GLOBALS['PEAR']->F229712ca($mode, $options); } $stack[] = array($mode, $options); return true; } function F3d1241df() { $stack = &$GLOBALS['_PEAR_error_handler_stack']; array_pop($stack); list($mode, $options) = $stack[sizeof($stack) - 1]; array_pop($stack); if (isset($this)) { $this->F229712ca($mode, $options); } else { $GLOBALS['PEAR']->F229712ca($mode, $options); } return true; } function F2db502d2($ext) { if (!extension_loaded($ext)) { if (OS_WINDOWS) { $suffix = '.dll'; } elseif (PHP_OS == 'HP-UX') { $suffix = '.sl'; } elseif (PHP_OS == 'AIX') { $suffix = '.a'; } elseif (PHP_OS == 'OSX') { $suffix = '.bundle'; } else { $suffix = '.so'; } return @dl('php_'.$ext.$suffix) || @dl($ext.$suffix); } return true; } } function _PEAR_call_destructors() { global $_PEAR_destructor_object_list; if (is_array($_PEAR_destructor_object_list) && sizeof($_PEAR_destructor_object_list)) { reset($_PEAR_destructor_object_list); while (false!==(list($k, $objref) = each($_PEAR_destructor_object_list))) { $classname = get_class($objref); while ($classname) { $destructor = "_$classname"; if (method_exists($objref, $destructor)) { $objref->$destructor(); break; } else { $classname = get_parent_class($classname); } } } $_PEAR_destructor_object_list = array(); } if (is_array($GLOBALS['_PEAR_shutdown_funcs']) AND !empty($GLOBALS['_PEAR_shutdown_funcs'])) { foreach ($GLOBALS['_PEAR_shutdown_funcs'] as $value) { call_user_func_array($value[0], $value[1]); } } } class PEAR_Error { var $error_message_prefix = ''; var $mode = PEAR_ERROR_RETURN; var $level = E_USER_NOTICE; var $code = -1; var $message = ''; var $userinfo = ''; var $backtrace = null; function PEAR_Error($message = 'unknown error', $code = null, $mode = null, $options = null, $userinfo = null) { if ($mode === null) { $mode = PEAR_ERROR_RETURN; } $this->message = $message; $this->code = $code; $this->mode = $mode; $this->userinfo = $userinfo; if (function_exists("debug_backtrace")) { $this->backtrace = debug_backtrace(); } if ($mode & PEAR_ERROR_CALLBACK) { $this->level = E_USER_NOTICE; $this->callback = $options; } else { if ($options === null) { $options = E_USER_NOTICE; } $this->level = $options; $this->callback = null; } if ($this->mode & PEAR_ERROR_PRINT) { if (is_null($options) || is_int($options)) { $format = "%s"; } else { $format = $options; } utf8_printf($format, $this->getMessage()); } if ($this->mode & PEAR_ERROR_TRIGGER) { trigger_error($this->getMessage(), $this->level); } if ($this->mode & PEAR_ERROR_DIE) { $msg = $this->getMessage(); if (is_null($options) || is_int($options)) { $format = "%s"; if (utf8_substr($msg, -1) != "\n") { $msg .= "\n"; } } else { $format = $options; } die(utf8_sprintf($format, $msg)); } if ($this->mode & PEAR_ERROR_CALLBACK) { if (is_string($this->callback) && utf8_strlen($this->callback)) { call_user_func($this->callback, $this); } elseif (is_array($this->callback) && sizeof($this->callback) == 2 && is_object($this->callback[0]) && is_string($this->callback[1]) && utf8_strlen($this->callback[1])) { @call_user_func($this->callback, $this); } } if (PEAR_ZE2 && $this->mode & PEAR_ERROR_EXCEPTION) { eval('throw $this;'); } } function F4f596ca9() { return $this->mode; } function F2b289fe1() { return $this->callback; } function getMessage() { return ($this->error_message_prefix . $this->message); } function getCode() { return $this->code; } function getType() { return get_class($this); } function F620bf9c5() { return $this->userinfo; } function Fb5644cdf() { return $this->F620bf9c5(); } function F24b005ec($frame = null) { if ($frame === null) { return $this->backtrace; } return $this->backtrace[$frame]; } function F4208dfe2($info) { if (empty($this->userinfo)) { $this->userinfo = $info; } else { $this->userinfo .= " ** $info"; } } function Fc424b461() { $modes = array(); $levels = array(E_USER_NOTICE => 'notice', E_USER_WARNING => 'warning', E_USER_ERROR => 'error'); if ($this->mode & PEAR_ERROR_CALLBACK) { if (is_array($this->callback)) { $callback = get_class($this->callback[0]) . '::' . $this->callback[1]; } else { $callback = $this->callback; } return utf8_sprintf('[%s: message="%s" code=%d mode=callback '. 'callback=%s prefix="%s" info="%s"]', get_class($this), $this->message, $this->code, $callback, $this->error_message_prefix, $this->userinfo); } if ($this->mode & PEAR_ERROR_PRINT) { $modes[] = 'print'; } if ($this->mode & PEAR_ERROR_TRIGGER) { $modes[] = 'trigger'; } if ($this->mode & PEAR_ERROR_DIE) { $modes[] = 'die'; } if ($this->mode & PEAR_ERROR_RETURN) { $modes[] = 'return'; } return utf8_sprintf('[%s: message="%s" code=%d mode=%s level=%s '. 'prefix="%s" info="%s"]', get_class($this), $this->message, $this->code, utf8_implode("|", $modes), $levels[$this->level], $this->error_message_prefix, $this->userinfo); } } } $GLOBALS['PEAR'] = new PEAR(); ?>