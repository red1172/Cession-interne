<?php
//20.0.56.0 WL/MAT/Mat.php GF 
//VersionVI: 30F200066p
//(c) 2005-2012 PC SOFT  - Release
 if (!defined('__INC__FMK/Chaine.php')) { define('__INC__FMK/Chaine.php',true); include_once(WB_INCLUDE_PATH.'WD55acb2e708e26f23cb8956cd93e98123.php'); } define("ERR_NONE",0,true); define("ERR_FINA1",1,true); define("ERR_FINA2",2,true); define("ERR_FINA3",3,true); define("ERR_FINA4",4,true); define("ERR_FINA5",5,true); define("ERR_FINA6",6,true); define("ERR_FINA7",7,true); define("ERR_FINA8",8,true); define("ERR_MATNOTEXIST",9,true); define("ERR_LIM",10,true); define("ERR_FINA9",11,true); define("ERR_FINA10",12,true); define("ERR_FINA11",13,true); define("ERR_FINA12",14,true); define("ERR_FINA13",15,true); define("ERR_STAT_NONE", 0); define("ERR_STAT1", 1); define("ERR_STAT2", 2); define("ERR_STAT3", 3); define("ERR_STAT4", 4); define("ERR_STAT5", 5); define("STAT_ARITHMETIQUE" , 0); define("STAT_GEOMETRIQUE" , 1); define("STAT_HARMONIQUE" , 2); define("PRECTERM",0.000001,true); define('FINA_INFINE' , 0); define('FINA_AMORCONST' , 1); define('FINA_ANNUCONST' , 2); $FinanceErreur = 0; $TabVariableGlobaleMAT = array(); $TabVariableGlobaleMAT = array(); $sNomDerniereFonctionMatrice = ""; $nStatErreur = 0; define("MATRICE",0); function MAT_SauveVariableGlobaleInterne(&$pclPage) { global $TabVariableGlobaleMAT; $pclPage->TabVarGlobaleInterneComposante["MAT"] = $TabVariableGlobaleMAT; } function MAT_RestaureVariableGlobaleInterne(&$pclPage) { global $TabVariableGlobaleMAT; if (!isset($pclPage->TabVarGlobaleInterneComposante["MAT"])) return; $TabVariableGlobaleMAT = $pclPage->TabVarGlobaleInterneComposante["MAT"]; } function Arrondi($value, $nbdec=0) { return round($value, $nbdec); } function ArrondiSuperieur($value, $nbdec=0) { if ($nbdec < 0) { Fb9eb0792('ERR_PNBDECINEG'); return 0; } $lMultiple = 1;for ($nIndice = 0; $nIndice < $nbdec; ++$nIndice) $lMultiple *=10; return ceil($value*$lMultiple)/$lMultiple; } function ArrondiInferieur($value, $nbdec=0) { if ($nbdec < 0) { Fb9eb0792('ERR_PNBDECINEG'); return 0; } $lMultiple = 1;for ($nIndice = 0; $nIndice < $nbdec; ++$nIndice) $lMultiple *=10; return floor($value*$lMultiple)/$lMultiple; } function WL_Abs($nValeur) { return abs($nValeur); } function ArcCosinus($Cos) { return rad2deg(acos($Cos)); } function ArcSinus($Sin) { return rad2deg(asin($Sin)); } function ArcTang($Tan) { return rad2deg(atan($Tan)); } function Cosinus($Angle) { return cos(deg2rad($Angle)); } function Sinus($Angle) { return sin(deg2rad($Angle)); } function Tang($Angle) { return sin(deg2rad($Angle)) / cos(deg2rad($Angle)); } function CoTang($Angle) { return 1 / (sin(deg2rad($Angle)) / cos(deg2rad($Angle))); } function Ln($Valeur) { return log($Valeur); } function WL_Log($Valeur) { return log10($Valeur); } function ETBinaire(&$Valeur1, &$Valeur2) { return Operateur(22834,$Valeur1,$Valeur2); } function OUBinaire(&$Valeur1, &$Valeur2) { return Operateur(22836,$Valeur1,$Valeur2); } function OuExclusifBinaire(&$Valeur1, &$Valeur2) { return Operateur(22848,$Valeur1,$Valeur2); } function NONBinaire(&$Valeur) { return Operateur(22594,$Valeur); } function PoidsFaible($nNumeric) { return (($nNumeric)&0xFFFF); } function PoidsFort($nNumeric) { return (($nNumeric)>>16); } function Modulo($Dividende, $Diviseur) { return $Dividende % $Diviseur; } function Puissance($Valeur, $Exposant) { return pow($Valeur,$Exposant); } function Racine($Valeur, $Ordre = 2) { if ($Ordre == 0) { Fe81a7f9e('ERR_PARAMETRE_VALEUR_INCORRECT','FCT_RACINE'); } $Resultat = pow(abs($Valeur),1 / $Ordre); if ($Valeur<0) $Resultat = -$Resultat; return $Resultat; } function Expo($Valeur) { return exp($Valeur); } function PartieDecimale($nValeur) { return abs($nValeur-intval($nValeur)); } function PartieEntiere($nValeur) { return intval($nValeur); } function Fb6e34eaf($Valeur) { global $FinanceErreur; if ((defined("INF") && ($Valeur == INF)) || ($Valeur === false)) { $FinanceErreur = ERR_LIM; return true; } return false; } function WL_Max() { $args = func_get_args(); return call_user_func_array('max',$args); } function WL_Min() { $args = func_get_args(); return call_user_func_array('min',$args); } function FinValActuelleNette( $nTaux, $sNomMatrice, $nIndice = 1, $bEstUneColonne = true) { if (empty($sNomMatrice)) return 0; if (!MatExiste($sNomMatrice)) return 0; F67cfd262(); $nNbElem= ($bEstUneColonne) ? MatNbLigne($sNomMatrice) : MatNbColonne($sNomMatrice); if($nNbElem==0) {Fdd46bacf(FMK_ChaineConstruit(F1ac3f040('ERR_PARAMETRE_VALEUR_INCORRECT'),F1ac3f040('FCT_FINVALACTUELLENETTE')));return 0;} for($nInd=0;$nInd<$nNbElem;$nInd++) { $dValeur = ($bEstUneColonne) ? MatLit($sNomMatrice,$nInd,$nIndice) : MatLit($sNomMatrice,$nIndice,$nInd); $dTemp=pow(1+$nTaux/100,$nInd+1); if($dTemp==0) {Fdd46bacf(FMK_ChaineConstruit(F1ac3f040('ERR_PARAMETRE_VALEUR_INCORRECT'),F1ac3f040('FCT_FINVALACTUELLENETTE')));return 0;} $dResult+=$dValeur/$dTemp; } return $dResult; } function FinAmortissement($sNomMatrice, $nTypeAmort, $nCapital = 0, $nTaux = 1, $nDuree = 1) { $sNomMatriceTravail = "__MatriceDeTravail__FinAmortissement"; F67cfd262(); if ( ($nTypeAmort!=FINA_INFINE)&&($nTypeAmort!=FINA_AMORCONST)&&($nTypeAmort!=FINA_ANNUCONST)) { Fdd46bacf(FMK_ChaineConstruit(F1ac3f040('ERR_PARAMETRE_VALEUR_INCORRECT'),F1ac3f040('FCT_FINAMORTISSEMENT'))); return false; } if ($nDuree == 0) { Fdd46bacf(FMK_ChaineConstruit(F1ac3f040('ERR_PARAMETRE_VALEUR_INCORRECT'),F1ac3f040('FCT_FINAMORTISSEMENT'))); return false; } $nDuree = intval($nDuree); if (MatExiste($sNomMatrice)) MatSupprime($sNomMatrice); MatCree($sNomMatriceTravail); if(!MatExiste($sNomMatriceTravail)) { return false; } if($nTaux==0) return true; switch($nTypeAmort) { case FINA_INFINE: F652031b7($sNomMatriceTravail,$nCapital,$nTaux/100,$nDuree); break; case FINA_AMORCONST: F8c7958ce($sNomMatriceTravail,$nCapital,$nTaux/100,$nDuree); break; case FINA_ANNUCONST: F69beb40c($sNomMatriceTravail,$nCapital,$nTaux/100,$nDuree); break; } if(EstErreurDetectee()) { MatSupprime($sNomMatriceTravail); return true; } MatCopie($sNomMatriceTravail,$sNomMatrice); return true; } function F652031b7($sNomMatrice, $nCapital, $nTaux, $nDuree) { if (empty($sNomMatrice)) return; if (!MatExiste($sNomMatrice)) return; $nTemp = $nTaux * $nCapital; for($i=0;i<$nDuree;$i++) { MatEcrit($sNomMatrice, $i+1, $i+1, 1); MatEcrit($sNomMatrice, $nCapital, $i+1, 2); MatEcrit($sNomMatrice, $nTemp, $i+1, 3); MatEcrit($sNomMatrice, 0, $i+1, 4); MatEcrit($sNomMatrice, $nTemp, $i+1, 5); } MatEcrit($sNomMatrice,$nCapital,$nDuree,4); MatEcrit($sNomMatrice,$nTemp+$nCapital,$nDuree,5); } function F8c7958ce($sNomMatrice, $nCapital, $nTaux, $nDuree) { if (empty($sNomMatrice)) return; if ($nDuree==0) return; if (!MatExiste($sNomMatrice)) return; $nTemp1=$nCapital/$nDuree; for($i=0;i<$nDuree;$i++) { $dTemp2=$nCapital-$i*$nTemp1; MatEcrit($sNomMatrice, $i+1, $i+1, 1); MatEcrit($sNomMatrice, $dTemp2, $i+1, 2); MatEcrit($sNomMatrice, $dTemp2*$nTaux,$i+1, 3); MatEcrit($sNomMatrice, $nTemp1, $i+1, 4); MatEcrit($sNomMatrice, $nTemp1+$dTemp2*$nTaux,$i+1,5); } } function F69beb40c($sNomMatrice, $nCapital, $nTaux, $nDuree) { if (empty($sNomMatrice)) return; if (!MatExiste($sNomMatrice)) return; $dTemp=pow(1+$nTaux,-$nDuree); if($dTemp==1) { Fdd46bacf(FMK_ChaineConstruit(F1ac3f040('ERR_PARAMETRE_VALEUR_INCORRECT'),F1ac3f040('FCT_FINAMORTISSEMENT'))); return; } $dTemp1=$nCapital*$nTaux/(1-$dTemp); $dTemp2=$nCapital*$nTaux; $dTemp3=$nCapital; for($i=0;i<$nDuree;$i++) { $dTemp3-=$dTemp1-$dTemp2; MatEcrit($sNomMatrice, $i+1, $i+1, 1); MatEcrit($sNomMatrice, $dTemp3, $i+1, 2); MatEcrit($sNomMatrice, $dTemp2, $i+1, 3); MatEcrit($sNomMatrice, $dTemp1-$dTemp2,$i+1, 4); MatEcrit($sNomMatrice, $dTemp1, $i+1, 5); $dTemp2+=($dTemp2-$dTemp1)*$nTaux; } } function FinAmortissementDegressif($Cout, $ValResi, $Duree, $Periode = 1, $Mois = 1) { global $FinanceErreur; $Val2 = 0; $Val3 = 0; $i = 0; $Temp = 0; $FinanceErreur=ERR_NONE; if($Duree==0) { $FinanceErreur=ERR_FINA1; return 0; } if($Cout==0) { $FinanceErreur=ERR_FINA8; return 0; } if(($Mois>12) || ($Mois==0)) { $FinanceErreur=ERR_FINA13; return 0; } if(($Mois==12) && ($Periode>$Duree)) { $FinanceErreur=ERR_FINA12; return 0; } if(($Mois<12) && $Periode>$Duree+1) { $FinanceErreur=ERR_FINA12; return 0; } $Temp=pow($ValResi/$Cout,1/$Duree); if (Fb6e34eaf($Temp)) return 0; $Taux=1-$Temp; $Taux=round($Taux,3); $Val2=$Cout*$Taux*(double)$Mois/12; if($Periode==1) return $Val2; for($i=2;$i<$Periode;$i++) { $Val3=($Cout-$Val2)*$Taux; $Val2+=$Val3; } if( $Mois<12 && $Periode==($Duree+1) ) { return ($Cout-$Val2)*$Taux / 12 *(12-$Mois); } return ($Cout-$Val2)*$Taux; } function FinAmortissementLineaire($Cout, $ValResi, $Duree) { global $FinanceErreur; $FinanceErreur=ERR_NONE; if($Duree==0) { $FinanceErreur=ERR_FINA1; return 0; } return ($Cout-$ValResi)/$Duree; } function FinErreur() { global $FinanceErreur; return $FinanceErreur; } function FinInteretPeriode($Capital = 0, $Taux = 1, $Periode = 1, $Duree = 1) { global $FinanceErreur; $Result = 0; $FinanceErreur=ERR_NONE; if($Duree==0) { $FinanceErreur=ERR_FINA1; return 0; } if($Periode>$Duree) { $FinanceErreur=ERR_FINA4; return 0; } $TauxReel=$Taux/100; if($Taux==0) { return 0; } else { $Temp=pow(1+$TauxReel,-$Duree); if (Fb6e34eaf($Temp)) return 0; if($Temp==1) { $FinanceErreur=ERR_FINA9; return 0; } $Val1=$Capital*$TauxReel/(1-$Temp); if (Fb6e34eaf($Val1)) return 0; $Result=$Capital*$TauxReel; if (Fb6e34eaf($Result)) return 0; if($Periode!=1) { for($i=1;$i<$Periode;$i++) { $Result+=($Result-$Val1)*$TauxReel; if (Fb6e34eaf($Result)) return 0; } } } return -$Result; } function FinNbVersement($ValRemb = 0, $Taux = 1, $Capital = 1) { global $FinanceErreur; $FinanceErreur=ERR_NONE; if($ValRemb==0) { $FinanceErreur=ERR_FINA6; return 0; } if( $Taux==0 ) { $Val = $Capital / (-$ValRemb); return $Val; } $TauxReel=$Taux/100; $Temp=$Capital*$TauxReel; if (Fb6e34eaf($Temp)) return 0; $Val1=abs(($ValRemb+$Temp)/$ValRemb); if (Fb6e34eaf($Val1)) return 0; $Val2=1+$TauxReel; if($Val2<=0) { $FinanceErreur=ERR_FINA7; return 0; } if($Val1<=0) { $FinanceErreur=ERR_FINA10; return 0; } $Val3=log($Val1)/log($Val2); if (Fb6e34eaf($Val3)) return 0; return -$Val3; } function FinTauxInteret($NbRemb, $MontRemb = 0, $MontEmp = 1, $TauxDep = -80, $TauxFin = 80, $Precision = 0.01) { global $FinanceErreur; $Val1 = 0; $Val2 = 0; $Val3 = 0; $Result = 0; if($MontRemb==0) { $FinanceErreur=ERR_FINA6; return 0; } $Result=$TauxDep; while($Result<=$TauxFin) { $Val1=($MontRemb-$MontEmp*($Result/100))/$MontRemb; if (Fb6e34eaf($Val1)) return 0; $Val2=1+($Result/100); if (Fb6e34eaf($Val2)) return 0; if(($Val1<=0) || ($Val2<=0)) { $FinanceErreur=ERR_FINA7; return 0; } $Val3=-log($Val1)/log($Val2); if (Fb6e34eaf($Val3)) return 0; $Diff = abs($Val3-$NbRemb); if( $Diff*(double)1000000<(double)5) { return $Result; } else if($Val3>$NbRemb) { if($Precision<=PRECTERM/10) { break; } return FinTauxInteret($NbRemb,$MontRemb,$MontEmp,$Result-$Precision,$Result,$Precision/10); } $Result+=$Precision; } if( abs($Result - $TauxFin) < $Precision ) { return $Result; } $FinanceErreur=ERR_FINA11; return 0; } function FinValActuelle($Remboursement = 0, $ValeurFuture = 0, $NbPeriode = 1, $Taux = 1, $Debut = true) { global $FinanceErreur; $Resultat = 0; $Temp = 0; $FinanceErreur=ERR_NONE; if($Taux==0) return -$ValeurFuture-$Remboursement*$NbPeriode; $Taux/=100; $Temp=pow(1+$Taux,(double)$NbPeriode); if (Fb6e34eaf($Temp)) return 0; if($Temp==0) { $FinanceErreur=ERR_FINA9; return 0; } $Resultat=$Remboursement*($Temp-1)/$Taux; if (Fb6e34eaf($Resultat)) return 0; if($Debut) $Resultat*=1+$Taux; if (Fb6e34eaf($Resultat)) return 0; $Resultat+=$ValeurFuture; if (Fb6e34eaf($Resultat)) return 0; return(-$Resultat/$Temp); } function FinValFuture($CapitalInitial = 0, $DepotMois = 0, $NbPeriode = 1, $Taux = 1, $Debut = true) { global $FinanceErreur; $Result = 0; $Temp = 0; $Temp2 = 0; $FinanceErreur=ERR_NONE; if($Taux==0) return -$CapitalInitial-$DepotMois*$NbPeriode; $Taux/=100; $Temp=pow(1+$Taux,(double)$NbPeriode); if (Fb6e34eaf($Temp)) return 0; if(!$Debut) $Result=$CapitalInitial*$Temp; else $Result=($CapitalInitial+$DepotMois)*$Temp-$DepotMois; if (Fb6e34eaf($Result)) return 0; $Temp2=-($Result+$DepotMois*($Temp-1)/$Taux); if (Fb6e34eaf($Temp2)) return 0; return $Temp2; } function FinValRemboursement($CapitalInitial = 0, $Periode = 1, $Taux = 1) { global $FinanceErreur; $Temp = 0; $Temp2 = 0; $FinanceErreur=ERR_NONE; if($Taux==0) { if($Periode==0) { $FinanceErreur=ERR_FINA3; return 0; } $Temp=-$CapitalInitial/$Periode; if (Fb6e34eaf($Temp)) return 0; return $Temp; } $Taux/=100; $Temp=pow(1+$Taux,-(double)$Periode); if (Fb6e34eaf($Temp)) return 0; if($Temp==1) { $FinanceErreur=ERR_FINA9; return 0; } $Temp2=-$CapitalInitial*$Taux/(1-$Temp); if (Fb6e34eaf($Temp2)) return 0; return $Temp2; } function StatMax($sNomMatrice, $nNumLigneColonne = 1, $bColonne = true) { $Matrice = Fc99eef36($sNomMatrice); if(!isset($Matrice)) { return 0; } $TabValeurs = F2cfb61a0($Matrice, $nNumLigneColonne, $bColonne); if(!isset($TabValeurs)) { return 0; } return max($TabValeurs); } function StatMin($sNomMatrice, $nNumLigneColonne = 1, $bColonne = true) { $Matrice = Fc99eef36($sNomMatrice); if(!isset($Matrice)) { return 0; } $TabValeurs = F2cfb61a0($Matrice, $nNumLigneColonne, $bColonne); if(!isset($TabValeurs)) { return 0; } return min($TabValeurs); } function StatSomme($sNomMatrice, $nNumLigneColonne = 1, $bColonne = true) { $Matrice = Fc99eef36($sNomMatrice); if(!isset($Matrice)) { return 0; } $TabValeurs = F2cfb61a0($Matrice, $nNumLigneColonne, $bColonne); if(!isset($TabValeurs)) { return 0; } $somme = 0; $nBorneMax=count($TabValeurs); for($i=0;$i<$nBorneMax;$i++) { $somme += $TabValeurs[$i]; } return $somme; } function StatMoyenne($sNomMatrice, $nTypeMoyenne= STAT_ARITHMETIQUE, $nNumLigneColonne = 1, $bColonne = true) { $Matrice = Fc99eef36($sNomMatrice); if(!isset($Matrice)) { return 0; } $TabValeurs = F2cfb61a0($Matrice, $nNumLigneColonne, $bColonne); if(!isset($TabValeurs)) { return 0; } switch($nTypeMoyenne) { case STAT_HARMONIQUE : return Fd7a5670d($TabValeurs); case STAT_GEOMETRIQUE : return F876c64ee($TabValeurs); default : case STAT_ARITHMETIQUE : return Fe3982e7b($TabValeurs); } } function StatVarianceP($sNomMatrice, $nNumLigneColonne = 1, $bColonne = true) { return F1bcf2cb0($sNomMatrice, $nNumLigneColonne, $bColonne); } function F1bcf2cb0($sNomMatrice, $nNumLigneColonne = 1, $bColonne = true) { $Matrice = Fc99eef36($sNomMatrice); if(!isset($Matrice)) { return 0; } $TabValeurs = F2cfb61a0($Matrice, $nNumLigneColonne, $bColonne); if(!isset($TabValeurs)) { return 0; } if(count($TabValeurs) < 2) { global $nStatErreur; $nStatErreur = ERR_STAT2; return 0; } $moyenne = Fe3982e7b($TabValeurs); $resultat =0; foreach ($TabValeurs as $valeur) { $resultat += pow($valeur - $moyenne, 2); } $resultat /= count($TabValeurs); return $resultat; } function StatVariance($sNomMatrice, $nNumLigneColonne = 1, $bColonne = true) { return F26e810d7($sNomMatrice, $nNumLigneColonne, $bColonne); } function F26e810d7($sNomMatrice, $nNumLigneColonne = 1, $bColonne = true) { $Matrice = Fc99eef36($sNomMatrice); if(!isset($Matrice)) { return 0; } $TabValeurs = F2cfb61a0($Matrice, $nNumLigneColonne, $bColonne); if(!isset($TabValeurs)) { return 0; } if(count($TabValeurs) < 2) { global $nStatErreur; $nStatErreur = ERR_STAT2; return 0; } $moyenne = Fe3982e7b($TabValeurs); $resultat =0; foreach ($TabValeurs as $valeur) { $resultat += pow($valeur - $moyenne, 2); } $resultat /= count($TabValeurs) - 1; return $resultat; } function StatEcartTypeP($sNomMatrice, $nNumLigneColonne = 1, $bColonne = true) { $result = sqrt(F1bcf2cb0($sNomMatrice, $nNumLigneColonne, $bColonne)); if(is_nan($result)) { global $nStatErreur; $nStatErreur = ERR_STAT3; return 0; } return $result; } function StatEcartType($sNomMatrice, $nNumLigneColonne = 1, $bColonne = true) { $result = sqrt(F26e810d7($sNomMatrice, $nNumLigneColonne, $bColonne)); if(is_nan($result)) { global $nStatErreur; $nStatErreur = ERR_STAT3; return 0; } return $result; } function StatCovariance($sNomMatrice, $nNumLigneColonne1=1, $nNumLigneColonne2=2, $bColonne=true) { $Matrice = Fc99eef36($sNomMatrice); if(!isset($Matrice)) { return 0; } $Serie1 = F2cfb61a0($Matrice, $nNumLigneColonne1, $bColonne); $Serie2 = F2cfb61a0($Matrice, $nNumLigneColonne2, $bColonne); if(!isset($Serie1) || !isset($Serie2)) { return 0; } $moyenneSerie1 = Fe3982e7b($Serie1); $moyenneSerie2 = Fe3982e7b($Serie2); $resultat =0; $nBorneMax = count($Serie1); for($i=0;$i<$nBorneMax;$i++) { $resultat += ($Serie1[$i] - $moyenneSerie1) * ($Serie2[$i] - $moyenneSerie2); } $resultat /= count($Serie1); return $resultat; } function StatEcartMoyen($sNomMatrice, $nNumLigneColonne = 1, $bColonne = true) { $Matrice = Fc99eef36($sNomMatrice); if(!isset($Matrice)) { return 0; } $TabValeurs = F2cfb61a0($Matrice, $nNumLigneColonne, $bColonne); if(!isset($TabValeurs)) { return 0; } if(count($TabValeurs) < 2) { global $nStatErreur; $nStatErreur = ERR_STAT2; return 0; } $moyenne = Fe3982e7b($TabValeurs); $resultat =0; foreach ($TabValeurs as $valeur) { $resultat += abs($valeur - $moyenne); } $resultat /= count($TabValeurs); return $resultat; } function StatCorrelation($sNomMatrice, $nNumLigneColonne1=1, $nNumLigneColonne2=2, $bColonne=true) { $Matrice = Fc99eef36($sNomMatrice); if(!isset($Matrice)) { return 0; } $Serie1 = F2cfb61a0($Matrice, $nNumLigneColonne1, $bColonne); $Serie2 = F2cfb61a0($Matrice, $nNumLigneColonne2, $bColonne); if(!isset($Serie1) || !isset($Serie2)) { return 0; } $moyenneSerie1 = Fe3982e7b($Serie1); $moyenneSerie2 = Fe3982e7b($Serie2); $resultat =0; $sommeProduit = 0; $sommeEcartMoyenne1= 0; $sommeEcartMoyenne2= 0; $nBorneMax = count($Serie1); for($i=0;$i<$nBorneMax;$i++) { $sommeProduit += ($Serie1[$i] - $moyenneSerie1) * ($Serie2[$i] - $moyenneSerie2); $sommeEcartMoyenne1 += pow($Serie1[$i] - $moyenneSerie1,2); $sommeEcartMoyenne2 += pow($Serie2[$i] - $moyenneSerie2,2); } $RacineProduitEcart = (sqrt($sommeEcartMoyenne1) * sqrt($sommeEcartMoyenne2)); if($RacineProduitEcart == 0) { global $nStatErreur; $nStatErreur = ERR_STAT4; return 0; } $resultat = $sommeProduit / $RacineProduitEcart; return $resultat; } function StatErreur() { global $nStatErreur; return $nStatErreur; } function Fe3982e7b($TabValeurs) { $somme = 0; $nBorneMax=count($TabValeurs); for($i=0;$i<$nBorneMax;$i++) { $somme += $TabValeurs[$i]; } return $somme / count($TabValeurs); } function F876c64ee($TabValeurs) { $produit = 1; $nBorneMax = count($TabValeurs); for($i=0;$i<$nBorneMax;$i++) { $produit *= $TabValeurs[$i]; } $result = pow($produit, 1/count($TabValeurs)); if(is_nan($result)) { global $nStatErreur; $nStatErreur = ERR_STAT3; return 0; } return $result; } function Fd7a5670d($TabValeurs) { $somme = 0; $nBorneMax=count($TabValeurs); for($i=0;$i<$nBorneMax;$i++) { $somme += (1/$TabValeurs[$i]); } if($somme == 0) { global $nStatErreur; $nStatErreur = ERR_STAT4; return 0; } return count($TabValeurs) / $somme; } function F2cfb61a0($Matrice, $nNumLigneColonne, $bColonne) { $tabValeurs = array(); if($bColonne) { if($nNumLigneColonne > 0 && $nNumLigneColonne <= $Matrice->nNbColonne) { for($i=0;$i<$Matrice->nNbLigne;$i++) { $tabValeurs[$i] = $Matrice->GetValeur($i+1, $nNumLigneColonne); } } else { return null; } } else { if($nNumLigneColonne > 0 && $nNumLigneColonne <= $Matrice->nNbLigne) { for($i=0;$i<$Matrice->nNbColonne;$i++) { $tabValeurs[$i] = $Matrice->GetValeur($nNumLigneColonne, $i+1); } } else { return null; } } return $tabValeurs; } function Fc99eef36($sNomMatrice) { global $nStatErreur; $nStatErreur = ERR_STAT_NONE; $Matrice = &F641faf00($sNomMatrice); if(!isset($Matrice)) { $nStatErreur = ERR_STAT5; return null; } if($Matrice->nNbLigne == 0) { $nStatErreur = ERR_STAT1; return null; } return $Matrice; } function MatCree($sNomMatrice) { return F7f659152($sNomMatrice); } function F7f659152($sNomMatrice) { global $TabVariableGlobaleMAT, $sNomDerniereFonctionMatrice; $sNomDerniereFonctionMatrice = Fc34ec142("FCT_MATRICE_CREE"); if(!isset($TabVariableGlobaleMAT[MATRICE])) { $TabMatrice = array(); $TabVariableGlobaleMAT[MATRICE] = &$TabMatrice; } else { $TabMatrice = &$TabVariableGlobaleMAT[MATRICE]; } $Matrice = new FMK_Matrice($sNomMatrice); $TabMatrice[utf8_strtolower($sNomMatrice)] = $Matrice; return true; } function MatExiste($sNomMatrice) { global $TabVariableGlobaleMAT, $sNomDerniereFonctionMatrice; $sNomDerniereFonctionMatrice = Fc34ec142("FCT_MATRICE_EXISTE"); if(!isset($TabVariableGlobaleMAT[MATRICE])) { return false; } else { $TabMatrice = $TabVariableGlobaleMAT[MATRICE]; return isset($TabMatrice[utf8_strtolower($sNomMatrice)]); } } function MatRemplit($sNomMatrice, $valeur, $nNbLigne, $nNbColonne) { global $sNomDerniereFonctionMatrice; $sNomDerniereFonctionMatrice = Fc34ec142("FCT_MATRICE_REMPLIT"); $Matrice = &F641faf00($sNomMatrice); for($i=1;$i<=$nNbLigne;$i++) { for($j=1;$j<=$nNbColonne;$j++) { $Matrice->SetValeur($valeur, $i, $j); } } return true; } function MatAdditionne($sNomMatrice1, $sNomMatrice2, $sNomMatriceResultat) { global $sNomDerniereFonctionMatrice; $sNomDerniereFonctionMatrice = Fc34ec142("FCT_MATRICE_ADDITIONNE"); $Matrice1 = F641faf00($sNomMatrice1); $Matrice2 = F641faf00($sNomMatrice2); if($Matrice1->nNbLigne != $Matrice2->nNbLigne || $Matrice1->nNbColonne != $Matrice2->nNbColonne ) { Erreur('ErreurWL',"ErreurMatriceDimension", $sNomDerniereFonctionMatrice); return false; } if(!F7f659152($sNomMatriceResultat)) { return false; } $MatriceResultat = &F641faf00($sNomMatriceResultat); for($i=1;$i<=$Matrice1->nNbLigne;$i++) { for($j=1;$j<=$Matrice1->nNbColonne;$j++) { $MatriceResultat->SetValeur($Matrice1->GetValeur($i, $j) + $Matrice2->GetValeur($i, $j), $i, $j); } } return true; } function MatMultiplie($sNomMatrice1, $sNomMatrice2, $sNomMatriceResultat) { global $sNomDerniereFonctionMatrice; $sNomDerniereFonctionMatrice = Fc34ec142("FCT_MATRICE_MULTIPLIE"); $Matrice1 = F641faf00($sNomMatrice1); $Matrice2 = F641faf00($sNomMatrice2); if($Matrice1->nNbLigne != $Matrice2->nNbColonne) { Erreur('ErreurWL',"ErreurMatriceDimension", $sNomDerniereFonctionMatrice); return false; } if(!F7f659152($sNomMatriceResultat)) { return false; } $MatriceResultat = &F641faf00($sNomMatriceResultat); for($i=1;$i<=$Matrice1->nNbLigne;$i++) { for($j=1;$j<=$Matrice1->nNbColonne;$j++) { $valeur = 0; for($k=1;$k<=$Matrice1->nNbColonne;$k++) { $valeur += $Matrice1->GetValeur($i, $k) * $Matrice2->GetValeur($k, $j); } $MatriceResultat->SetValeur($valeur, $i, $j); } } return true; } function MatLit($sNomMatrice, $nIndiceLigne, $nIndiceColonne) { global $sNomDerniereFonctionMatrice; $sNomDerniereFonctionMatrice = Fc34ec142("FCT_MATRICE_LIT"); $Matrice = &F641faf00($sNomMatrice); return $Matrice->GetValeur($nIndiceLigne, $nIndiceColonne); } function MatCopie($sNomMatriceOrigine, $sNomMatriceDestination) { global $sNomDerniereFonctionMatrice; $sNomDerniereFonctionMatrice = Fc34ec142("FCT_MATRICE_COPIE"); $MatriceOrigine = F641faf00($sNomMatriceOrigine); if(!F7f659152($sNomMatriceDestination)) { return false; } $MatriceDestination = &F641faf00($sNomMatriceDestination); $MatriceDestination->nNbLigne = $MatriceOrigine->nNbLigne; $MatriceDestination->nNbColonne = $MatriceOrigine->nNbColonne; $MatriceDestination->Matrice = $MatriceOrigine->Matrice; return true; } function MatDeterminant($sNomMatrice) { global $sNomDerniereFonctionMatrice; $sNomDerniereFonctionMatrice = Fc34ec142("FCT_MATRICE_DETERMINANT"); $Matrice = F641faf00($sNomMatrice); return $Matrice->F90350c0b(); } function MatEcrit($sNomMatrice, $valeur, $nIndiceLigne, $nIndiceColonne) { global $sNomDerniereFonctionMatrice; $sNomDerniereFonctionMatrice = Fc34ec142("FCT_MATRICE_ECRIT"); $Matrice = &F641faf00($sNomMatrice); if($nIndiceColonne < 1 || $nIndiceLigne < 1) { $nIndice = $nIndiceLigne; if($nIndiceColonne < 1) { $nIndice = $nIndiceColonne; } Erreur('ErreurWL_2_Param',"ErreurMatriceIndiceInvalide", $sNomDerniereFonctionMatrice, $nIndice, 1); return false; } $Matrice->SetValeur($valeur, $nIndiceLigne, $nIndiceColonne); return true; } function MatErreur($sNomMatrice) { global $sNomDerniereFonctionMatrice; $sNomDerniereFonctionMatrice = Fc34ec142("FCT_MATRICE_ERREUR"); $Matrice = F641faf00($sNomMatrice); return $Matrice->nCodeErreur; } function MatLitColonne($sNomMatrice, $nIndiceColonne, $sFormat='') { global $sNomDerniereFonctionMatrice; $sNomDerniereFonctionMatrice = Fc34ec142("FCT_MATRICE_LIT_COLONNE"); $Matrice = F641faf00($sNomMatrice); return $Matrice->F44e850a0($nIndiceColonne, $sFormat); } function MatLitLigne($sNomMatrice, $nIndiceLigne, $sFormat='') { global $sNomDerniereFonctionMatrice; $sNomDerniereFonctionMatrice = Fc34ec142("FCT_MATRICE_LIT_LIGNE"); $Matrice = F641faf00($sNomMatrice); return $Matrice->F4264d7d6($nIndiceLigne, $sFormat); } function MatNbColonne($sNomMatrice) { global $sNomDerniereFonctionMatrice; $sNomDerniereFonctionMatrice = Fc34ec142("FCT_MATRICE_NB_COLONNE"); $Matrice = F641faf00($sNomMatrice); return $Matrice->nNbColonne; } function MatNbLigne($sNomMatrice) { global $sNomDerniereFonctionMatrice; $sNomDerniereFonctionMatrice = Fc34ec142("FCT_MATRICE_NB_LIGNE"); $Matrice = F641faf00($sNomMatrice); return $Matrice->nNbLigne; } function MatSupprime($sNomMatrice) { global $TabVariableGlobaleMAT, $sNomDerniereFonctionMatrice; $sNomDerniereFonctionMatrice = Fc34ec142("FCT_MATRICE_SUPPRIME"); if(isset($TabVariableGlobaleMAT[MATRICE])) { $TabMatrice = &$TabVariableGlobaleMAT[MATRICE]; unset($TabMatrice[$sNomMatrice]); } } function MatReelAdditionne($sNomMatrice, $valeur) { global $sNomDerniereFonctionMatrice; $sNomDerniereFonctionMatrice = Fc34ec142("FCT_MATRICE_REEL_ADDITIONNE"); $Matrice = &F641faf00($sNomMatrice); $Matrice->F3fb10ec9($valeur); } function MatReelMultiplie($sNomMatrice, $valeur) { global $sNomDerniereFonctionMatrice; $sNomDerniereFonctionMatrice = Fc34ec142("FCT_MATRICE_REEL_MULTIPLIE"); $Matrice = &F641faf00($sNomMatrice); $Matrice->F6a29f37a($valeur); } function MatInverse($sNomMatrice, $sNomMatriceInverse) { global $TabVariableGlobaleMAT, $sNomDerniereFonctionMatrice; $sNomDerniereFonctionMatrice = Fc34ec142("FCT_MATRICE_INVERSE"); if(utf8_strcasecmp($sNomMatrice, $sNomMatriceInverse) == 0) { Erreur('ErreurWL',"ErreurMatriceInvalide", $sNomDerniereFonctionMatrice); return false; } $Matrice = F641faf00($sNomMatrice); $MatriceInverse = $Matrice->Fff17caf2(); if(isset($MatriceInverse)) { $MatriceInverse->sNomMatrice = $sNomMatriceInverse; $TabMatrice = &$TabVariableGlobaleMAT[MATRICE]; $TabMatrice[utf8_strtolower($sNomMatriceInverse)] = $MatriceInverse; return true; } return false; } function MatTranspose($sNomMatrice, $sNomMatriceTranspose) { global $TabVariableGlobaleMAT, $sNomDerniereFonctionMatrice; $sNomDerniereFonctionMatrice = Fc34ec142("FCT_MATRICE_TRANSPOSE"); if(utf8_strcasecmp($sNomMatrice, $sNomMatriceTranspose) == 0) { Erreur('ErreurWL',"ErreurMatriceInvalide", $sNomDerniereFonctionMatrice); return false; } $Matrice = F641faf00($sNomMatrice); $MatriceTranspose = $Matrice->F83bd34ab(); if(isset($MatriceTranspose)) { $MatriceTranspose->sNomMatrice = $sNomMatriceTranspose; $TabMatrice = &$TabVariableGlobaleMAT[MATRICE]; $TabMatrice[utf8_strtolower($sNomMatriceTranspose)] = $MatriceTranspose; return true; } return false; } function& F641faf00($sNomMatrice, $bErreurSiInexistant = true) { $RetourParDefaut = null; global $TabVariableGlobaleMAT,$sNomDerniereFonctionMatrice; if(isset($TabVariableGlobaleMAT[MATRICE])) { $TabMatrice = &$TabVariableGlobaleMAT[MATRICE]; if(isset($TabMatrice[utf8_strtolower($sNomMatrice)])) { return $TabMatrice[utf8_strtolower($sNomMatrice)]; } } if($bErreurSiInexistant) { Erreur('ErreurWL',"ErreurMatriceInvalide", $sNomDerniereFonctionMatrice); } return $RetourParDefaut; } class FMK_Matrice { var $sNomMatrice = ""; var $nNbLigne = 0; var $nNbColonne = 0; var $Matrice = array(); var $nCodeErreur = 0; function FMK_Matrice($sNomMatrice) { $this->sNomMatrice = $sNomMatrice; } function SetValeur($valeur, $nIndiceLigne, $nIndiceColonne) { if(!isset($this->Matrice[$nIndiceLigne-1])) { $this->Matrice[$nIndiceLigne-1] = array(); } $this->Matrice[$nIndiceLigne-1][$nIndiceColonne-1] = $valeur; $this->nNbLigne = max($nIndiceLigne, $this->nNbLigne); $this->nNbColonne = max($nIndiceColonne, $this->nNbColonne); } function& GetValeur($nIndiceLigne, $nIndiceColonne) { global $sNomDerniereFonctionMatrice; $nRetourParDefaut = 0; if($nIndiceLigne < 1 || $nIndiceLigne > $this->nNbLigne || $nIndiceColonne < 1 || $nIndiceColonne > $this->nNbColonne) { Erreur('ErreurWL',"ErreurMatricePositionInvalide", $sNomDerniereFonctionMatrice); return $nRetourParDefaut; } return $this->Matrice[$nIndiceLigne-1][$nIndiceColonne-1]; } function F44e850a0($nIndiceColonne, $sFormat='') { global $sNomDerniereFonctionMatrice; if($nIndiceColonne < 1 || $nIndiceColonne > $this->nNbColonne) { Erreur('ErreurWL',"ErreurMatricePositionInvalide", $sNomDerniereFonctionMatrice); return ""; } $sResultat =""; for($i=0;$i<$this->nNbLigne;$i++) { if($i > 0) { $sResultat .= "\t"; } if(!empty($sFormat)) { $sResultat .= F0bbea4d4($this->Matrice[$i][$nIndiceColonne-1], $sFormat); } else { $sResultat .= $this->Matrice[$i][$nIndiceColonne-1]; } } return $sResultat; } function F4264d7d6($nIndiceLigne, $sFormat='') { global $sNomDerniereFonctionMatrice; if($nIndiceLigne < 1 || $nIndiceLigne > $this->nNbLigne) { Erreur('ErreurWL',"ErreurMatricePositionInvalide", $sNomDerniereFonctionMatrice); return ""; } $sResultat =""; for($i=0;$i<$this->nNbColonne;$i++) { if($i > 0) { $sResultat .= "\t"; } if(!empty($sFormat)) { $sResultat .= F0bbea4d4($this->Matrice[$nIndiceLigne-1][$i], $sFormat); } else { $sResultat .= $this->Matrice[$nIndiceLigne-1][$i]; } } return $sResultat; } function F3fb10ec9($valeur) { for($i=0;$i<$this->nNbLigne;$i++) { for($j=0;$j<$this->nNbColonne;$j++) { $this->Matrice[$i][$j] += $valeur; } } } function F6a29f37a($valeur) { for($i=0;$i<$this->nNbLigne;$i++) { for($j=0;$j<$this->nNbColonne;$j++) { $this->Matrice[$i][$j] *= $valeur; } } } function F90350c0b() { if($this->nNbLigne == $this->nNbColonne) { if($this->nNbLigne == 1) { return $this->Matrice[0][0]; } else if($this->nNbLigne == 2) { return $this->Matrice[0][0]*$this->Matrice[1][1]-$this->Matrice[0][1]*$this->Matrice[1][0]; } else { $resultat = 0; $signe = 1; for($i=0;$i<$this->nNbColonne;$i++) { $MatrixTemp = $this->F962b584d(0, $i); $resultat += $signe * $this->Matrice[0][$i] * $MatrixTemp->F90350c0b(); $signe *= -1; } return $resultat; } } global $sNomDerniereFonctionMatrice; Erreur('ErreurWL',"ErreurMatriceDimension", $sNomDerniereFonctionMatrice); return 0; } function Fe885f80e() { $CoMatrice = new FMK_Matrice("COMATRICE"); $SousMatrice = new FMK_Matrice("SOUSMATRICE"); for($i=0;$i<$this->nNbLigne;$i++) { for($j=0;$j<$this->nNbColonne;$j++) { $SousMatrice = $this->F962b584d($i, $j); if(($i+$j) % 2 == 0) { $CoMatrice->SetValeur($SousMatrice->F90350c0b(), $i+1, $j+1); } else { $CoMatrice->SetValeur($SousMatrice->F90350c0b() * -1, $i+1, $j+1); } } } return $CoMatrice; } function Fff17caf2() { $determinant = $this->F90350c0b(); if($determinant == 0) { $this->nCodeErreur = 30012; return null; } $CoMatrice = $this->Fe885f80e(); $CoMatriceTransposee = $CoMatrice->F83bd34ab(); $CoMatriceTransposee->F6a29f37a(1/$determinant); return $CoMatriceTransposee; } function F83bd34ab() { $MatriceTransposee = new FMK_Matrice("TRANSPOSE"); for($i=0;$i<$this->nNbLigne;$i++) { for($j=0;$j<$this->nNbColonne;$j++) { $MatriceTransposee->SetValeur($this->Matrice[$j][$i], $i+1, $j+1); } } return $MatriceTransposee; } function F962b584d($nIndiceLigne, $nIndiceColonne) { $MatrixTemp = new FMK_Matrice("TEMP"); for($nR=0,$nW=0;$nR<$this->nNbLigne;$nR++) { if($nR != $nIndiceLigne) { for($mR=0, $mW=0;$mR<$this->nNbColonne;$mR++) { if($mR != $nIndiceColonne) { $MatrixTemp->SetValeur($this->Matrice[$nR][$mR],$nW+1, $mW+1); ++$mW; } } ++$nW; } } return $MatrixTemp; } } ?>