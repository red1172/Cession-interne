<?php
//20.0.56.0 FMK/Pear/SQL/Lexer.php GF  Based on LGPL Project SQL_Parser which can be found at http://pear.php.net/package/SQL_Parser 
//VersionVI: 30F200066p
//(c) 2005-2012 PC SOFT  - Release
 if (!defined('__INC__FMK/Compat/ctype.php')) { define('__INC__FMK/Compat/ctype.php',true); include_once(WB_INCLUDE_PATH.'WD71f01babd828f48594d95888dcf3c976.php'); } class Lexer { var $symbols = array(); var $tokPtr = 0; var $tokStart = 0; var $tokLen = 0; var $tokText = ''; var $lineNo = 0; var $lineBegin = 0; var $string = ''; var $stringLen = 0; var $tokAbsStart = 0; var $skipText = ''; var $lookahead = 0; var $tokenStack = array(); var $stackPtr = 0; function Lexer($string = '', $lookahead=0) { $this->string = $string; $this->stringLen = utf8_strlen($string); $this->lookahead = $lookahead; } function Fb5eda0a7() { ++$this->tokPtr; ++$this->tokLen; return ($this->tokPtr <= $this->stringLen) ? $this->string{$this->tokPtr - 1} : null; } function F16d73c67() { --$this->tokPtr; --$this->tokLen; } function F08b43519() { ++$this->tokStart; return ($this->tokPtr != $this->stringLen) ? $this->string{$this->tokPtr++} : ''; } function F4bc48a3c() { $this->tokPtr = $this->tokStart; $this->tokLen = 0; } function Fcfab67b8($c) { return (($c == '<') || ($c == '>') || ($c == '=') || ($c == '!')); } function Fbbc08648() { if($this->lookahead>0 && count($this->tokenStack)>0 && $this->stackPtr>0) { $this->stackPtr--; } } function Fb067b3d3() { if($this->lookahead>0) { if ($this->stackPtr<count($this->tokenStack)) { $this->tokText = $this->tokenStack[$this->stackPtr]['tokText']; $this->skipText = $this->tokenStack[$this->stackPtr]['skipText']; $token = $this->tokenStack[$this->stackPtr]['token']; $this->stackPtr++; return $token; } else { if ($this->stackPtr == $this->lookahead) { for($i=0; $i<(count($this->tokenStack)-1); $i++) { $this->tokenStack[$i] = $this->tokenStack[$i+1]; } $this->stackPtr--; } $token = $this->F86351fd0(); $this->tokenStack[$this->stackPtr] = array('token'=>$token, 'tokText'=>$this->tokText, 'skipText'=>$this->skipText); $this->stackPtr++; return $token; } } else { return $this->F86351fd0(); } } function F86351fd0() { if ($this->string == '') return; $state = 0; $this->tokAbsStart = $this->tokStart; while (true){ switch($state) { case 0: $this->tokPtr = $this->tokStart; $this->tokText = ''; $this->tokLen = 0; $c = $this->Fb5eda0a7(); if (is_null($c)) { $state = 1000; break; } while (($c == ' ') || ($c == "\t") || ($c == "\n") || ($c == "\r")) { if ($c == "\n" || $c == "\r") { if($c == "\r") { $c = $this->F08b43519(); if($c != "\n") $this->F16d73c67(); } ++$this->lineNo; $this->lineBegin = $this->tokPtr; } $c = $this->F08b43519(); $this->tokLen = 1; } if ($c == '\\') { $t = $this->Fb5eda0a7(); if ($t == '\'' || $t == '\\' || $t == '"') { $this->tokText = $t; $this->tokStart = $this->tokPtr; return $this->tokText; } else { $this->F16d73c67(); $state = 999; break; } } if (($c == '\'') || ($c == '"')) { $quote = $c; $state = 12; break; } if ($c == '_') { $state = 18; break; } if (ctype_alpha(utf8_ord($c))) { $state = 1; break; } if (ctype_digit(utf8_ord($c))) { $state = 5; break; } if ($c == '.') { $t = $this->Fb5eda0a7(); if ($t == '.') { if ($this->Fb5eda0a7() == '.') { $this->tokText = '...'; $this->tokStart = $this->tokPtr; return $this->tokText; } else { $state = 999; break; } } else if (ctype_digit(utf8_ord($t))) { $this->F16d73c67(); $state = 7; break; } else { $this->F16d73c67(); } } if ($c == '#') { $state = 14; break; } if ($c == '-') { $t = $this->Fb5eda0a7(); if ($t == '-') { $state = 14; break; } else { $this->F16d73c67(); $state = 5; break; } } if ($this->Fcfab67b8($c)) { $state = 10; break; } $state = 999; break; case 1: $c = $this->Fb5eda0a7(); if (ctype_alnum(utf8_ord($c)) || ($c == '_') || ($c == '.')) { $state = 1; break; } $state = 2; break; case 2: $this->F16d73c67(); $this->tokText = utf8_substr($this->string, $this->tokStart, $this->tokLen); $testToken = utf8_strtolower($this->tokText); if (isset($this->symbols[$testToken])) { $this->skipText = utf8_substr($this->string, $this->tokAbsStart, $this->tokStart-$this->tokAbsStart); $this->tokStart = $this->tokPtr; return $testToken; } else { $this->skipText = utf8_substr($this->string, $this->tokAbsStart, $this->tokStart-$this->tokAbsStart); $this->tokStart = $this->tokPtr; return 'ident'; } break; case 5: $c = $this->Fb5eda0a7(); if (ctype_digit(utf8_ord($c))) { $state = 5; break; } else if ($c == '.') { $t = $this->Fb5eda0a7(); if($t == '.') { $this->F16d73c67(); } else { $state = 7; break; } } else if(ctype_alpha(utf8_ord($c))) { $state = 999; break; } else { $state = 6; break; } case 6: $this->F16d73c67(); $this->tokText = intval(utf8_substr($this->string, $this->tokStart, $this->tokLen)); $this->skipText = utf8_substr($this->string, $this->tokAbsStart, $this->tokStart-$this->tokAbsStart); $this->tokStart = $this->tokPtr; return 'int_val'; break; case 7: $c = $this->Fb5eda0a7(); if ($c == 'e' || $c == 'E') { $state = 15; break; } if (ctype_digit(utf8_ord($c))) { $state = 7; break; } $state = 8; break; case 8: $this->F16d73c67(); $this->tokText = floatval(utf8_substr($this->string, $this->tokStart, $this->tokLen)); $this->skipText = utf8_substr($this->string, $this->tokAbsStart, $this->tokStart-$this->tokAbsStart); $this->tokStart = $this->tokPtr; return 'real_val'; case 10: $c = $this->Fb5eda0a7(); if ($this->Fcfab67b8($c)) { $state = 10; break; } $state = 11; break; case 11: $this->F16d73c67(); $this->tokText = utf8_substr($this->string, $this->tokStart, $this->tokLen); if($this->tokText) { $this->skipText = utf8_substr($this->string, $this->tokAbsStart, $this->tokStart-$this->tokAbsStart); $this->tokStart = $this->tokPtr; return $this->tokText; } $state = 999; break; case 12: $bail = false; while (!$bail) { switch ($this->Fb5eda0a7()) { case '': $this->tokText = null; $bail = true; break; case "\\": if (!$this->Fb5eda0a7()) { $this->tokText = null; $bail = true; } break; case $quote: $this->tokText = utf8_stripslashes(utf8_substr($this->string, ($this->tokStart+1), ($this->tokLen-2))); $bail = true; break; } } if (!is_null($this->tokText)) { $state = 13; break; } $state = 999; break; case 13: $this->skipText = utf8_substr($this->string, $this->tokAbsStart, $this->tokStart-$this->tokAbsStart); $this->tokStart = $this->tokPtr; return 'text_val'; break; case 14: $c = $this->F08b43519(); if ($c == "\n" || $c == "\r" || $c == "") { if ($c == "\r") { $c = $this->F08b43519(); if ($c != "\n") { $this->F16d73c67(); } } if ($c != "") { ++$this->lineNo; $this->lineBegin = $this->tokPtr; } $this->tokStart = $this->tokPtr; $state = 0; } else { $state = 14; } break; case 15: $c = $this->Fb5eda0a7(); if($c == '-' || $c == '+') { $state = 16; break; } $state = 999; break; case 16: $c = $this->Fb5eda0a7(); if (ctype_digit(utf8_ord($c))) { $state = 17; break; } $state = 999; break; case 17: $c = $this->Fb5eda0a7(); if (ctype_digit(utf8_ord($c))) { $state = 17; break; } $state = 8; break; case 18: $c = $this->Fb5eda0a7(); if (ctype_alnum(utf8_ord($c)) || $c == '_') { $state = 18; break; } $state = 19; break; case 19: $this->F16d73c67(); $this->tokText = utf8_substr($this->string, $this->tokStart, $this->tokLen); $this->skipText = utf8_substr($this->string, $this->tokAbsStart, $this->tokStart-$this->tokAbsStart); $this->tokStart = $this->tokPtr; return 'sys_var'; case 999: $this->F4bc48a3c(); $this->tokText = $this->Fb5eda0a7(); $this->skipText = utf8_substr($this->string, $this->tokAbsStart, $this->tokStart-$this->tokAbsStart); $this->tokStart = $this->tokPtr; return $this->tokText; case 1000: $this->tokText = '*end of input*'; $this->skipText = utf8_substr($this->string, $this->tokAbsStart, $this->tokStart-$this->tokAbsStart); $this->tokStart = $this->tokPtr; return null; } } } } ?>