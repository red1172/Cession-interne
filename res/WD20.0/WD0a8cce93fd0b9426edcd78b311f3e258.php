<?php
//20.0.56.0 TYPE/Numerique.php GF 
//VersionVI: 30F200066p
//(c) 2005-2012 PC SOFT  - Release
 if (!defined('__INC__TYPE/Usine.php')) { define('__INC__TYPE/Usine.php',true); include_once(WB_INCLUDE_PATH.'WDa33fd4b06ba3e49d876e9996bca0c7e0.php'); } if (!defined('__INC__TYPE/Modele.php')) { define('__INC__TYPE/Modele.php',true); include_once(WB_INCLUDE_PATH.'WD6ee9539c0ad66df976b95a68703645fb.php'); } if (!defined('__INC__FMK/Chaine.php')) { define('__INC__FMK/Chaine.php',true); include_once(WB_INCLUDE_PATH.'WD55acb2e708e26f23cb8956cd93e98123.php'); } define ('PHP_INT_MIN', (int)(PHP_INT_MAX+1)); define('PHP_NUM_MAX',99999999999999); define('VALEUR_ENTIER_1_MAX' , 127); define('VALEUR_ENTIER_1_MIN' , -128); define('VALEUR_ENTIER_1_PLAGE' , VALEUR_ENTIER_1_MAX + abs(VALEUR_ENTIER_1_MIN) + 1); define('VALEUR_ENTIER_2_MAX' , 32767); define('VALEUR_ENTIER_2_MIN' , -32768); define('VALEUR_ENTIER_2_PLAGE' , VALEUR_ENTIER_2_MAX + abs(VALEUR_ENTIER_2_MIN) + 1); define('VALEUR_ENTIER_4_MAX' , 2147483647); define('VALEUR_ENTIER_4_MIN' , -2147483648); define('VALEUR_ENTIER_4_PLAGE' , VALEUR_ENTIER_4_MAX + abs(VALEUR_ENTIER_4_MIN) + 1); define('VALEUR_ENTIER_8_MAX' , 9223372036854775807); define('VALEUR_ENTIER_8_MIN' , -9223372036854775808); define('VALEUR_ENTIER_8_PLAGE' , VALEUR_ENTIER_8_MAX + abs(VALEUR_ENTIER_8_MIN) + 1); define('VALEUR_ENTIER_0.1_MAX' , 255); define('VALEUR_ENTIER_0.1_MIN' , 0); define('VALEUR_ENTIER_0.1_PLAGE' , constant('VALEUR_ENTIER_0.1_MAX') + 1); define('VALEUR_ENTIER_0.2_MAX' , 65535); define('VALEUR_ENTIER_0.2_MIN' , 0); define('VALEUR_ENTIER_0.2_PLAGE' , constant('VALEUR_ENTIER_0.2_MAX') + 1); define('VALEUR_ENTIER_0.4_MAX' , 4294967295); define('VALEUR_ENTIER_0.4_MIN' , 0); define('VALEUR_ENTIER_0.4_PLAGE' , constant('VALEUR_ENTIER_0.4_MAX') + 1); define('VALEUR_ENTIER_0.8_MAX' , 18446744073709551615); define('VALEUR_ENTIER_0.8_MIN' , 0); define('VALEUR_ENTIER_0.8_PLAGE' , constant('VALEUR_ENTIER_0.8_MAX') + 1); define('VALEUR_REEL_4_MAX' , 3.4 * pow(10,38)); define('VALEUR_REEL_4_MIN' , 1 / VALEUR_REEL_4_MAX); define('VALEUR_REEL_8_MAX' , 1.7 * pow(10,308)); define('VALEUR_REEL_8_MIN' , 1 / VALEUR_REEL_8_MAX); define('VALEUR_NUMERIQUE_MAX', pow(10,32)); define('VALEUR_MONETAIRE_MAX', pow(10,18)); class CReel extends CTypeComparable { var $m_nNombreOctets; function CReel($Valeur = null) { if (is_array($Valeur)) { $this->m_nNombreOctets = $Valeur[0]; parent::CTypeAvecPropriete($Valeur[1]); } else { $this->m_nNombreOctets = 8; parent::CTypeAvecPropriete($Valeur); } } function F9d1a8478() { return 0.0; } function F46a8f50b() { $t = parent::F46a8f50b(); switch ( $this->m_nNombreOctets ) { case 8: break; case 4; $t -= 1; break; default : if (XVER_DEBUG){ var_dump(debug_backtrace()); die("ERREUR DE GENERATION"); } } return $t; } function F0a8d83f4() { $t = TYPE_XML_REEL_8; switch ( $this->m_nNombreOctets ) { case 8: break; case 4; $t = TYPE_XML_REEL_4; break; default : if (XVER_DEBUG){ var_dump(debug_backtrace()); die("ERREUR DE GENERATION"); } } return $t; } function F1b8e122c($Valeur) { $n = $this->F9d1a8478(); if (is_object($Valeur)) { $n = VersPrimitif($Valeur); } else { $n = $Valeur; } if ( (!is_numeric($n)) || (is_string($n))) { $n = floatval($n); } $nNombreDeChiffre = ($this->m_nNombreOctets==4) ? 6 : 15; $n = floatval( F617bf240(is_object($n) ? F075ca95b($n) : $n,$nNombreDeChiffre)); if ($this->m_nNombreOctets==4) { if ( abs($n)>VALEUR_REEL_4_MAX ) { $n = VALEUR_REEL_4_MAX; } } else { if ( abs($n)>VALEUR_REEL_8_MAX ) { $n = VALEUR_REEL_8_MAX; } } return $n; } function& F1e21db15() { $t = TYPEWL_REEL; return $t; } function& Fa4014e81( $compare ) { $clCompare = null; switch ($compare==null ? TYPEWL_NULL : $compare->F1e21db15()) { case TYPEWL_ENTIER: case TYPEWL_MONETAIRE: case TYPEWL_NUMERIQUE: case TYPEWL_REEL: case TYPEWL_NOMBRE: case TYPEWL_BOOLEEN: case TYPEWL_CHAINE: case TYPEWL_CARACTERE: case TYPEWL_CHAINE_ASCIIZ: case TYPEWL_CHAINE_FIXE: case TYPEWL_CHAINE_PASCAL: case TYPEWL_CHAINE_UNICODE: case TYPEWL_VARIANT: case TYPEWL_NULL: $clCompare = $this->F1b8e122c($compare); break; default: Erreur("ErreurGenerique",FMK_ChaineConstruit(Fc34ec142("TYPE_INCOMPATIBLE"),$this->F3b9ec4ca(),$compare->F3b9ec4ca())); $bRetourDefaut = false; return $bRetourDefaut; } $nCompare = F075ca95b($clCompare); $Differrence = floatval($this->m_Valeur) - floatval($nCompare); if ( abs($Differrence) < VALEUR_EPSILON) { $nRetour = 0; } else { if ($Differrence > VALEUR_EPSILON ) $nRetour = 1; else $nRetour = -1; } return $nRetour; } function& F791b7c6d($param=null) { if (!isset($param)) { return $this->GetValeur(); } switch ($param->F1e21db15()) { case TYPEWL_ENTIER: case TYPEWL_MONETAIRE: case TYPEWL_NUMERIQUE: case TYPEWL_REEL: case TYPEWL_NOMBRE: $Resultat = $this->m_Valeur + F075ca95b($param); break; case TYPEWL_BOOLEEN: $Resultat = $this->m_Valeur + ((VersBooleen($param)) ? 1 : 0); break; case TYPEWL_CHAINE: case TYPEWL_CARACTERE: case TYPEWL_CHAINE_ASCIIZ: case TYPEWL_CHAINE_FIXE: case TYPEWL_CHAINE_PASCAL: case TYPEWL_CHAINE_UNICODE: case TYPEWL_VARIANT: $Resultat = $this->Fc424b461() . VersChaine($param); break; default: Erreur("ErreurGenerique",FMK_ChaineConstruit(Fc34ec142("OPERATEUR_INDISPONIBLE"),F9dbbbee0(6166),$this->F3b9ec4ca().' '.F3b9ec4ca($param))); } return $Resultat; } function& Fa05668f4($param = null) { if (!isset($param)) { $this->SetValeur($this->m_Valeur+1); } else $this->SetValeur($this->F791b7c6d($param)); return $this->GetValeur(); } function& GetValeur() { $sValeur = (string)$this->m_Valeur; if (utf8_strpos($sValeur,'E')!==false) { return F617bf240($sValeur); } return $this->m_Valeur; } } class CEntier extends CReel { var $m_bEstRessource = false; function CEntier($Valeur = null) { $this->m_nNombreOctets = 4; if (is_array($Valeur)) { if ($Valeur[0]==-1) { $Valeur[0] = 4; } $this->m_nNombreOctets = $Valeur[0]; parent::CTypeAvecPropriete($Valeur[1]); } else { parent::CTypeAvecPropriete($Valeur); } $this->SetValeur($this->m_Valeur); } function& F1e21db15() { $t = TYPEWL_ENTIER; return $t; } function F262af877() { return constant('VALEUR_ENTIER_' . $this->m_nNombreOctets . '_MAX'); } function Fed2e0945() { return constant('VALEUR_ENTIER_' . $this->m_nNombreOctets . '_MIN'); } function F8345ce92() { return constant('VALEUR_ENTIER_' . $this->m_nNombreOctets . '_PLAGE'); } function F28bbe0f2($N=null) { if (!isset($N)) $N = $this->F8345ce92(); if ($N > PHP_INT_MAX) { return $N; } return intval(intval(PHP_INT_MAX / ($N)) * $N); } function F967397eb() { return ($this->Fed2e0945() == 0); } function F46a8f50b() { $t = parent::F78e674be(); switch ( $this->m_nNombreOctets ) { case 1: $t-=2; break; case 2: $t-=1; break; case 4: break; case 8: $t+=1; break; case 0.1: $t-=6; break; case 0.2: $t-=5; break; case 0: case 0.4: $t-=4; break; case 0.8: $t-=3; break; default : if (XVER_DEBUG){ var_dump(debug_backtrace()); die("ERREUR DE GENERATION"); } } return $t; } function F0a8d83f4() { $t = TYPE_XML_ENTIER_4; switch ( $this->m_nNombreOctets ) { case 1: $t=TYPE_XML_ENTIER_1; break; case 2: $t=TYPE_XML_ENTIER_2; break; case 4: break; case 8: $t=TYPE_XML_ENTIER_8; break; case 0.1: $t=TYPE_XML_ENTIER_U1; break; case 0.2: $t=TYPE_XML_ENTIER_U2; break; case 0: case 0.4: $t=TYPE_XML_ENTIER_U4; break; case 0.8: $t=TYPE_XML_ENTIER_U8; break; default : if (XVER_DEBUG){ var_dump(debug_backtrace()); die("ERREUR DE GENERATION"); } } return $t; } function F9d1a8478() { return 0; } function F1b8e122c($val) { if (is_object($val)) return $this->F1b8e122c(VersPrimitif($val)); if (($this->m_bEstRessource=is_resource($val)) ||( ($this->m_nNombreOctets==4) && is_int($val))) return $val; $nValeurCorrect = F075ca95b($val); $MAX= $this->F262af877(); $MIN= $this->Fed2e0945(); if ($this->m_nNombreOctets==8) { if ($nValeurCorrect > PHP_INT_MAX) { F67cfd262(); Fdd46bacf(FMK_ChaineConstruit('ERR_ENTIER_MAX_DEPASSE',PHP_INT_MAX,$nValeurCorrect)); } if ( ($nValeurCorrect<$MIN) ) { $nValeurCorrect=$MIN; } elseif ($nValeurCorrect > $MAX) { $nValeurCorrect=$MAX; } } else { if ( ($nValeurCorrect<$MIN) ) { $N = $this->F8345ce92(); $X = $this->F28bbe0f2(); while($nValeurCorrect< -$X ) { $nValeurCorrect += $X; } while ( ($nValeurCorrect < $MIN) ) { $nValeurCorrect += $N; } } elseif ( ($nValeurCorrect > $MAX) ) { $N = $this->F8345ce92(); $X = $this->F28bbe0f2(); while($nValeurCorrect>$X) { $nValeurCorrect-=$X; } while ( ($nValeurCorrect > $MAX) ) { $nValeurCorrect -= $N; } } } $nValeurCorrect = floatval( F617bf240(is_object($val) ? F075ca95b($val) : $val,14)); if ($nValeurCorrect < 0) $nValeurCorrect = ceil($nValeurCorrect); else $nValeurCorrect = floor($nValeurCorrect); return ($this->m_nNombreOctets>4) ? $nValeurCorrect : intval($nValeurCorrect); } function& GetValeur() { if ($this->m_bEstRessource) return $this->m_Valeur; return parent::GetValeur(); } function& F23467323( $Debut , $Fin = null ) { $nLongueurBinaire = 8 * ( ($this->m_nNombreOctets<1) ? $this->m_nNombreOctets*10 : $this->m_nNombreOctets ); $sValeurBinaire = utf8_str_pad(base_convert($this->m_Valeur, 10, 2),$nLongueurBinaire,'0',STR_PAD_LEFT); if (!isset($Fin)) $Fin = $nLongueurBinaire; $nDebut = F075ca95b($Debut); $nFin = F075ca95b($Fin); $nRetour = base_convert( utf8_strrev(utf8_substr(utf8_strrev($sValeurBinaire), $nDebut-1, $nFin - ($nDebut- 1) ) ) , 2 , 10); return $nRetour; } function& Fd607686d( $Valeur, $Debut , $Fin = null ) { $nLongueurBinaire = 8 * ( ($this->m_nNombreOctets<1) ? $this->m_nNombreOctets*10 : $this->m_nNombreOctets ); if (!isset($Fin)) $Fin = $nLongueurBinaire; $sValeurBinaire = utf8_str_pad(base_convert($this->m_Valeur, 10, 2),$nLongueurBinaire,'0',STR_PAD_LEFT); $sRemplacement = utf8_strrev( utf8_substr( utf8_strrev( utf8_str_pad(VersChaine(base_convert(F075ca95b($Valeur), 10, 2)),F075ca95b($Fin) - F075ca95b($Debut) + 1,'0',STR_PAD_LEFT)) , 0, F075ca95b($Fin) - F075ca95b($Debut) + 1)); $sNouvelleValeurChaineBinaire = utf8_strrev(utf8_substr_replace(utf8_strrev($sValeurBinaire),utf8_strrev($sRemplacement),VersPrimitif($Debut)-1,utf8_strlen($sRemplacement))); $nNouvelleValeur = base_convert($sNouvelleValeurChaineBinaire,2,10); $this->SetValeur($nNouvelleValeur); return $nNouvelleValeur; } function& F0213adee( $Debut , $Fin ) { $nNumeroOctet = VersPrimitif($Debut); $nTaille = VersPrimitif($Fin); $bParametresCorrects = ( (is_int($nNumeroOctet)) && ($nNumeroOctet >= 1) ); if ($bParametresCorrects) { switch ($this->m_nNombreOctets) { case 4: switch($nTaille) { case wlEntier_1: $bParametresCorrects = ($nNumeroOctet <= 4); $nTaille = 1; break; case wlEntier_2: $bParametresCorrects = ($nNumeroOctet <= 2); $nTaille = 2; break; case wlEntier_4: $bParametresCorrects = ($nNumeroOctet == 1); $nTaille = 4; break; } break; case 8: switch($nTaille) { case wlEntier_1: $bParametresCorrects = ($nNumeroOctet <= 8); $nTaille = 1; break; case wlEntier_2: $bParametresCorrects = ($nNumeroOctet <= 4); $nTaille = 2; break; case wlEntier_4: $bParametresCorrects = ($nNumeroOctet <= 2); $nTaille = 4; break; } break; } } $nLongueurBinaire = 8 * ( ($this->m_nNombreOctets<1) ? $this->m_nNombreOctets*10 : $this->m_nNombreOctets ); $sValeurBinaire = utf8_str_pad(base_convert($this->m_Valeur, 10, 2),$nLongueurBinaire,'0',STR_PAD_LEFT); $sValeurOctet = utf8_strrev( utf8_substr( utf8_strrev($sValeurBinaire) , ( ($nNumeroOctet-1) * 8*$nTaille) , 8*$nTaille) ); $Retour = base_convert($sValeurOctet,2,10); return $Retour; } function& F2ecf50bd( $Valeur,$Debut , $Fin ) { $nNumeroOctet = VersPrimitif($Debut); $nTaille = VersPrimitif($Fin); $bParametresCorrects = ( (is_int($nNumeroOctet)) && ($nNumeroOctet >= 1) ); if ($bParametresCorrects) { switch ($this->m_nNombreOctets) { case 4: switch($nTaille) { case wlEntier_1: $bParametresCorrects = ($nNumeroOctet <= 4); $nTaille = 1; break; case wlEntier_2: $bParametresCorrects = ($nNumeroOctet <= 2); $nTaille = 2; break; case wlEntier_4: $bParametresCorrects = ($nNumeroOctet == 1); $nTaille = 4; break; } break; case 8: switch($nTaille) { case wlEntier_1: $bParametresCorrects = ($nNumeroOctet <= 8); $nTaille = 1; break; case wlEntier_2: $bParametresCorrects = ($nNumeroOctet <= 4); $nTaille = 2; break; case wlEntier_4: $bParametresCorrects = ($nNumeroOctet <= 2); $nTaille = 4; break; } break; } } $nLongueurBinaire = 8 * ( ($this->m_nNombreOctets<1) ? $this->m_nNombreOctets*10 : $this->m_nNombreOctets ); $sValeurBinaire = utf8_str_pad(base_convert($this->m_Valeur, 10, 2),$nLongueurBinaire,'0',STR_PAD_LEFT); $sRemplacement = utf8_str_pad(VersChaine(base_convert(VersPrimitif($Valeur), 10, 2)),8*$nTaille,'0',STR_PAD_LEFT); $sNouvelleValeurChaineBinaire = utf8_strrev(utf8_substr_replace(utf8_strrev($sValeurBinaire),utf8_strrev($sRemplacement),( ($nNumeroOctet-1) * 8*$nTaille),8*$nTaille)); $nNouvelleValeur = base_convert($sNouvelleValeurChaineBinaire,2,10); $this->SetValeur($nNouvelleValeur); return $nNouvelleValeur; } } class CNombre extends CEntier { function CNombre($Valeur=null) { parent::CTypeAvecPropriete($Valeur); } function F1b8e122c($Valeur) { return F075ca95b($Valeur); } function& F1e21db15() { $t = ($this->m_Valeur == floor($this->m_Valeur)) ? TYPEWL_ENTIER : TYPEWL_REEL; return $t; } function& GetValeur() { return $this->m_Valeur; } function F46a8f50b() { return $this->F78e674be(); } } class CMonetaire extends CReel { function CMonetaire($Valeur = null) { parent::CTypeAvecPropriete($Valeur); } function F1b8e122c($val) { return floatval( F617bf240(is_object($val) ? F075ca95b($val) : $val,17,6)); } function& F1e21db15() { $t = TYPEWL_MONETAIRE; return $t; } function F46a8f50b() { return $this->F78e674be(); } function F0a8d83f4() { return TYPE_XML_MONETAIRE; } } class CNumerique extends CReel { var $m_nChiffresPartieEntiere; var $m_nChiffresPartieDecimale; function CNumerique($Valeur = null) { $this->m_nNombreOctets = 38; if (is_array($Valeur)) { if (is_array($Valeur[0])) { switch (count($Valeur[0])) { case 2: $this->m_nChiffresPartieDecimale = $Valeur[0][1]; case 1: $this->m_nChiffresPartieEntiere = $Valeur[0][0]; break; default: if (XVER_DEBUG){ var_dump(debug_backtrace()); die("ERREUR DE GENERATION"); } } } else { $this->m_nChiffresPartieDecimale = min( ($Valeur[0])&0xFF , 14); $this->m_nChiffresPartieEntiere = min( (($Valeur[0]>>8)&0xFF) , 14) - $this->m_nChiffresPartieDecimale; $this->m_nNombreOctets = (($Valeur[0]>>8)&0xFF); } $this->m_nChiffresPartieEntiere = min($this->m_nChiffresPartieEntiere,14); $this->m_nChiffresPartieDecimale = min($this->m_nChiffresPartieDecimale,14-$this->m_nChiffresPartieEntiere); parent::CTypeAvecPropriete($Valeur[1]); } else { parent::CTypeAvecPropriete($Valeur); } } function F1b8e122c($val) { return floatval( F617bf240(is_object($val) ? F075ca95b($val) : $val ,(isset($this->m_nChiffresPartieEntiere)) ? $this->m_nChiffresPartieEntiere : 14 ,(isset($this->m_nChiffresPartieDecimale)) ? $this->m_nChiffresPartieDecimale : null ) ); } function& F1e21db15() { $t = TYPEWL_NUMERIQUE; return $t; } function F46a8f50b() { return $this->F78e674be(); } function F0a8d83f4() { return TYPE_XML_NUMERIQUE; } } ?>